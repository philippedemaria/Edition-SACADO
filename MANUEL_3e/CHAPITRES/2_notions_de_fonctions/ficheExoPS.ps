%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: ficheExoPS.dvi
%%CreationDate: Fri Nov 10 22:27:32 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Letters-Italic
%%+ Utopia-Italic Fourier-Math-Symbols
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ficheExoPS.ps ficheExoPS.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.10:2227
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8E3B73CD51770C28070FC7CE19270F71F6DC653B75064E2B26
689E007EF544F07060235145CD241844A42DBFE137350186B71CD532FD0F8157
74A5B15186A9123E23BA0175EBBB97069C10AF00327116CD3063AFC0B5521AC2
7F8BCCA88A2D0EB4B0CA8181D98F15127DED093F2628D7CAE18D2E7EA3297EA3
E7757E9EE38E938E75D524C0E1004A7FBB555B5B204656BC172C206C57D2D582
3DC62878A4548B7508D5A834E7210ECD9438A16A02EDEA2809ADC0EF1BF32737
2512AAA3B3106BB357AD82E66A36E0FCF4CBF63F048FDEC59801DDC5B98999AC
3F2A1BEBB98B46C3495A8CBAE07F334A9A2BD33DAD0C06D93A034C6DC9535F2F
288CE758CA1AC14D4CAD94455C80B05A0A78AB7CAAF1DB7AE02501B83E2A1299
E86B9C1E72B66D79C82CE9677F599A65BD59EB22DCC2134A67BF798C5EC571BD
033B16ED0BFA40CD1D2708911CCBA898CFF3A9BA37A80AF97AD02A5D08FF6959
74ECC55EEB7C16A41952760A1A6768C90D622B617CF9D9A518FE96095420C870
2003FB5AAA6A2E0D47938837DF75D2AF9E2E1E2EA13306172F64D280E960958A
4F162A3C8FFDEE675EE9658E19B14F4F03D05D74837E0706575919598FBDC52F
789F3C6CA9E8E1876E1B200C82C298957E4172F13348E22B013F3531309A81C5
E2891583A755B987206BF6C94254D4AF0916E4CCACF1BA17B11A0FC612C1784B
6EBE77BC560AAD996928F6493A6A242F6E4E52472C7F84F3A3DB08BE659A2173
96843C250E97A23B438F6930CDC50B51770B94233D669F54EABAB84C4477FFB4
88E2A21A507DFC9C381E12D1DE9DA03B8D111C7EE08F0602129E49B075479601
A59D37CB262F0C1E749B7B426CCEC14FEF9DEA8F63A712ABA903C2198ED98D68
95F44F79BFB78621C7825BC7F34EF6EF44CBFBC5838CA0C04F9BF6A32E67A57A
B1EC475D88EBB28410E0F923684462E7E5D75EB726F41BE2B4A8A9BD405937DA
719CE3AC3BDDD819E6064BEDD2977F7DA14915258D2092227CFA5E9C5711D865
996A6899FD6B9BF00217CBBB9CB138B900792E70A61CF93DD0D7DEAD4D791F7F
5B696150B1EFF654FEE76399CB81B8E3C6F81F2322C8D3F55CDE800A9471C771
ACF32E65AC81EE14FA3D05671F0B995B8B4816BCDD4ABCA87B74DAC7F5D9D072
3B7EC3D44423F534302E6B9C18A152E1EDDB94D1D9F8299D3BDD1E06FFEF8AB4
17C0C7BFEBB26AE0E1B207A966DDE41AE6A3DEBEBE1D54278652BFFDEF64523D
30EC9E1A90EC15A8DB811ED4C507F8952D625D4CDAE65C04DE58BDD29B895F80
B99EFADE52C7B022932C24F464D9A5878A481B35C56595CA06843311B14EEDB9
6A01A348C9E4BD1D6F2EE82417F28FB4D28EC6F6CADD8F83F8858EC20675C761
CAA215022EE3B7EE6EAD432B54F1AF1FF1D91E5FE8366CF9B0B2AB63CD38E586
1D1E7050B30DA4B880B5506E4D127C2F8FC1F8663F7AD65F50D017D60F1032BE
4902BBD548A98362133AFB956668BA833176397D06E1E40933B2DE99DD2C1BAC
15CE6EC720EB5A898BA95D5865E0133671E9A9A609FDA95FE614522F964DCD6A
9102ECED38F4E4B692BB9BFDBDE2C725823EE5D252EC9D6E9C1B533601E5A6AD
DE01BED695A5684A29777BB5680272D8929A0FEE2D892C430468640182E848E6
112C2199B96F3D5E37F6AA0A18E74DC17A0CDDEFE0028AD2F21FAE46CBBB2DB7
72E57DEBD2184DB3337DEEBE01C6F8D597669E5C432FE278D688D76FC18D2327
516DE7F0691D144FF41882A1A3D214AE275E3FC2066C42E07E45530FB6F086BC
DCEBA114BAC5FA3A1FDDABA47B8E7A31A83880F47FEB8ADC1E03E7EB0A9B743C
BDE15942AB89362BD0FF1204CE83F9E22B87968346F8A79C7C3B3DA5F2C9BF9D
86497E847739963C24DC1C41FE4A982DCB1A3BBF9D9CB8DBE935AE424E5BE6BC
3D29D021A5E90951C3F4C2733F543ED67ACC291E068F0E440FE1D5782F896B9B
A4659EF349B8B564F3568965052685F83E8CDAD1364F6503D2E330306F1626D8
D5662A85E8B1A57C584A8CD7A2F619A6B58C66EB509F477C1D5768411B1DFDA3
ECF14ACE46040A588B067D9CC0CBA2AD7FDB194446411BBC1CEBB917FD615BE6
CAFCC7D5B77A94CF46951D3F0EF54BCDEDFA6534494C3B453F66D9B35F5117C6
0FB9D2AB73BD4F4A584BE6A902B9D5524E4990AEB14B34D2A5DA929B9091BEF3
83A7EA6968F4E294CF640488B04EBD32FA748B0C9A785CBEBAC70762DA6AB4EB
2D1ABD75B58A4445F121150A0D4F359AB35E56B2A13486EC0741A413A1873C00
16CFD9E12F1EFCFD8BA4ECFEF75F6B3AC97522466394C72287F40DD1F36D6DAA
EC101D0045947CE1C544CCC102AE2F8C9B35F8A208F9F2C53A0CEFB9EC0BF2A8
6B09DB550C98D0098FA8E0D6A7A60669B29D8B0CABEF8F546551F93A0A8C5A66
C9E2C4AE27A213567DE04E6EB4BC3477EF13765B2CBDC026433D6FF0087A4871
349284EE125B11AC37D0EEFAB515F1147CCCF37B2B5734BA786DB1A5A2BF38CC
9C896EF392055FBBE991A0358E2238F40E594EC6D40CE60BE4BC7E6C3369B0E1
46E1A89F7D781B5076C4E761934638375C4173B13F360FD2D6A980D43A69A5AF
81C2E37369E57AA7A117B079C8302B6563608ED2BD52444B8C49B04D212B1CD2
39F193ACC8580ABDA2FE0AD84C5DF69A347451F3EFA021E2F49359244D02F117
708F60E941ACE863442F0B6334BC0F3BEE02A6F221430D95B494A45781375F74
F86A8A9D9273344AFD3B91AF8C301FEDA5CB07E9A12E5DA85C84883032478F16
541F33FA6D05522D758C00A2A94E0B6889DE69EBF20BD923A5E9F16BD2110084
237F844DD43D86A40DF4E99B5B4BEB89FE7869BC0C6909373A494DE5BF40590F
768573FC804919E0E45B1A40E059BE4B0253FACA83E764AD23025DEC9738D14C
36A3B069352AC03E25358ED3BC4DC80FDEC09AF517B96D7F5703EC4BBD5EEC86
1E1DD477C48A86D8541C74E5286901CD6920923FE5D5B9C221B04D64A886A8D7
E3507F214A1ED02BD2EFDC44DBC7C26C5CF78AEC964FC87DF5AAE20F8795BA94
FE7D78286EFD9AAC09E0011CF9C055120579CDB4AD769ABB05C1165DF22915E0
5B4F2E89C89A09CC7FBBC000BEF91E71CEBF96D57B071EA5F5ED79F6A057A27A
EF1628CB446A04F6D86599EEC2FE09AF8F5E16044A547A32743157DFEDFADCD6
BFAFDA91624B1FE103D95ABAA502BC592C69EC43129D2B3B2B1C8CC487F7EF85
093A9BC1F8A014FD9D17BEE891B75FC90B50FF3088303457FDC09D387F7C0BD2
BF261DC55A4F377E53B360170590305569C9252A225C7C3E542B9F9833A1E35E
F14AA63B12734A70D8B6C273D9B94FA0EF759C005F8325C89AB1AEA19801C9A8
353FF241997679C770F0647A3C41FD3F4953AEEDEA7AA4C08E327ED027B82C21
C593C2475A16CA3E5DFC1EB22F5A218F560761643E8C7F3A7E19BE29A3434B08
32F4B025E2709855D2D899972E015B1158CB29A2FECCCE168032AB9D6C732E04
FC352595A234AFE1DEFC0B79B638DF933F268189252EF960A9FA8623ABA8C199
A29F919EDF2C7BAA0135930F90A9C8FAF9254DE334F73683CED56C3D2801EC5C
CE2119BBA14602BA544692B5ED12F71C8B4FE89A195C668447B93102EFBA39B0
3CBE21890DCCCD5330D36CB06A0CF79EEA2545EA843F7FCB8DF7DED55EF38358
4DCBCD814C6B5C424AFC2DC0504D46B9CF40F0C615D6B735CD1C98201FBB56C6
668E1376568CCAAC6D8002A94A20636BBA90912DCEBCE2997973064BC8002874
10B1CA1196BC061CDA069C1E3F320344B5A737127B660E70D22D1F9F7DE72328
8E6C559C5B553C01E035E5EE3A1E09CE2A00CE50261937EDE124798EB3E9CA87
C72B119BE5F1ACCD776CCC521F924C4E3C534C95E986B4B00DFF0412E8CF0E20
E7D2CEE1480E32DF82A234F394EB619D7DABE9ABDF14ABD7BD129A29A063E1F0
43F38C1E3B0EC11204E34066DBB87D9759AFB5A96155E68E8F6CECB3EA3A0CAE
03A7E6D0090BA6BFFD9F369D73E77F204DDE1AA36C3321476CBEF2955209BAE5
AF2334D5C5EEE5FD08FD47B4938293FE885DFB6CC5B08C8281A5688D20129A62
921B647BA04A6FA35AA33B5B047A6170E268F1D4B7A8E902E06C2CAF59831BE6
93C4C5E941FE5C14FD2F7E0A17F59CD6EBADC0C170FB5D41676F85A94D6212E9
9EDD49D7049EB66BFC686A71E433EFE4192FD100832DA1F6AAF3710F24184C49
EFAF52CC7FAAC1BDF7A7F4DAD1AAB9F58C5D6D3D3943042B939680912BE5CD72
A443F991590DA9AFCC96BB51E75A258A29105950674B9B68CC6BD6FECAD8593B
DFC0B4241699220D8C4A264C938D328918D9DBDAA6E419CB1AE183B440B26011
ECF6A30D1FBEA0F6A00C43DEF63AC813494679034432B5E3928F4AB5B05C531C
BCF6D9539E5902FA8C8C46EA13A4221638F93B29D9C814441AFA10B91FCFE734
25A804B43781C7FBDDC7A9A2BCF004145E290A670636BDAFD8A3AFF734F2E3B4
E63BC1F263E992BC09D1B6E2F91CA42D36D3C1FE616560EE0956E982500520D9
7D70B8F7EA0104499889F3986F09BC1D7C6F13FCD152FF9130332300B947422A
413D4C1114F3983F9BA5E77BB3C4AD1DA5DD739ABE910074746A1392965E2EBA
4725060E8E38C85840C75B07B709429CE7754D3BB9B25B8BE855ABFA3AD54E9A
73CE2629FDC60B016DF1566980C83477E84B2E65C6404DF005CD44082BBDC9B7
7C6762FF88E61627AD02AB4F96C0C04466E3BD897F509579650E646A0650DBCC
EA1AC6B306F5FEECC4C7AB5F523DB325960B45C7427920F4464ACF22EC57D40E
FD432045BCBDFC30803AA5DDA2E6DBBDB23CDED4F84166303D0665A1A7A3223F
60032FF71CD16FA3400631EB02AB330A6BC9DD687A18882E960E1B92E7F57BE1
759126C7547629910AE7AB11EE0DE828D2DABD942E86244B62614069343E1A05
5F3380DDFF1172CC4AE4C281626A87E949B2DA10843A8823FBF8EDD31A4C5520
345A9B30B8A48154D4107AC5008EB66FC92FB4B663D045AA571D1CB29505E073
F613E8C5CD09CE25FA811943C1783BFABF57EE206BF002948406A8E6FE929F48
0BB3C4BD2FF30B1727BF5E05D1A6D910BF90F00E104ECAA54DFDE78431697858
3836894DF4FCB46B159E899041256CB0CF6C3B858854D55FC996C81F756CDB1D
0D9ABF0C020AA89FAC645F2AA8E8E2ECC8A6A423B8FD3A94C45174899A81A260
1C1CE1C768276E64F5B7127CC21BA34994E0F1027CDF5266E688F5E9A4001514
9B7B387994DD94D90527BF0AA0F8A50C05ADAC9EFA167EED603BA3D5408BDDB6
8BEA3DACDBB3E036A348F252D22FBF1A6B3E728A64E1981F8B26983335A911C9
73CFACD535CFBB4C097DE0CF3BFD899B0409857F3B68C635DA3BF7333487DAAB
5D9E9FFBEA9F50B0A236FE935AC7ED5F8E715B713EC35AAA3E2A29D1EBD0FE43
EA25BA9908E26923ADB72392CA4AE53BC9128F0A180AC207BA51E63E09DB93FA
94298F50CF1FE7C2C7B68C529D474D7560EF2FA838F50ED3DE649F306B9201BE
E064F7B868364DAE6371A59D2D22AB840018E72CBE0361698843010C92022EC7
1072DFD75662C931A3DBE8DC1D6F81D389BFC649DD82FAF46E7908C75BD2388C
81D975D06AEEE776964322B0070D83DE82A2C7919C7E11661B65E3AE4723100E
1BAE58F64266869E1187E7CEE194DB60B9A04A3E447D2D1FDFF73C55B6097E73
553EDF103842514175FB115F7B1D26430CB4DACDAE1FC4CAA1662353BD72FFD6
211352D386C53BC408DDDA1B0D12657DB21DB73A42B8075BC24BB5341AE692D8
E5E5D7E3D281E9C6B317A204DB7CD4DE6C595C83994F02E576FA4B8050B57B29
8A61D99911E33447DA3B89FBCB763EDABCEF8282ACB06F61C50ADFEA0C291A09
26F58BDC5B52ED1B976706A69C89209BC7192E792125C12B00FFA1817250E78A
D012D86D63E9FF5211A3E3D4941763DBD096BED0614DDF3A3AB3757D2C85D115
F0A4B09682D16F0DDFA03059F8E4BC40BA7F0923DD7C44D729DE300672BE1969
71F5F6EF5B5ED1E69771FD1B9DC088B1514F7C668DBC35ADD9A0941DED11E1B8
7E21FB34E33B34F8B12B8F115B94FFCF3B21CC8C2277A9A461F7C0F8E240A572
DD143AB5D89A2F011691F9E3481F2BADE2835767B98EBBF6067C4E9C273BB567
48ACD963206BE3F0DD91FBF55788BCF77785AEC5B52401C1571FF4FC6FE4D0D5
BAAE8A4A40D413CA53F7F1DC2F346F6CD76FEB74788E6C283C6B11497E86EB20
AFF7BA2CBF800B76C906537B3F8B46F1B856EC60E640F2B337B41232EC4E762B
7F6031158769C65DA406E1D85748FD8B81BE580660FFF722FFA1877C0E94D19C
6B53BE1C1A79DB9E884339D885C73B2267A2359A2858410D72A2E5E925E366B1
2B8A360CC73FEE22BF4393807D36B8C8B2A9B42CAF3BC02970260D3E1FF5550E
C22D17904AAF269ED67B09A101AA5C96A07CAE3EA4D56B0545B922CE10DCFC74
F2D1BDB1058172A1105BEA0FFF15CE9205283CE90F6421D8360CAD1BB229AB3D
3362FEA9B80390E2A67D5E1BC445609C13AF1D7FD719D237283F5838E6CF63BB
8305B3DFA8CD1DBB2012E0EA444924C94C77342B0045924DA87451C477EA77CB
D29922E2A2715099552402683B495748219A06FF4F75362111D6E3ACB9643116
AF703100C8A5DD92860A47A61E952E62CCC5BAD17EBB2D49F5ECABF64BD29366
A97A5D464F639D0B81EBE5D54359D5BA277DF1FBC7452B5D2C7860DDE223A681
A53F56EEB4C6FB4DB99E5ED0001BB7FED3BB8E0FD68191E7F0A630C95E443EE3
F0C72E3A7FA11DAADB643FC92C69DD7B304824B2D3F888B6313F8E27403936F0
35A4995CB0AA60B3C684E1841E00521C9B6F79AFC1CB5137EA4ECFC51C61198B
D81D8DF1000AACB522DCA0F95ACC7E6850A6A48A8EC4CBC8673240197B86C026
3BBC92A8D53631CC1B4FF777BBFD9AF096F3083651FA8C9AF8DC05B5BF1A8B76
BB781549C5E2A1C2028332BEDCE5C7C4912A4A63F2F893401483B310480B09D5
D9F03F146676B92F1A6F8D7AAFD080C2641931E5A4A71219C385938D52F71E6E
6DD882A113F46168E44843EDD1539A7ED9ED5389B4C3B695E373EC39F53ABB97
B8CA58152BB714D672219F5411849D2D1EBE45F84B99C58A198E425D06959A70
11E842505F3BD5D3C7F2BBAAADCF9B5F4D81E7C8540709705C5FC5F1E1B8FF55
C9351FAABE5BF7AFDD21B5194335C06A0069BDBAF90A967A0340D1A507AE65C6
CA673CB62EB7D5C1075E41BBCEC1CFACFC0FDBA2267DBBD0294E88D60B19E0BB
A76381C6DA562BFBD1A05CD06352E7E3F3AD25F521884E5244E92B44C164C2E3
431F8A3D9D2E23182794C98C02CC71486BBF309B6067D2874CB43BB16E63BA99
5B244964CBD38BAEA0503C81107DE8CF646D3E3A9CC5623F8234DE92D480F485
DD4632AB7EFF42DA6F98E034800BB0FBA000A18F60C0C70D0B7D35DE32DCFE53
6B49A9E2D48836128FE1D842380AEF160A2D8CFD195024ACC0134CBEA33B8D30
312048BF7FF350E7168A7915CB45438F2DF64A939000AB06DA6B7ECB1A3D3F15
04380C4F96EF1CA728DE78890252E86E841A542C593D71F5EAEA787AB9B09D53
479B6CB9A35BC7CF6E8F222D235BBBB0F5B4D947934ED99161FBC7D89A16EE6B
54525983603B19F9CA9C9075FD454AAB82F7EA48B9C7883EE1F11BA2AD18DBBE
5FBE4AE9EED382F0967EEEB09D92382AFE8FAF4D9C742EB9ABC635EA42C8431E
FBA2498E051B9479659B3882A4CCD746CB5623DA2D187CFFAA340379E615008C
4862347A29AEE72BA19E4F575DAC5E9B967636829D41FD0F42160C71256FBC19
28858AEC3B704280499EC47C418B889C660AE3076FD3070D0B18C911E7ED4696
AA3E108E4D6AFEBFA649C2350C8593FB3FFB74112EF1FA850C2B5E43A3702FF5
593D8D88008E68A836D8F3FB9FE9BA0421DFB2A00BA43D0C5461FFD429A4987B
965276714D4765155052F86689CE611D9ACE89DDB05CDDE9C12009054535D4C1
0F46AA0F50E783B16DA3E09D1930976983933A8C128274B8F9DD893960E75845
5F0CAAC5F4980E46D811F10843BE805C313C1BCB37B635013A18370B15EE2C6C
A9D78DC4590C6F4A785CAE6BD34D7DF9E1018E60156DC6394D948E1CE85C35FD
8332B0EB85D74B135CD0CB2E528EC29E16BE13568F8020DB9007908B260C5768
F20DB79811237B30E420B0C3928DDCC6FF8094DE8F07BE998BBEDA5187765CA3
463989ED52D22089B03F6CE308F669DF113A5B1B9DAD986D60579276F86F670E
593769B5DCB7EEB1D9D0E6F861B6AF66C246446FA672BF81CF73CC7FE2C81DB4
6460FAC106DB7C62F31758CA3D9CC989428BE4D075B7346BE7929F9D57F844EB
F4C500BDD4A64AB443C5E18822AAAF8A6D25F8EDE13F22F2A2D64BD4EFE91D35
DF7678D8C87EBE42CD5173B3ABFD47626AFCE287C9DB3E6EAC64EF0B7A0514A5
5AB098BE973E34AFF8D0322AA7F265ED2F23D37C0E9E8644F399F88BFA3482EA
F868BA5E8624A631152FEDCF04C564B32BBDA7693999324E316E95E2E93D47C5
0709DD0C867E3F79E8FB2ADF65205306B45F5A427CCFC0A1BB3F1A8D92D95731
E6B466818E8CEB8AE1B630C8C5552CF89A56D9025C48585A3186BAABFFA14CA8
FA0A2A98C9BF2E02A06AFC7F16D94495BC1892BB5A992A3011D6358F76D2C415
0CC333F4C1AB8E437935407EEF700396B30DB15EF76F6AC358882BE8F5D9F356
BF12EF84929E866ADF2DA794C719D3CD875753BFBECDC68DFC3A00BE9FB31075
7DA88110DFB4868B7C96D7F851D98054378D78B9A9DE9BCC751FD39034858526
915FEDB76DE2D6F29E9D05A8B1AEFB186B8BEF0387BF5F0F768EC86069D50FAC
331FCE0CB68031C648CBABEC5C1C3E38598C62B97E5C7DA98CCE8E24013CC2A3
163A44812B8051F3CAD66C105E38C02390668DD321CB755AECDE8F611284D1C6
4CD6FD194E2C471F8876F3B72F5895A6B859926F798CCE2E9A593745272812E0
CBB8A887CF11F2D657C8DB910EF938ED54627AE4627605A048239BC9179A0FF5
954D2150577B6A43BBF814FAEF71BCEA7C13C26D059E363EBD9075CEA2C43D71
AEC7ABB617E3EE01E21349F03541BDBEDD6BFCEFB91B78A79A23E9BABDC58364
FCFA4189937F4647002BAE0876B943B117E37CC2037E735477BD3A2A7EDEC8B2
E936E3E23EFF1A92340E5E59BB68DD231A933817168828B955DEE08D41598640
66E1E941A608E3755173A99C36A3157C537481D22E75E48291ABB5574D933326
D9C9BF0F38A0492E7E868A04EA172834BB8D77DFD5A02BF407FF969C23531027
B2306EA97D20C26C5132D817FC795B813795C3C307268FC0DCBEE9F34015AB6B
13E1AE479F66F3BECEB347E253DD57BA73F703CB78D61B79DABADC888B65AA97
42EB537B1D948D8BB40B4CF93E95033984AC4A8BFAAEDA8B47466BC9F72B5914
5A3CA409B00AF440EF435DA6A4B503ED4AD829F64826CBD2C1C82E285F94090B
1F03D50D8C2328EA201F59DBA1A19A5128B436A9BEF7AC5429B6F4B92FCDAB68
4EA59A7386A857E4E586E35B49043C75D2E83C879AF08E1DB3E1C06BA9D4E6BC
E5FE0DAF702F2FB73FF5BBE888DADE2C7698CE853A0572173BE824CB74EF8B35
1272E786213B89FA915A3E00DA7F4B100C689D95D3E78A02EBC9D51903ED585E
275FC898BFA5576043FED308EC9F5ACA81B434173FFEA7CC4144B4808A739687
2257059CEC13D5B6AA0931F17636A8DDACEB02CFD5066B5A413D1DFB87466B78
43770F586566A36A224EC77E36C7228C2B28FAF168AC45A70D6724753C7D2F92
901E33FA374D183E04A62B73005BB0808FD3F3BADA52B3FE3C9C6F2C4F7554E3
EB84E4AE8525E46399F672ADEFF69B3BEB41D5F5DDCE6C866D32E6B8F2961C44
C550F59CFEA6412FF98E74038D7B45B0737D6369CCF4609576ED38C012FA52A6
BFB81C6FB148344349A4FFDBACBE13F94F40E334868C8648469686BD7955AEBC
9032361ECD48293DA725C10A8C4A879FC65BB387F513F5B649608FC16C8670D4
AC6FCB44838E52315A40CEA4D054364E65062FCF3F33562A33C0D9FE4D31B3A0
20BB047BC4A46111E6F3E2F75960D263B81C25D7501B731F6E441659F3B636DF
D2B18D1EC38005E94B1391AB60D382817AEC85C670D80CA0D2AA95CF5F0915BF
8D9B015C7CF0ECAC8F64BFA44B53E04F7184A8C37CDF01C5F743542017692C06
692A3E4F0A1D77B29FDE025AEE9FFAE55BFBEE1C1484A931F797F4C28365AB80
EB9FF3854166B7641A991730CB8CC9D764A93C4540D7538FB7A873B8C9ED660E
364936F763364DA92EB8C6432C31BFF0CED5007C37B19C033089DC180DCC14A6
9524D9DE10071DA6AB6DF716F99426214173BA83C2136497429C542FF8A5835B
79B52232C643BAA7D48BCB8783D93CA182B25A644FE28BFF3A08B1357C343256
FC667820E61ABFD14A32877C5ACD30569311F373EC0457254CA00D77ADC6F8E4
2FEE37CC0164B3DD055AD1F397090B2F6B59A7B8AD4503FFDF928E6659AA434E
4D0A6DC73F6A121EDEB98480739AD2B2B97BAB801C701F1E45D1A679F92F125E
3BEB0D23DD538A8A3E5EAC65FC69F85B331A839170B54A837B06A8560F268746
003DAB0BF069AE7B39D3C4C798C1E0B2ADC0C10F85C3971BD1FE386F15DF6EBA
39E82B54831890233509F4C8B70A8C5D57CEA522480A4711647F3AC1A5FF6D90
33F9484271B953CABF2C979AA9AD6EE817BC6AD466BEBF2DFEB97212F50F53A2
68EBD3E3D3D8D21F372A46CB91082C8C1E41772C4488461DC9B18A8857EFBFB1
A4F1563E2ADDEC7A407B9E1F6AA967BEDF3268714FC29E3FC9DF53FFD4BAB640
7ECD60B459AD39932FF6D3254526EB8CAE97BD823AA0330E2FC02732C5E06EFC
65D5752BA385333CEAE62A59881B541DE0FA2CE5E0A6F40460958A0024F326F8
F019F90D697B636E6FE3CCF3466D467D451A5EA9C51A167D6741298910D0EFF6
7F72E4FE89BE3E8EB239E2A833A148CB4137B77C8B455AF0977D1F914633CFB5
79DEBF928561DB4D26F6F528E76E5BA916560376C2E7162772C5B4ADB87E207A
3ACCE696FF3FFD79455D776A181F5FFC053D7AFCA6D3D37D6E528B38919CB1B5
1E56065ABFDDB658A581597985764AB93C4A8E52FF0580BE54FC603D3AB7CC8F
CFD8CC24FBC7BEB10E8326439A3E3286464A052543DAB1FB85D9F6D130D4FB14
CD98B68E6122674C235124D810C18BD87E645BCC4AEAADA855884EC295EB9523
68716B24DA458F1BB52641B2281242E336C97474DF1593011333ADB164A2CE35
711B0CA4D2FDB90E10C8AF05143AF1FE0172A35609D861634AD89EBFA924433A
0D9961F60B96B3F3222EA10B47A7973F350FB4A9092B8AA14AA6A82D7D7560D4
5B3DFC4FF4B8128C03DA0A834FF5E4CED1989B32698CCF04B678D5B70AD91F52
9F0193D79B9B3EACA8BA25F9AB86E08C5DFE58BCD7914B21A073A27C3901DA4B
91846847E8EDCBB705B7CA5811FD98EAC6B3C1DC9B1A0E5CE9F5F7FBB7220F03
5C14809B6A7C3D10F8B5FCF569CA2F96D443F636D1EE58FB5F039C0B4B2A5D7A
056AB82DEC879B79F7080AE6735D15628CF78462175388A9F7AA633F90A13FA8
535866C49BE08571244FF984E85A388B99CAE763E41AF380435752CFDE450533
639DA6D8FBEF707B0311023E3A1BB73AC20572CF1903DC1F99D47E6AC4FBDD24
E5BAE8E0CAA91FD5C95710AA521249D8AD42C0B9108FB9AEA081D3DB6647AD32
422D4B97F8A7FA4669148C5763573ADC6F9F452A2274C0855C6CFFD023FFFC80
185B38D6166AAFDC4F42B78D23500F845846CC819DF1DAB4C65F6DAED2A97DE6
CE1E193B8EF5931635347980B0F4CAA2D58B882B96DA02D49AED0CA83F71B58B
D38E2D622F023F409A2BB22B80D477E90E95DEC0066591C66C2F7195DA2CCA2B
2D79F9E87784616698DB70D56AF931309FBFF823EA9B8A7C2711047F8C04BFBC
4C00C741C6B4B337CA5D1544A35D688346275F998927319A8F23A449D50FD590
35F153CF1E4CA70D8F7F571155B0B4C07ACE01B115A1E87BB01828B4BA46304F
4DBCE05BA9BB7EC9DE52F51B9B5357E654A9725178C1E6BBE623639777384DF8
6AA13C44123D05F1769B525F3FA6137B672A1CD5715F33A006F8F578B499BC76
2B7133402E6F6DAC8C06E300C2A199D39C2CDA99820DDEFC3B9534BFBA176FBC
BDC21B2DCDD2F1DAA7B22FB9F3C81E71A31A4A98EAEB075F27292C4B773F9003
064850D028FA1AF68EE7BCFDF82FF0E0D555EA8CDB1500A0C3C8743B82889A57
705A757BA2577035FF34928F53AE1C4C912450C76BBEAB3E0201E3D1C72ED102
AB0C3C94B803043F0CC357BC8F69C48B2CDBA12E69F34D05AC441F7546A92322
7CA4E61C9E638F1E9B5E637F297F7952CEF854768BCDA1771DC3D6D6037EB5AB
6D4CE1ADC8231155BDA7911D489DE1B35C1A7D7C42D294AB6E397B33F9CC1861
F33F338E83FE973BB7D7557B2C7B963A6907E6E4102E99D4FF7FBCFCDC97C2F3
56BB7E8579F9F9259E4DEEF90CA8E188BF52495E9C81147184BD9B8D746C1832
4F045880A3A590A7E16AF49D3EB87A866D2053BB508D214086507166EFA01B3B
D24392B7E3054AC52D9C5B25DD3131B2CE211375B7B9B3EF4ABCC2DE0ED103F7
EB30F9644C28F3F788C7B4959436DB925484E3FA45347E8A840FE39FBBC93B2F
73EDF1389C732C35FBA82CADC4922AEA44589682E6508043C6E7DE7E89583CFB
AAF9AB2BD779AD278CA8D557E679646A5000F9555E75EC2C82284986C47F520A
D29C8FCBF9F8A867AA32A09E350FAF2F8ACD88DE8F2335EF156915E99C6579EF
2D509FFDACC796CDCD3F8D5CC8E2FF01EFEB845789BE0FA732DB8A631A3912CA
2B232B0AC83BFAF0465462E79E39E3DDEE919F9F3C04865259205D4A1243850A
E061773874F096094789598A66BA6EFC9D1AAF7BD67113F0D7A718B05CE46FAE
8F5F59A007432D0E5F16CB9D5B553B6AFDEEAB251587DCAB08CBF5CBBEF0B941
E629A0D5B21C9DFC82F80DA00A0C7E1A55CFF16DCC8B88C783CDED92360E9DBC
611ACDDE3188D04520E33241C6EE5AFD1B2E1A5B4084745DB911928BEF77264D
097BEDF187741EFE107DE5F6CA6C63D72057927AC0F377E3F63B4CA107A2967E
6607678BA92A55C134D08DC89C093D24F9F50FCB52B2D6D2B82CB79E19B54C00
F32634F45B1FAA9C2C13CCEE1E38F69A61FFFFC9232F5BF6C865A882CCF56968
23A40DA53DE8856EDC61E235A20CCCA4E88EB00BFD6E57FAA7524B1D2D34A381
8B9EF5C5033D4FB7EE250364812FF7C10D58787200F53A331F9B154196A4603C
185566110B0BBB40022B71BC0B9F5B0D46EE9CF098259ECCE69653A55874141A
5A65E21D49EA8DF021C8AC164DDB1E08B78F963DBF8B32ED21ED0E64C57A4E10
07B7F17237935D7EC63B5A9318434A847BFC9034B73F9862041B294EB2F3FC4E
FB8E81F75D29536CF9D8E635135D3BA80CC6F06936C89A3E4EFE5B16E4A87DF0
62C9592ED52644C2897F6AD68A68A0EBD207C4D8566DA34AA3A55701EC10BF05
3AD26C6EA5C41F94707DC72EA36F56CE454DFF936425D7A30CC2D584DFD906FC
7C9E26AF23496D88825872DABBCA4994A2EFCEECAA1831E559D3342D945FD2CE
0CD5B41A1E424444377067B746669F11F4DB0A76853F63967767D9EDFFAC0C13
603659AB24DFF6BC7BED9709B0E5D5442E7196EE6B316D1634945932E66AF080
7E42A1825275F44610A904E54DB9F6E1935F06ADBA52803C83B149257D169CB2
735768CF89FA994477C3AED3BE58AFD4ACCE64C09D95864E0A3CDAC4F914F1C8
73AF3896BF6B719DBA505DA8A727C2B45742DD8322CF69290D762A43ADDC7F38
B09344AC52E4D81EC9E9F65680921A63AB43B45BF278C0F3B089909E76ECD26C
11D372BD2DDDB30C98ADEDFA183DE0960A843737C662D9472509E5721BCAED8B
8A9D529BDB49C4C4968195171543406B19967ECCB641AA49ACDA534F8F04926F
C4C11F83E9645686A8E0B0DA4E6332172E7312684C24D5B31865DC109FDCDA1C
D3DBF9B9CD357E5880B613FB9E94366362363133A7EDBD23AA737C206A3DD725
DC2A6F76F366D3A3BDF929E9ADCCD0AECE2FBD8B514AB484E1567251E1F42510
853226DE76E1341EC197BDB6CE9DA93A09C593720E9515D42277B50509E192F9
C3D81F06AF7177B43FE9405D47A0A5E2C700A2BBB87CC8DE7635445D4923B656
C9B5BD50628B741324B0DCF9877FD06D5A794F8236A66C7C7C59BD0E04B6522E
13D8F80B66B1E4F5077F3F39836F4CED9897E973CE617AB303824EB6CEC15DA4
163F0196CA17CA4E055D5F37ED128DDB517EA8109FFE6A8C797EBDF75DA4D001
BD5AD69C9B9AA2E3E9193126CAD9414CFED234A21FC848750E17F70921EB2DAE
706D422AB0518768FF1DAA3888BCC025D3F0C01275353D3587AC2386DC155CDC
0C6C03B055D50486BE5417D536DD537910392A48B18293AC8C1998861B373187
624D0786B175915FC9AC2D0BBEC1E4AC9003C4F1E3F72171FBFF2A3EA5F93553
C5F9EE03D4364639A106D005D3CF12124F8489C0D614913DEC864E724269CE5D
1569C7934BD7A86C2684433D2CEC3701783BBE6A120E207699706732FB4E6244
37CEEBF6B17B5C4E0A36BF42D2BDA0D4C82BF4B0A3F821A16F84520D303C360D
5F6FAF1BFE3330CFA6779F5A3D32C06AC617DD3B4038D17523C1A1069013D70D
0E2F7770BA55525A0CFABD3997E401ABA5339C6D2B7C26EE8B43CC9237ECC2E3
52F1D2050A10A2C61427A15E0D2228F43E165CC687F2F79821DBB88350760957
558B8B3EFD2A8E9DD9EFFBC5E01EB119B6E1D97E81331D3D9819046597FBEB84
A27F3626A749595724266F47845175869AF0E499A1BCD7A3E4A919215ED70BCF
944E4DEC6D7242D14F2941AE418C000277FB15C2552BBE909C1CF52F3053F33C
81D25FAEB20404C8CE7F55606A9717E263CC34E5C7E65387DF4BA4897DA002C7
A44D65D226C9D2E1C4CE46768BCA7A00318DE5733ACB5499FECF5922B2349979
45B4B33D1CEFD080EFF7BDDCCD3C3D41F30103E4D5475CA28660A9A8D8D8BF23
3F7055D420885BD1A1EB2E50FA20FE3A4E61C482720D0AAE20A672BA6AD56AA7
23F8E40D457E6F97ED7BB07F0F25A07F828EA4B2AE44F34D218D2188934C42E1
7D6B842856261F17ABE1AF4519FF135B7EE02296B2BB9C7CCBD7AF798134E254
AF34C2DBAD63CFC4CBE495330D67E39D0AC62BAD255E4AAB8372CC728B44B6D4
245D91CEDF6B02F28DECD8591AE7ED9246093544B6C316D27B342262BC9CA42E
4609F6A71A9688685075C2C883A843E2FF5C7552279A833FF7C587CBC1254417
71DD6D9A7FB7511D696B0D8CC4290AAB7E0A35C6C37DA85F34C8F37C2A04F8CC
05BAB2F4CBFE1C3884AF6C2262A1478CF67E123F88349EB05110CCAC41F99673
59C3C9D7B08344F7715AF0D12390B484B65C5A99F7E69AC04F3D66E6E0627B81
EE730E25FDF19EFA7479B213A852F202364E77ECC4F84273E20B4ADF83DA658E
BC8CE8548926EA0D5AC4DCF37BEEEFA65CAE83F979131BBC77C4C666A8F2A9D3
4CCCD26BADC6AA6CF679C97C6C528DEDC52666B92460FC9AF5D17B8C0831708B
ED93B4FFDACC58B51C3EF313942C3E1F5BEB9B9A78D126E3CB3D18648E32AF3C
73DF09360BE03EBDF1166900FB7BDAC6CCC989A5F77D51C84A08F54C4D60466C
DB287E4384D8178B92456144B84740470DA124A9E2C1B1494DEB313FE6F4575C
33BA993B5F322D8A4D1082ACC4A16B5A16014E556A316A4470EDE0F98F8A113A
4B88E96C993D52CD3895F9341B388D99E8D7C7775292B2EE2D502C5E08875480
72CC8A8EB6235E87EF0B5FD2458323E9B61CA835B26CE19B03D338102AA2109F
E285023E79B7D14C8D53E7142DFD095A7101DAAAE44FC76B281CBF1DA230BD5D
1860EC05AB00C94E6D061E56FFDD5FB01FD301222D992F2F962EF7176415AACD
BFABA7828A531518FCADE0FDF9822E87C1D1F3CE60D457144FA934C9467326DA
2E457910AC60423C2699C7FBA7C2FA0D18F9794DC880AEE92F466A40EBFD4DF4
04139F80E84D4C62E0D94C48D62A75255211A31CA31BD74651FB0DECC290DE13
C25361CA5B250F857AF1C6B471AE195B719994FFF9EA2B54005A9C0FAD65DECD
EAA5FB35C9D787E46BEC20373F57C8DAACF3912B78DDF03EC6A3F69C2E20C6AD
0619FC32E24DA948F002F1AA07597A378AC2F5AC9EBA895F0796ED3A9C17C90A
B5A2E187A1F12316F4A17BE225D27A44DADB66CC2D7FE6D31339D1BF7A885C2B
75F62B5538E88D3B38AA4F63C4DD3ED358686CB5606C888DB19F1F182B13F54F
FFC47B52CC7CC84F6C4B781DFC16EC5F7BC4F9C50E581171DFDA18CE9FC22C89
77044293DD977CDF562197C5BAD7B2195DFE5E8169948ECD8FC7C5235137D1A8
0632BC6330311C34E1CBDE18CD9466A7997C318DF23C520ECAF5512B2FC831DB
3D877DD23F84F6A3AD16CEF48F18109DFA2DD574DA9E9C4E1654E40F291CC1B1
90369BA5B44DED54776DC534EE5187D2451EA538F75B6F3B2A539FDD603FF53A
91AFE09171A83D904082A82F3D16F718DB987B373EF024C8E43F8E842726C6DF
919961AB837944F2EDA13CFAD22E3BD49986D6A15FAB334F2FFF55A02289BA4D
158CABE9412BE35C006F0693930E6AA605203436002B05EBFD30AB3567F3B0FB
AFA3AABAC7D4880AA0CDF9BD2A6BB58CE39706B5C68FFE932CF8697A717EE21B
83B54CF3B647FA59A3F67A717E94B9D9775DC4BDC31F12CFF1FFAFB0E27D6756
3C66B719DEDDC8BE60196D79EBE90B9F584AE4CD2DF077B8A57DA4C8631326CC
5010DE8C96EE0CEB63D55AC3405E38D8485C6B0E1274B8C7567DDB9C47CA4040
09686ABE6C46307E714B2B99B79EEC6FDA04BE279FDAE35FC4661EFD1D6D6B1B
37DCB3B4AA1D85C1DDE1280789FFA208B2A9E843DBF864D8816C8AEDAC8CF609
FC3F4CF565C848A58867A4FE6B092C648FD386FE620383C338E2490A63EA093F
F23C65DDB986C72C218DF83AD365D0C2A98317889887BC6E48F5489D1F897145
452DA30E2C07DEC3700F389265F376CFBA87CC52DA5124EBB779A801F4FE4EA5
FE1AB0B8462CA8FA870EB447E58C396998895296DF2B577C7D72154C8C305D52
819600E978F5E0385835FB1344200C225330B5EC3DD9E881C5DB17319B05965D
75325CC982556900F4EDBC3E126345AEBF3B313EFCA30A62E905875688AC8D51
1FD968C29CC5F7A6CAD0DA1ACB9D6972C9A76E1887C661A745C2B81A64E834B3
A6F8ADA5ABF426401A3D0B6DC67BB03C21E92AE396BA00170E8961F3B224BD10
FED8BEA792571446C6E46D2E1C9DA4B123F2BD683DC9E537F7B1923BF19C90FE
B3294F865FE2898011D928964793134CA5DDA56E5F1D2BB1D8B72C1FBDE4D86A
8454F8D7BAA6008592DFF145C6A6ED82CF04BF15E05A94EF12590924DF9F9E49
738DBD6D01BC1325A2FF624D25826AA1D7FA7FE6F3178F28A16DA65E33416C55
E5AD55533D8509DA6FD28E9FE1BF88D883CE216201FFF20B90192627B4B45473
D35AE3801C5145A6D4833871A450299D3ED5B8CF6395366C2541D7806E77CAE9
678C72C2FC63803416C833660282FFF86C36631D98FDF0DF74D4CA1B33DA9F58
71588FD3F5488A2201DEF9FC7A0C5C436BC54C0C8231BBB06720293AD61E2CF3
11107282DB1D1AE085F7CB559127681F9A610B043F620BBADD3F8411162A9970
81083FD3CAA00C07422D6703B92A6835630E0DCEE3FBAED658058C77038A42E9
BE14A8AD88B6AF06F60A799572CCBF814B00BF5A13AC48BDE10C3A6C7B7F0AB5
7A50930F17B82205C7B48F0F9C12300CCAA2C28EF8548662CE503D22ED4D7F73
3A657E31A34B3EE3209BC88E780647BAF290587C84353FD8690AACD305ED289D
828150130CE29D7E5A7BE3836CCD4E0DEC4AB593D99FF959B26B197031D4991A
E8B4251B56BB504FBE542AD5F2BCDC0E1F1D71F1A05BEB11CDC976757847D5C7
6192D3B301B2A4D31BCB52376186DFF1744EDBDC18ACCBE1E03E1290EAC8E83A
176170F884E9CC70016DA6B27A0B18247382D22354DCFF5493DEB03E4C71C3F0
1B34A58358698FEF52A0B7FF8AFD6C2690CDAAD23C99CBEAF1FECDFFC32A19AC
197E39C3372EA48C34E79FA945AF5F24246EC831FF7C20D629BC082B868D46E8
89609C4571950149FD49552F985D1690A4504A608A185217830B261712785794
DCC0135599A228B13C7DCB7BAA2C8A77886005141FF44FD24FCECD6ADCD157B9
D0AE9DD8950E62AC2AE1F42C8909062F0900D29679296B585D0F03672233B7E7
D5F6BC60F6D80470B0BBB14A3FD3D0672C904265CADF6CD65E85C07248F9D2A7
4D31B2E8627A461D31BDFAFBF6997827E0847D78CFB2A830A794C7AD2E80FC70
C1435EB243812D94DADD1196661804F3750044CB081934E43FD4CE778E700447
DC011588F6268E706ED36871482254915BAD348BB1851D244BF138002EC588F4
3C2E233C3A9714ECB64BD1DBB6B773E299AB2C24B5A150B27101AB11350C2BFC
F15E6C60064EF8E1AF913D1F0AEF448216F96443DD63DEE64A8A5BA8A913612E
48C93B00C06EBF90BE64C6C33DEBA8AE144587613E0CB1E975BB39C6166DF7D3
CC878A5418964F7C53F4160774C4670A15B30EE67786E43CC280CD73B8B1EB03
63FBD38DB44111E7E35316ABAA21E28C94E32CF9EA15F54042B257F0519BA2B2
3DD71E571890B033F75C97B798880253D57BE802BB3E3978A56BB50EC3B88495
4B41350E7C84915CED7C54790E208AC2C44DAC6BE1C8BD41A56ADCF1991A6630
94D6C14B15CA8A39D1D76769F5910914DE72354DC6FFF300DA451DD2D263EFCA
B474F126DA189D761958BF433E77A621F1D7FCE081994988C889D127C0B773CD
6707855B05B53A973ED5CC7F66B592E29F5E7114E87EA2744C60DD12144DA7D3
17BBC2C7FFD7DDA2889FC51B526ED67481A698ED02A3A77A81BA01F5667DF420
A37E1CFCDD85C294DD2E1301D37E0147A0C6BB364D56DE53C44F524EF72C1724
24AD2B347F9F8851FE1CAA9C9280E05579E2706D15A459D1B608D5C9A7783D9A
7D9CB4135624BCF322B9A2D3869CC97D3DCA5D95119C37CC3AD967CAAD3716CB
1C1D2979CCB363FFC0A1FF016F60F880D762F03FED201105661EC329B0AF1E63
5B441B9BF9E551441B4BC1D153013CF3FEFA569555B5D691578C22E7FBEEC237
CB096F10601352E1E340D97FDFA664352157A01E64833F67B944D639110FF631
B4FF106423ED261DB0561126CED7E6A618AE8A1411DC8ED7F973B6874A62D5A0
E3B415E02D1642CF46BD1850A1C346FB75F2D1055536E05EF162EEF53D0270CF
226A7A74DFD2E2C796523BAC443947D3BEEBA9499D04FD2080E01FC90FAA6F26
28995DE77583391922BB696F67BA5CA62E585BADA843572DB3DA8F1501654440
1261363A2538FE2926CB76A95064EF085666A3BE4E7FF9D74304236E3A58987B
50AD092CFCDD1D252367E4687425B98602E1D90559048D7E331D599AB4AEEEF5
ACB8C262FD8D7F3DA9911FA8D0107947261B2B49F8C59D08B78074CED5C98130
0121866EA0454F2848F94C5584D59651F40E3C517625908128777D36D8715CCA
2B398467D9CE400DE7C429B3A83C4F85B0A2AD656990C33F614564CE1E83745C
A880C8D2718F5AE1A7CAFDD7A4F42881F0C7636890C5592AA1FF43171D02B831
1DB28CC40DE386F8D10CE4ABD809087F08F724DA587ECE5E24D55D8DA119E834
D062762E3DBEEC03407A9692929879CFA234214463A67243F21F8BCF54CBB931
389AEC810EAC9B07CAC796BE88D23F7F221B6A9E6183FBBF60CB7F8F165095E3
5653DF200EA2988377170C2C9F9D20F07DBBC7EDCF6C9D4CC3862F154449D73E
65D209D5D5FABB9BEFD97C4B2555816A9AD6CCCD4F1E75CB9B2EB72B79DC2355
4E88443A2308332092486AF7B088E2A2D51F76A18C47C394F7FB156C2D7005C9
DA9745766316C442D2466011B66BF0D3C72A2530C090800CF2B484B9EAF428F0
E461BA135169A50B071AB49FA68F1B8D3BC7D85C2CAC2017C36D28632CA68712
49411E4DC8421AC39E23A69FA38A2B3570EFD544401EE330D205911A67B3C693
4D5F3C42A4A6EEF0EBFD415BC05D381C7536761BAC3C011DFCB3D1D9B6B940A6
799D752C3DE8B6FE0B8EFF4BCCBE52D6E2BC10244A63314017F989FB35885E54
B3E9C32EA792EEEE31ECC0616D8236A71C761B11FDF22EC502F5D3941A294EAE
776F711055CC896136DB2B2ED4325E6D78B60B8AF20F1D67B2CF358A2A13E7FF
A5D980B9C3AD7559A2FACB228F6E93DFA61F9981F27D1387BF7E0944B8539845
E3EF807320435A25DCF23355F43575CF2794C559B1CFFA710B3E290E4EB1B97A
517B942C58F1E5B5EFB79E7DF93CCD20E401C26FB1516F9E9E052BB7E8C2E4A9
94A2E05D87A268723163F1B27E4534276F2BD9CD9CF2C4CC368731E61A4CEF28
D633A0A9DF631CF8C17ED63BDD1CAEEE1FC76FBC324AFF98B3B17B327752341E
570EA51D56045548B7396450C41BCE2C1BC2AA5A05495672709D1B4A6B95C9BE
C36F48BF3BF371DD8574BA53CEA23FC5914DBE6BE7DE45B8E6BC70455B906A73
6EFDBCD360B9A0E6CC346A7C7A92F8C921F906D723916CF02BB101FF9A55BE7F
5E2029C2261C30B0B57144E5B6A557B8BAF2296CACFF5A369242BD548626DB3C
87374050DA096FA01598468FC284CFABF7DC030E2D7760D29E2D44CC186BCE91
C4E0A22DB5C93469A8D8774EBBE298DDC0F701341905875AB2B6FD73FCC123EA
EBF217159805718B3FF38212A7B782C4C47F9D8E7B4EFF43A7BB1CFC68892169
B5439C3DF2AAD618271CBD047149254D9146DDD02A2C2E179FE010C62358393D
544A232A8A03AF3AECB1AFF39B22579CCEAC1D747DB18CB5F164BE8E321F5CE2
EE8C2BE0C75549416547A7DD39FF23D54279230B13695A90742D450213615A56
76E728F660338A73E991D81B82BF0E34F1C27DD92CF8D8361CFCB0D524028E80
53D9DB8B156234DAB8B911596943888E7641635B264A336A916DAF1412986B19
ABB3790C063E66C8541BCCE13CFB9E9834A8EF33897D07107F4BBC321F8E8E64
327FEE2A567A61F82644D85AF70B136F545458FF0D1DF4119EFC7AB9B9DC5385
A183750267B6EDFC616992B6AE6B7115F3A7B63C259FA5AB9EDFF367370D29FA
C2B443BE54E02B5E09660F3A409E715443B8FC12303D70E64046CA950885FBBA
D7EFA55240FC6383D108ECC192D15B2848B47843767B30D4404E73254FFF922F
B733BD8B2EEA2F60EBB88F795BB8E17E3594BC66EA0E5BA023F1508CF47E786F
09C3BEA71EBD7AD7C8FD69399E80F4D69C7540F33F65F8162F60021A206EA541
21023F1EA5A3408A9D0242B24E0EC4725C6EA3A31C545C1A2C2D2F22044315A4
EBA33B0BE1CA9DB099A811B21A95FFD00CE596FDFDCE4A80035FFDBF0186A894
DAF5B944B316170FA1C6C3E290B50E71E89CA52011BF0393B11A92EB879BD71B
17190ACC0F0E4AB1CB8E65D591C6FB6F156D1E4767B39219B01A0E740C5CFF3B
4563BE7425CA27EED1B9E2AD1ED4CE973A445E9597BAC37A1202993967EB8978
59413EADD572D51C67017AB30E3AC2CE0032A49C99D22AA5094F0B88CC989FD7
5426020AA208EA4C17D97B48874CB693880540A016973232DB3E53BF77FA555D
42054ED04E6A28064AB1976F632E22096AE456B26A5DD3E6CAA8F8245DE899B3
6FDDC72419FE4B94F73EF372B90D87CF2D90E4BEAC1347E17534F5DCEB6D2277
3DCDB8EFA19DBE592B4527805221A277A45AE6C0020955F5257081EB227E4941
F7BD4FDE7D4F65E1394A4732076A1F352EFAB0A18E6C6BAD821947B0B660B1C8
E186CEEE89DC889340F8140DCAF7B308B5B051479E245F53CCBB16EEAD500271
5525065E14F5DBB4319368071A786789C868F2C40DA7D89FFB2C890943408C18
708976FF4602CA89F0C012FB096F920CAECC1E32755DE22F4D568D41C815B5FF
F076C442AE3748CDD64BAB8803AC0EF55BD88186C4DE08C5B319FD559D2E1A6D
39BE456A4EC6A82A9EF9853F9BF7DD2D70C9489313871CADB20B26AAB88BE092
C438F2D7B450ADD700870BE3AB7B76104979A7BA239A7C081A376994E330FA0F
39936471549C61B19012213548B1CACE6699239D0191711B1178C7495A3B5FB2
F60133AFECFB8C02035F11E602FB9C6A4AF5665820D15076336BEC21C6B951F7
4A4AC0AF403A5CC37A141854C2764AF2F46A5F656AF7213F7355C6087F5E7EA3
42051B5D0ED298C97189C61A85765AC9494987A9CC22D2F52A601243E9E74A22
BBA292E00E841B3E412C7D3B7C8F80603B4890A799CDCCDF8CAEC18A6105F86C
50D7E1E6073EE1AE8B3836CDD3D764FC8D2B8EF4AEB87935881D8D1D93C47F01
149AA75F87E5FC7DB15641025C8839802DC35C82834E7CE7AF8E2C74866F1380
04CCCF63085BBA3CAF52B979D384677C77D7B032CE62D9DBA7CE40D7D9524604
7DA1876228ED709E4403FD0E19F9837C2D6121C27A79DEBA340F444CCE372B17
0EA4248856EE644F3530D2DFA7696E0DC9B8707EFC930A968E1EB1CEF72500A2
98FD43D3CF6175DC9618D14FB0AEE9CC8B13B4CD6EA6AB8B02294818D4CBF150
61FF6DEAFF0466CDAA12DAD150C84AACA7641D25F5071C5E0E6BE075A03D11CE
7CB5266B4CE8244B1F7D7FAED34C0EE9AF564379FA8B70F83210EBC08308A798
C551798EA36BBBFCDABD706B5FC4DD36AEB3890E24584B469961ECBBBDBB294C
36F48B8E6F9AE707267921B83E5457A7E6D8DC19171194C90A189A310043630B
49A0B09FE63588AEC84F07F41B71B58955C07990A73385E274CA847D5BC3AFFC
E8AABAE28C9715FD427F08AA21C9D899144BEBB2AB2AFEB723884D0E98A76DC7
A78299DD78F983C721687440696BA596164C2C528CE463B9DFB4EBA3821B7538
19556046B9ACB4E9720CF897CD851CB8FF5F766AAB28440C78810883F77633BE
FDEF36AD455A21D5F507CCEB6C7FC6740661F1770E5D1B43D77D8AD4C1EB126D
7C460CB15AAC3BA0C39AEC6A3A90970BAD2A2673984D69D0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 163 /multiply put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707DD8E695DFCB39
B34B86F032A4A6B240502DB75B72BE9D700A58634D640FF97B71DAFB8AB659B1
338FEC8E10EF40D16AA1097E862F3B82461B9DB20AA43C33DEB7513BA34D41DF
2A3B058E6379ABC7183DD8BAC1B00408934B45791A9004F3045C4614563A89AA
1CBF2EA03360BE2280462BFB72E1097A0D02D4F62C2D973C118AE83D2923773D
BACFC9BDB8E0E69C5DE89090F0AE2B0B9D954F1B4446A43466143C9D279E0A55
61F967CA3474A9B7A277609FF6B0E9CB97CF1751C2030D2BB9C6E3B552FFE4DC
67C7186B5714DF5E96F33F79A68FAE3B9FD0C2390C47C55D302DB20117B73C12
97DAFAC6CF9A784D7C6A3BE919AE3336EC0E9B4B456D4BFD2932F65562DE60BF
CFDDA90A8A31CD66BE1172E8EA3839223803CAD2C35D30776B13D3A8832662A6
EB8D2DED4537DB61737DD813C293785BBBB15D960552B24024FA0CDBD8990C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
56D96BF032EBBF033E0EF740120C2233CC2743D049E701028BDF2D7A31991AD4
BAA84CE9FCDC5659BCB61EAE391914480BDA0F3774AAC46BC8489898F1AD73DE
D2F5538FB02F37E1BDAE49DB3929EA09C134C4512B3A1FE9844D760F1969CEA6
6E3224E9195F2B06705E64A21AD39595E6A6DEECDB228F0A48A4BA914858F47D
8DCA977B036E69FD1F8FE089974B22606DF4F87EF488D6C101B6C8EFA1B81A32
662937874153DAA00E6FD94CE8C3CB5A5F4BE904E1E588A434ED30FB66CB45E6
F9E51C0C6019B9E3E55B3ABF6DE68BB93B63EEBA9A3D2C8F8EC2CD2E63CF7D0E
39E700751C842FBF300786C92E5AC73F32D0ED08FAF48AED17DBEBA4DD111D85
204088CB97755F3124E283462DDB1F14815707AFCA1CD02925F5FAB569ADFA91
0C9F03958FC621521756C6D7B86A1EF25709A8696D992A9E4A686E21504A253F
442DE07FD007C2E6FB4A94952F11B77D01DC1095F93FBB61CA17259AF5BD54C2
DC4C5B7ABE204302AD80B6BB5C196B3AD243621C6910F32F1C3D324A5983198F
1895326FAF275670CC65C70B8A6E2BD241B993D1A05CD06352E7E06F7AA4811D
81029AA4C97ABD7C12E493A4765119D3BEC708FC26DFFB70E37A26C6F1B016BB
A5D31D476E2110D3F3DA32FF2B70B21AC6601146907D854D6A30FDD7FCF1E12B
16DA8FA677FC50638BB19E4D7157406A66627E42F2B701DFB6C4E8A0BD65C5D2
D5F4EFF5D60690A278917A0BDAAFB148FCE2FA793F7BED084B76C249E31F1DB4
3FF0AC533EB8FC958748DF8D7366DBE6B6F7FAB3A216EE5DFB6E5EC55BB7CEBF
9A8EE79FBD4DD4180205F6835AA84A2DADCDE072C0C1A49E900D4416073A9F1E
34262CAA83534FE761D83199040AB64ED9FEAEDAA325B6EABABC44991BCE9BCA
F917F48569083D3ACB37910B37FF941D2BD6B8AC2EAA198662A7BABEA8C3C2DD
56CFCE93C8E10031A8D199E57B11FCE65F1E5C1CF11F62E7C08FEDAD541EB171
2853B717ECB748889FD9D7D974F591CF933BD8B56600839DB5076676B9BEC937
96EAA17B394188BAC687845150CCDF19619E496C8670607DAED28109BFB69534
D6E2FC972E3DF1E89397260C39A7CF8F5B0DEF99EB9330FD1D0370F2B2400549
BAA570F9691A2E501EAEE5561B09648576633F16FA099A45612CC46E07875E4F
F0E31DF209CDDCBFD6063379D9963FC18B01442CE80866F25E94E3DFCCDD4A5F
AC0B6AF8B46A5B8C156B6555F6E1BEFA574643EADC08BA36A2EF07BB0AB2CE6C
615241BCB90CB54A97F10A7E363AFC6BE53D4AE29BA57EA54276F94A5D1496B9
06E3EE7418BC637BF988F1E2EBC7191FBEFD510BEFD0B54922587125E8C51B54
B5C793B717743C7AF418C7939D6A6B4631CCEFEC324FD2DFA58C52BA94D85624
8B51C5D752678FC5D929DEC542547DFFAFA5F48F44FD6752FBB0048647DD26E1
0F2E7E9DF8620E9DA7D2E4EDB75C29F60512FC38ABC1F2A618F4BD92F3E95CBE
949EF4B833D951CE840F1F0F037DDF207939C4448BA75DD37A909F53FAC002F6
8E91AA6F46ED462CA6CE176300D5B2331402015614C10AB1FEDA92721CAE69AE
F32464B010723571D8AAE294BEB691721C1ADCE39B9A7EA6E91A9D7FA96F8F97
E93304BA3758C1B06394DC635B06A2153CA4D57613D38B1C3E822D505080B455
5FE347C9CA87F12CD54F258F2DAC9F55768AE95D4CD1FF3956619532930B6342
F1B4A300048C778F0F49D5F8DE91A2A94C8FB20F075DB2119E8D485D9C4AE759
5EB2019448036DC6131B6F3F968A85D2F47E48E125797BB4BF684D68A31683DA
291DCED20F02C44D6A7E61502758C8C2CDF3D182C0E35AC441068D6CF4D62EEE
7E79CCDC64A183E2F00C4D766B9F3174B16A0834B6BC81B8345A410571ECA819
C545D9890F48F2D041BD07CBD3148AF69215DAF462071428116CB3E3E06966BB
D81C7636A79E102F42CBBD069BC218F22D6449E14D4093C51EBC67E17B148F05
FF52FB15EA4554B6B7E982BCC5350CF110EE0ECC75DF427BD7225030337A86FF
A7A4E0AB0DEA3A8BE3B6858465A82A629B8CAF956D3F8DFC218085FA97FE682F
502BB42C91CF6C6CAD374FBDBF3D8D348873F36A0A127412BED781F89AAEE657
5A26F7631C8EFAF2968CA1B20C3D6DEF53574FC7398EDDB75FBE3D92E46DDB1C
8C0DE7F8FBFBD36B2031894C3C4DBB599E89D8D3B3120920D7F869F3ACCF715E
634689295358EF4C7250AEED2824980D090E5F37B5BBAD95906ACDEF1A0FB984
95B2E4CD759B2F6F443D3926DCB5AF6608801F34E16CC0C8448562ED00E19040
028000C6B41E414BCD1125874061D3B4B6B0F86EAD51C00E0300CED68405A82F
27DC0F0D90E752802DC0177BA646A3635D2AE339371EA3EA711CE0B8B8BECA1B
EA5C673FA222FFE372984ECEA0E376AE07C5573991685E7147AFD43403CE8211
CA278C4807BFCEDF36B405BA27F77FD3656B43E2DDB4BB4E0251322554043464
5AD290F446B1ACCC064A761EC9CD13B520251C02B0170BF02E65184BBFB937DC
63F3C61A19AF5438A780AA50A66762967822CBF96624995D0873FD7339AF57CF
BEE80B1EB0FAC9D0D7CDB0BFBE5049C3FBEA1B9E4947FF31DBB8CADC9BA668F4
DD59933C8B4E514D82F03A70F4AC632AA21A60A21E04F139C499CC23139F42FF
4C40D82AE0218C323E445C229B5484A92692ECB856495283507E3709AD8904FE
0CDB65F51967EF7E3BD11C39A9A515D3F7DFEC0195E99B6E75B942FBA2C6DB9B
78E1AE8AA25526F787B53096CA41673A87B476B9437C16D275CA4EC27770554D
807F7DE678CDC6C0FACAF5F96C90CE22EF906079EF0E95DCC8CB8B3C0A6A394A
8972BAB4BC1449438138B428A2F6B651E62AA9C46F88749F3CAFA40A58D48B8B
6401418D4039C080CC3E4219879931BE906FABAB6A8B8BA4BD585F4A680B3796
9F6754D662C94468128D63476044C39277E5E2364F639260772093C6BA151713
80609DAD9B5183516DABB825032712233F9E87533682B355F152F1FC39797D92
E11201B4F5124711CAE2BFC410CDBCE853811F82F08DFAE1A5127BD552B9E4CF
1A3CC3B87570AC3F7C555829C9F8B5F9F13F05923000FC96F2ECDBD15B0899D7
568F2FDFB8DF16CC64D8EE2D9980E30A8E697822FFF91E6C8A5814C436BAE9E8
B1C7EA7395380ED084016C256BA310F19C7713563A527FB8FD25C42399BE9FAF
8DDAC3E33B3F38C1D2FC4B4AE76EDE928526F8EA1A1D4096EF1F89F20608A045
4B6CA60475320B4A2FB4C310348DD73C1D3D5749B208A51CBF4959462454B5D4
0B76DC8DF7A1BE2467976386660248D571DEE01E6C274FD9E8A02BF6EE3DAE50
8BE676D7BC71D669091513AF7100C965DD36E9AB3421F17FFCF0BDBA0F1368E1
F7714D94E9AB278C8401C98932E6D94408A45E5F59B4395881CCBD1F9EFB642B
8DC7842306ACCF65C09E765DF15FC2A857CB61AE68AAFC75DFCEDB944BE16ED1
26EA5B0D8489F2E76E8E92BA39952812EF8514F6AFAA5A8301F39EFDFD74C92F
1612E9C4197D0F380773AC3BCB388FEC1AC4144BDE8DFB0D28629CBE7A940A9F
2FD46681B42250583EC5BA5C99CB7AFE5A8701B58B320496C00D7E74C72FC793
3C99BCA59162FDA16D14A40F26ED4B9A750730ED98A93BE91F9745A608564DAB
AC8AED378116F8DB81974739A2E2EF9F27920DA8B9619E760A0E21AF7D63522C
452093DB4231D39CA582782EE805FD48EE3B39075B4638C111C8E1454C8ECCAE
5CA3E78BBEB88AEB3893508DF47D2DBEEA468BBE4319792966163F4D0D31F376
066EA58CC3AC2B8F1B153599F995DAEE6E19FCAF5B2A59F3688314368A21E37A
31D878A36DAFB77ABEB6D948615230978DCF7D8EA7CAE84627A27B34D209921F
0556710188C769172BA9946455AE12541818551C36E556EE214FACEC5C7B9EA8
81000AF7B6E84FCAD155DDE3704D3BD4C7264564C80A45AF971C997F589A2D3D
ADDE9B83D4ED24D99E1877944B2CB6A5A7B1E640A4C09191C0AD4D82A933AF0A
C87D5ADC8926BF980096EC4AF8730FE01EBAF6D0E0724F21C663C8D6DC1294CE
D7367F90382826228DAFE20F116D1FC0EDE15B5BA0B0D15A5CA988D678E52634
2D8FDDFA0BE4E54C8C0255CA45A3B8E2E4C005A6170CA9A3FD33626D0A5CB1B8
25783C5E421C449E94DCD91E52804D8A43F98F4DC47911DE1E389CB89D6A91CF
569CFA779D6D60195EAC421297D36AB8A7DC0AD0ACF9D318F79FCBE75528CD71
871E9AAA88112298F963F539FB83C5CA508A4D7445B2E205A354FFD94DC49C6F
A4E313A64D319E72F99A4D0D5364892FD7673C99F73841FFCF70C073337E2872
A401DB454BCF26BFDBBA73D952B808EA664CA9F1A3F95705DAB0F8D9C960E1A5
393669CCF8F290683574D32F41B39AF3E9574A95BFDD8148FC05312B9E3CC839
B6E14230F12893F3E95CBE949EF4B833D951CE840F1F0F037DDBED0CFB000810
A1ABA415118504BA424F61160966AA3E39A1539918B19B9AF5487B7FEAEDF62B
45083BC57B8B67443C4C5AF52902A5B6843748AC5EC0B4DC2BA302882C72730D
ECAE7B8342319892FBF5A18E58BC04238F44CDE2C2C3275DE7A1CB64876086D2
C2D95FA3CD822EFBAD1BC0C4BFA4DFE3FD78DB6E47E385AC86B1790F18F601ED
94DCCA571CD81EFEC9ED8B48DC0F5117E47CDF6B70384853C269174A9E28B55B
C3354C1047D178A217F189B3CE6FC1473CF0AEDEFB064DA2DF8160B668DF5F65
4646CFCE05E7322583134461EF76D276E56201DD0C8EA24C39F39E14E1FA04F0
1B6085F2F97B0A8DBD23B4507496C9685BECC73A40BAC7B2331CD501D0DD6A47
962A2FCCAF2BF9D3B95753EF6740DEAF34C1C1A3BAC53475B595D21CB37C9942
D2B1EF5F92A7B79CB7851699BFFD1A3C384BBCDAA0C1F2385EB8ABB51A84EC04
FD87318878F6631CDBB8AC4F0A19E8B4708B1949EE5029CE272A31A235CFC383
42707C0AE10B38B105AA4ACFF0C054252EFC5A76F98770864FCCB58D33FAD0EF
E99AF03435E1294132AB8C8ED489427B77397E895783A4F8E667A80166DCE56F
3017A506E0FDCD2B2D8D8EEB2D5D9A88C7B5CC8B3005EF125A9020A6E376B9FE
4D136EEF2B51E687A85C247C326369ACCC0EA722FC9DFD7406561646065B05C2
AD012CC32F383414084419670B422DF1DF7E2BC3B86DB9BB1636D08F90A965C7
420541ECD617BCF2D548D12A9AD5759091062EED2AB4FF83A81BF40858CE0424
24FA0F5BB856547B82DC32825F6C50AE8EE1AC053882584E2601AC0D694D2696
7882E8F13AB5203070F916FA4A5032D284011B7B4DE933EAF370C7ACEC0DAA18
D60FC2137DE0D7EBBF11FA2BA6701094DB0A70BBBA5C408B0A8CEEFF080E6FCF
57288314357991CA0A139E6D430F4F9281E1328C23570BD17A6D96D7693C2D90
CF3A5712FE96C9EB9593424FB4A5880F1244A1EAC0693CFE9712A378B708BD9A
18C85C1D2D407460EC9A462213C6BB5DA31DC90EC3777E8D0EC6592A09132FAD
D45D8582AE345ACFA569DF07092042F4AD04E99CC1E3E54C3BB8D661D64E0EA8
3347DD843B710CA4346E7184E375639664C49BB59C4ADF042D1B9C2B7EA3E775
C60D2808EBAD3B4DD406F8353F008A290C4ACD31466CF2D7B195E8799F33FC92
78A050EF3E50C00F7C8697ED68B3D96216948D67EA6A3DFB2A02713C607593C0
5C07B8689FF62377FC5BF6601B18DFEF5F187358F781186DEE749F6A2E98DD78
E1325891592B8AC53C6B73BACF76E1D732F894C4CF40199F15331E21AD80910F
6742AC40951248D7C626AA6BA77F13B6CB521CFCE58D619A66ED2CAB51089E28
1ADC179CA6363B385269992EBD01F5257EE677F1F76CCE15283E0D4B86846C94
00E70C9267751B687B0E0E14983BAD678BF10D8795B37F4203D0C3EBBC3CE617
A74784D4BAD5BF4044F0E247D96505DBB304B08E906F2006EAE6721FC533EFF5
BA5F2EA2AD093DD445719E96C8183335ACFBED48C823C509962EDF958E76986F
33F62B31CCCAF94DD12B4996D2B04C92757F9394F13F4CC3E3EF1151CACCC849
081A45933425C0F59F77AFA5C4DF97A1BF4B117E4BF6A529F2E3891249880B76
FB49D878AD8D14A49BB0D8FE5D6A24F0C861D5B1967E1373C63DF3B0A54FA6F2
2ABCBA5E76C696FC5FEC24AE4E5BCF2A927E5F2D73210E56DA81E33674E95397
A3E144F582120472701A543E95182C70A0395E51C9700CBA1BEFA442C8D20A68
B7B05E2A8E407F28846239946A564EF01DC4AD98C3FF5EBFBDB922A5BE193F4A
E0D30C32EE8A2F40E339DA3F03FDCA063C047AB8609E1244BE6C9CEAD20541A5
F79B0F2B32C1ED19E1F784C772FC0E92F4903CCF3745C585115111EFA2452DF1
1C9712471E85A059601CD6937C4F646B4F2B318460EC995A622BAFFEE40A4536
7F7E7A1840EA56AABEF8B3EF92621606CE2CC88117AD59483252E6C0788794E5
1337681126BF8BBBD61B2BB33D71E3BCCE776903D5EF0CA24784A1DB4D790D55
2E9D719DFEB7BECB7C7235F4C22A9D5DA3B062B6D732AE463B629762057CB085
B9D8C79AA99EC9D72540938F5378AAA6F4238A70754421E6444BA967C3D189A1
B8972C10F78A962790132A27B809011644AF31D851FB4E7866E23E4F895F40C9
412068CEBA87244A45B2817399543BDF87B5ABD1B9C06A2B23E10A5B934A0857
AE916B57D7823EC112AFBFBAF1389B9C9B512A591D6A89BBA01770F9469B1B36
E4D572DF80FCEFE43D6B23A82B9D1E9591C3860BEDBD7031874DA4A906FE2792
F4E3348CD3049887F96A56472D20D1BDD9B9180627908A06BBCA1923A589FDA0
2FAF5917702B2C13F3425A08815BC8D40F107F01113E6543D942EB98666B633A
E30E3AA6164199C2A97A199035D869924573D54BCC6384228AB428536A999BDA
B4680CAD76325914F7193A1C03234207CFA22C0A4AEABE7F650228C5A1936A1D
FFD39B682A12FE8E4E330C00249B0515992446059A3F451A32BA1C0B3CDBFB19
FE1F03B51619525AD9D068AA1F247BA62F8ABE3B31E07D9551C9B0CE32D87030
FF26DE63C0A9F9A1E08F5F688B318C421084378FEE6B06459834769A116E2AD2
6913CE55BA9EEDA74D8F762EBA18B6B12B517C1E5683C90D9DEE76C22AAE36B7
B1E7D9D53140A05D541138DA6FC8EFE6C3138F79A640C74CBB53BBF9B7EB70D2
6080FC9E005449DD26DC58AA3B21B465E49783EA861DDDB985F1E3D8B10D7B90
7CB4338CD458C787BA113D6556A1F6EBF7FD1D7C0305D648FAF472BBF13BF10D
CA59E9438D9841D3CAA4C16EDA521925BD4FDBAC350D30F80EAD8A20A94176FB
CFFB0446CFD36D3EBB4957ACF1D4601CCF8281A9017978F14D1AEFB4EB1D65AB
1ACE526E507EB057065D7774FD3632E670306CAC950F8A60F05088703C68C018
A7C04EB2B195DE94907B468C6E9532CE002FE7F15C88841BE3D3C6E269D701F0
59C70D71A817E2A7D1FEB6121118428CE5F4274A1F8BDDF9BD9F8E96E46D02D2
E91B570C37DCB80A4BB8CC0401F70EF56E41E18396178D9549FABB5F6E801F89
D5C0D577803D84C8EE17EA56B73B3BEBF0ABCEE5CA70E196820A06695A39BDFB
2EDF7D6BB87373EBAD1549585D7BD902F471EB5BC97E70CFBA0A23CF04CA3DA8
5D5F48F6F789FF7C303BFB33BE50E489BEB87CFB60A8DF8CF7B4AF6BC2076434
7214528D0A02C367F25DB99993A80FBEAD740FEDC3E27F17B74E73DEC5AF3636
AC1835CD7AE42E18D338D884EBE7952A7E6616AD93D31072A4AA972BC1D9511B
1C95C325D814E41C4C454BEB7210258824129D592215A3151E756E12B00D1914
EACF7842A48CF9E9D19AA915197C7C2924AEB1F1179C80ED8210ACE6AA3F52F6
9646A052F91876DC17810A48AAAD3E9CB9A7414BA069BA701503759ABD27BF75
7E7E3AE38D71E90DE5650A0B03C661A04EB6CEBC9EC234234A136CB29E1EF049
A0D833C24A59DB078D332E75E6FCE4C14C34C3638A2D23789565C99E59FF0ADB
3E256D64B371BB12C5C94827C3C86B64AFB3DC3483564987540BB51DAE9597E0
89BBD9A4F4C6CCAC786F8731A32E1C24D124413CFAE61E16F918DD1FE1B7D23D
9CA7D291E8CB2AB37771A7EEFB3E7D59F65EC8EB22F4F20662F867E3980237AA
A79A79E0B93DC3FF8C9EE05968E23C6402606AD1695BE2B2B1896646D92D4C84
D1DA739C0145E452A23143D132FC9354F8B6D81905A68E94392A2F772A9E3DAC
D5F696FC6E2C9A5237181BFC1AF8550342E56C9857F654BF51B4805F6D1FA9FC
EC2F0F40C2ADF359D884F5E37AE6B1BEBE97554D088AC3BBFB11196DE10683F1
1DE3850A35FD88A7A516377D4150D390E63D23D92F2190F679B55CF2E9A1CACE
56D53B9BA76C8277D8C4423D10F8A4AF90E6B962C60108B4D748B2F1FEBADA57
7C214523954FF8AAE0B0DA4E78A18E285107E1428551A238FAF3ECA7AD8D3FE1
D0C0217C057987B5FAA6F2C9712DF02D28A4FBD7FD1A6AD727D94AA270AB5CBB
66B46127DF536BD69691C2AA257A44020AB1E46907A8292B5C556A8F07C97939
D36CEA9F87278769BB6D764F5C5A20A00EDA0D24AAF27C1E9A3CE6CDFE50A5AE
0FFB000810A1ABA415118504BA424F61160966A90549EAD390567258F8E53D6D
A7BE60769C96DC63384AB0A4024F32225A2F3E6ED090F2A3EA4CAEFED080BEC4
9C9716140EA6786B7FEA231AF72D3DEF4233C91A4FF6F1AD45D3B92C8902E4B2
B603A4366698ABAD5470018A3F2534A2E11DCD903ED2AA40A2D74F77AA7948D6
E511DB8627328A13C64775707A713C701E6064C6850F194F6688495F3D2FD8F2
FF9F6F88AD16BC525B35930DE643A235F68C048CE3D9750278074440DBA43758
955FFCD944BD13E0DF7388E02F3B6746B94F56091F8A232651AA51A75EC58D88
68ED084F824EEE7745B85F3948863916312E4F078CC1708F81A755324AAB667F
33FE709E0F7E4E76C1711632D79C9AFBD2349A5CACCBE31F5EB94E154DD58C61
4F1CE93118377CD80BD99657E6B123FC9D031B23026366979191068153A66691
941FB3A5B2E992A8BC3D878BC229ACA699C4A7008885277DC4EDFE7D803CBA6B
B298B609431E024DD013CCE6E2867C9808AB4D3C7A802B4440DDEC66B4D20EE1
32FE242F4AF64EC9319BCB32BE352112F91F44923F25BAF435D9D4424DE1CE25
8216A4230CC9032DEE7074D7FFCA429E4662460EC35E177226EB16D8E1AF7338
C0E9456D4AA23E3B727B92E62A71AEF1A7DA6410CC5D0D89A19315AD3E793492
8081C92987A40F5776AF97299E671D9EF6A75A0D88FFC8410D0905881AD6417E
13B1B3B900A38EA00EE32874BEF8686E3F73337E2872A401DB454BCD456582EB
824E4E8DE3DAF4BFD84C72C576DE83DDA5FD11E6504A6C8515DE20FC75F2DF5F
8C2BC3A5CAAFDD2F1FB75F92C8E0E54A39325730961457A7B9AB9A518B170D6B
2B5E39E8E72D307BF0FB5D6F5145C5DBF496DDF95028B30E4D73E5334355AC5E
6F068CF205E195D3E4D1D7A49BF95FF0FA981AB8B56EACA7043C462595516421
FC0BE57B43B38CF660824E290A945A922FD5FAE5FE0CFEF566834D19E8FD202C
DC5E5A10CCC6EA6B5655E7DE2C7EF5B3C5421A060BBA2543B9B72CBDA2AC99B7
F119E470A70DF3D8A0BEF04D5F65B5B058542C3AA9B4F74898E2FAD1777DA4A2
63813B5670BF1BE75618FD0E0E3395DD93F5698B571A0239BA156B6EA628A5A3
9C7D667A4C09020A483928FFCBDB80B62D5AE14351FA8F32FB10CD34554B7A51
DDC502CC6F30ADB0EB49F8418B6A01E54B38EA0E3A812679AD53A1060488E8C9
71CB07C66E297DE8158DC15E40A7B8DCE9BBB459F8E6BC0A3D6A13BABB9017E6
E2738F865F6E9A6F6B444E00C0B19CAC65C008159E3E68933162B9BA949C4F6C
D5621A497C042921C72B8C50B2DA41EEDE6ECC52CA9EDD64724938F453324586
53CFB6E717C3E7587BD534F0297E04FED3E0DAD6139B9946AAD6EF6FD62DC3F5
2A768315AF02693C47AAEB1ECCAA7D31C8DC9C81220B461870255079A7780358
2DBAA1EECD9A64EEDE5FE92700B9B8CCBF372F72900A579A263C7939ED64FA80
4B416532B8EC55A1FE0978A5E6991E6DDE38CC9BDED55D98E24654CDF58D01F0
13C48C4B9D778E3AC7EEF2AC3A48CC9ED578AB02FCC9682DE10C19FF33217A21
D6FD6BCE0E0CDAE05690831734C9B2A7D959F58E060EA28088E4A2168C74D5ED
0D083DE611586D687BA80D247B8131831325CAE84585BEDD132B11C0F1448CC5
22416904FBE40D80E8569D53798E6438AE06B32E930CABFB9EF4341E1213900E
D56C44448D5B03E679791CFC4A85C61F939BFCF457E6E71F69091755B8997FA1
AE84F2D58476E877CA922C537984917076A4D414CC88FE77F8EA558CCFEB02A8
18F8C2303970C4112ED642D29B37FBA8FB1A4FDD8CE7E33D81E5822B6509CC0F
F32ADA26C15586A4F61B478952C54E95393BDF2BE65899EDBDD50AF297370DA7
A54DC5F00D67A738CADE6CBF21E8B2D1296CD2CA8435EEA3DB0754976C9B6916
CC9D0A44E0DCFB50012DC48D019EAB9B3F0A18BD16D34A7F219DE3BDF56F30C1
73466A5D3BE012D9F1AE5984F50728B8A5F90C104244F8E219FF11DF502C193D
793BEE133DEA80CAC62334A062B256DC8462E18422FBCB628A30233F32472D33
F3C2FA7C589EED72CD1C02015614CEFCEF8742190E6809219EC6F88716777C67
537464EAEB5974B905A6BAEADB7031918B23923D45A25B6AF9C16A085A68B6ED
27C7699458534C90D09379
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF790CA36DC8904E2CA4560AC14AD4E54AF
2FF89B894540D6E0A9F764AF34F4177CD3A56B5A2FA274AA4CEBF07EE63D15C1
3C7ADB781EE1DC4172B238CECB15B80F50EC2065DA9EC95D30D39DB92D17AF71
76E6FA7F2E68B3BBB010086EBBB075A72D0624084021887EB5284FAF73E72CCB
C15C7AECF1CB17416CF2BBDCE73FD845C797568D765D998D98A2F330B4E0C9B6
1970CC76591F47BC40631413D94E02A66F6C58C85D48EDFD6E41AC5825C8BA76
E4E99291D576949DC2E9B0F4B9C6243A7B5C63BEB7A098438F6F3F9C5DC1037F
DCC2F4A81E4705006E4AF46A866E755FA7E7A47DACB01E8E1587EB1F9E3CBB1C
2B2DA78154957799D24AC9D5C68EC4A4C5CBB5E438A09CAD9CB59E42B5FDC187
DA27ADFBEF9762C42B9D3B616201B842FD98C3040855EC17EBF96D17346199BE
8035E58420D84FF4FD6D00E863B27DF4F384B8D831EDEA947F2AFF2E0FFFAAA9
11840172E020958073740C94AD1E41A896F44A78999DBFF6A44FBA51AA40B796
A4B3894FEA6DABD35EB11730B661595BA4F7B5DFA77AB23C7F16C7DFC8B36B51
036A564D07A66E3BC402453DBFDE0B23DFF34F95217B4E93EF32D5541C361306
71C916D6697E53A43ACADD7785FBFF2A844CD9F42A31C4C5FE755C4C8E659FFA
268EBEEB0C9E4399A7AFEAA96DC29BDE65B6636640155E095C605590972352FE
FADB83DB6A8031845DB785896843C02A163DD81BFFF224FF728452B4A927A437
4B81944E671E40441D29E04736B52E30DFA6A8CA1A9E50F800CE5FEF417D1239
24D23571C23FE9D88A45D19B2C692B6CB179471B890A7B9E5DB2BD9194D759AF
028CFEAC5157C72739AE6094056DC29FD76E530F2488F0F297C18AA3D72FE782
05261AD60D8B3938BE62E79A4A61DF84FCD8AA43C01A92340E5E59BB68DD231A
933817168828BE5D7E6C88AD2B2C7BF0E66DA9ED5FC979D11C11BA5442F9B053
5D561ABC5CFA653F6970BC9A18AEEF35C5EC9F899799AD2244654E2CA7624AD5
0EF95F66DEF81B8058951E935E026C25B677FD6B341C76A8F252DFBBF4AECC0F
FB2C3B2EC25B75C01085ED3899F6B7F24A3D1CAC0E6DD815FC84352E97F09190
737BFC86938F1CF9671295786B7A9F53603751A985ACC48D755A6099CFD95353
8C93B769BB09BE0416933011294AF6C6B54AD528E54364C54F4581C00679642E
D6A97D43741F5498483F0EF407E64C8FEB5B6A86C0D8EE2BE0E4646AC1F806EB
13CF9C5D6A98FAC8EE3FA6DEF19465B3C39A72F38FEA8A134E76CFDEB4CC394C
FD3B7A671FD3DB732FF26165A99171E5EFA245A6DD826398A7A941BFB2EFE105
C9674DA556EFE521828F2729908BC0FF14DFAF46707987972D6AB539082917BF
C564560A508E83F24083B4CF48B7BBFDDD78563E2FA851CF8C19BF525DB31643
C3FD81FFA8A87C226096B1ABB917C38BF3050C6AC092DFB86347157475C328E6
1E0B7DC774D718051FF1764699C3F1DE84BF1B9E31325E0713DABAFB6BB70D2B
8EA2927B6A16A8568F4236A1F4B4E11FCC4D14CB0C79BCBA59000A4822A207F3
099BEBF9F54572773B7FBB899924328023B2CD707A6A4F372F137F66B218149D
0732DB5BCFFF8818B2995A7591E08CCD031AA0D5961DDA2DC1E85819EC62CDCA
2F16C50CEFCFC6BC8454085EE764859C311A247568A836D8F3FB9FECCCA60252
F588BD8DD01951390423061038A0BAF2E3AC405EF0E378765816492E0F0171CB
7869A6B4EECE8308AF1E1061F3E5422BBA7EA86779208B1038F974D988AD1EA6
C01A05C2BC8B543048AE24266F741E277DF597297CC0607F464A544179C5BE03
B9000D1792E66AA9950B2A1DF6EF55347777E4C3E6B8FE8F959BC195E8AFFE88
6B8039FC1ABE01462BCB1C2B26DFDD17DAB7E9BB5230C82485609EE6431DD24B
F32A493C720D42EDAA2439C7ED861F80F21761B7C53BDB8A9649CF4A73C82693
47448B324E2ACA549BEE668BC55CB065355A59CC5E5AEB1605F5B596D20EB63A
EEF38FB9A89B45C068E77415D90B95E57D6CC74DDA152356E26047DFD35CECD0
DB6AE1F7AC503886D65B37BC3AD771057F75BCFAA7AD50A15A22A39BF1C3975C
340FE05C921096A1588E5FF83F58725C019A6CE0AE21A3AAEE4EA3AAA34C6A55
7A983C75365ADBED2D0FBF2E21558F0D2162363A052B6FEED93BACA63824B143
BEEE7FBD26CB02C710066B74BE91955668B56F0CA24E9B72767AB2F7F110FD06
AAF8C7265955F4EB28FB404EBBE220844E51E903614CCB0354243C9A938EF02C
32B8B91CC23EC351E5E54EE6E04C9D67991409BE968205548E3B90DF607C27AA
81946B574E69B20D9FE51C7EEA148BD2C80C34C7B6B747685E13FEFE54ECFF92
CE24D1E84C8CD25120FF3149483E8885A9A588D0081375F44969C164F429379D
F12E40253E01DC05C1FF6D5207A8BDB9FF4CC277FD9117F33B7BF402137B8A6E
AB5A56467AAD51FE5AA57D8F7128E95577961EFB3A8DC5B26110933E85243838
EBD20A52A8D121E1C599467264AF5F98F667D5CF086469228087B93E37946BB2
6B44FC60CCDBF7F57F2491D275C52EED061E359A8DC08CAA761758D9FCFB3E6A
5AAE81B5E315F8DD8E99CEB625B47C002E2261FF18E4EC9439628D6C41A1AF04
BBE502D3DFF58F80DCDDC04356ECBF3317A2B5866BF2DC391DA1F9B414D3DAC8
7D5E25B9981ADA7406884326489DB04C8D766749AFB2D3E936B57AE4428BA4CA
619F229B918EF5889368E43CEB4EB49EBBA0A8746AEDD28CC22B31AE04870CD2
885E71EF1BFF1C0B7B16759F5CFEDD9337A09ADB385BDB052234B26FE6DB7F1C
BE677F8F56C1F89DB8EABA360ABAEE0D3D8A12D6373A6B8A63DBAD61C0ABC289
CDE655DEC992D480DE31F4966FDBDE2C7698495C38C459294D170F94D3DF3480
D6337DCFDDB8D397D60EE3B6557D8DD1E541D7205848E2455AA2AFDCD3779B48
A23B921887EE01FB75DCE6E78FB4CDD3A5BE370090A641CE3460EFD9A98A5AD8
44E3509C34D01B294BAB96A53E3F70FB08ACCC3E9A7426BA656101C897288256
E728D9798A83E2D68ABAC7A67CA9A9341A5D440F6A0B7D64FEE55A96E9C454A2
C21615C33C67AF740B3FA180C4F8B1F8FB7CD50AC964950C9A10FB5F43BA7DFA
48E019F13CA5BCEAAC0258282BCB5B02E38BFB36CBC06FD9269FC7324040DC65
6251A86BF67DFAF2B0FB9C4DBAD95818B0A029FD30304D803956FB2603C5BB68
300E0B11954CA772399BA2228DB4B0C5D6D1D0BD8E38168FD3279BC17BC99ACF
ECD00EB89F4782D8F3782F0D7F681BF740647839138E5F3315B430D1C80D1F15
1D3FDA0B3BBACD7EEE4F6843BC3EBD65B115CBBEEF983C0CFF9A3F29CE46FECF
3138E2A77D5064EE2AB3E0260FFE709C3700364AFF021C110CCB0106DBC1D6B7
4C3531045D66FA4727B703B9EB3B83B6CC6FB81C58E4F50B9555602DE610BF2E
941558BD0F6554D3B2B88609E8816F65CB75E7A5907AD26E8B77CFE195E64755
85DDA50196EB56295BC018A212DA6F19308635E3BCAEF764EE98F85714FD4581
ABAF9F2C45958C0E007F6BFBFCF37DB2EFDFE9ADA573F01807A82D58D252E3FA
207715195ED4B82D10D7DE5CB57A30F2082D570A1DC7EF75B1AC6F5305F02A51
AE32A41F186988526A8006AA668887B1413AE6E0FD278EF3FE7278F5568A8D9E
0D672AF724CCBDCC38705D08BC04177F94AE4D6997A861B5CEA7ABC46E1FC3B7
16A8AF838B984479B2CDD252052A19326469AF6C0F9683B4420F0B8D462CB209
0B58F9849D249DE4D49A757617AB20AD629B8CDB3D982FF7F4377C5F6D23FC0E
90F03464F1E5AAA05720A40A1CA3CBD01066E1B00C98CDA5F8E6D1C556913285
DD2A206572EEB7DE7FF432BBC37126EFEA3434E7D6C4D60246081A702EB30FD3
DD687147530F269AC7570DDA6BA817C1B721677A8C942436E4276150B16E44ED
E5B5EF9480ADE0B18E8DFDE7B7211985D09A3FF1D89FC9396B4F30AF276E6FA2
40E4A9DEE1596B6CE5B8743A19B96C633B52B445FEA9A3D38C134DE8C2FBDBBE
C708FC26DFFB70E37A26C6F1B016BBA5D31E71FFB233901FECDFE8EFBAE640A2
C6DB953ED292A4ACB9DA13E33F8851C243541591BA70FD2B460B990E9CD71540
2B793D291E4D768BAC734A907ADFA1F189B798911208CD9E5C52482D6E2C5772
704EC7A9D64EB0488FA4395A98501EAEC5D21617DB61E1D3039E5887CC858524
3F1DB3F5C27DC0F74A15503AEB98D4FEFE2F26870715B8FBD1EF640E6F9E5046
DB2C47C7A6B6CB3E60552E789A642EBB0E2C389CD709D6E4D7E801AC7E957CAC
DF0445995D4CC6CE9D649F9B7D6F52481694A4822B45C1C4AA6FB0E1DCFECBAC
9EBC065A56AB2AA28D5C05D02E986182C3B984484381EFDE8AA1B611DCDB8929
EE1D224BBE71D491491E347F87C989B838AAAC99C051FC0FED9BCD7DE51AAE7F
1E3B5CD8D17B0E1420415ED72162CAABCA2EAED8A3528B037CD15B4CA656B0EE
608E4AD40E0E8B0D19A7C32CF3B245BFE8EAB0ED5BE589E16C7FCFA694BEB9F0
C4CC62A0C91F939354E9EF83FA4E9D98849E6A8004F9EFA7496427B696A92835
161CB8C3EE8569814DF5223B94F3784CD7987627AA68C167EDCF79DD479BBF54
177F19A5D92F1D7E287CBB48CE3C1F8B633875ACBC25317F20BED9DFF5DC47C4
64C13F362C8721795EA98AAEB8326B7ED44377856A3CFDB347EAE7612CBC86CA
8D7266BB517ECFC506C3523CD77C171DC641FE9EE621CAF76A6FB6905AB17088
A6584744692FB504EAB292E679A91090026AC656D01600FE4FE5B6FA774B61B7
E030BF9584EB816AFA4862EF358A37195488EBDEBDC24682B78CAA7FAFBE34EE
F10C25C9B7D1ED58472680693A78758AFFE4E96644FD19EC72BFE41AB178587B
7C3C6F93AD2F5BC4CF7DA4C367EF07605A7E3CF176DB1DC288691D4AD452C523
83F18AC60DAA586257CB4F6CC170456A878C782BA6D48AEE80E17953AAC7FDD2
3E66FA142C87FEAEF085D4C0C92AB2C858B9FFC471E6481C645BDE31536E9087
CCA80922B75E7EF41A4909F55751F622CAE0B755D519B3F926A72A8A74DF440E
DE342741C54D3A60BC0E04F067974D58D6E0EF257A2E3D3294C0C2BBFC753A94
91E18504C4B300F407538B49AF0D1EF96131FF2A0FE627A8DAB963F521314EA2
D34378EE7DBD9EBEC8F177A83082EEDCEA0D02C99E99AA291CE6E759A2BBCA40
C82366A40C5371DE508D25B51D36526A2EE27DFA1F3F531C6815544581B2C142
C987DF5322482CF96FD269589F6ACB90C2B26BB8E30173AC236E1C682B930F48
8D0330C6CA3C4B88B6DDF26929E3EBA58D71854ABA59728D15009517AA63032B
5D4526C2EB55984542B7FCBA5E14732683A7669C18E751D6946A6047F674EC0A
F7002E83160A2F8FD7D667ABC8223DB9ACA607BC0989114E28A4E15432E97B75
21A66CEEB26113DF32E5FFE3C5B6A3B1132DB3D24FDD900BD36479D9E946BCDD
C2A7874BA1CFF64BB7B328FF3DC64C377C8A4BC555C8390E34A50547DD2FEFB7
C31EB31B03EF21865F18C152697C6B11DD6B7496CFE0E32F1B23DAE7CA14AE2F
074713343E3FF8B740679F942886181D89F8D8AD4411072FF338836FD8D82217
8A4F93075F35E32DA35722C36EB16274A1E09D426E35F195218A804B14771C27
251A545D49FBC4FE90DD544FD39421BCD54ED5D09F9D65C991D25EF13E862749
3C035A9BCDA37CC2F783594DE564A5064CB1F98F7A60D04DDE5302B9DBF9AB7A
AACBF0CEBE7F8BE9702C8FB5537B8522127029A1E4BC97FEDC51101798F93909
2864018B2DF12A7CC63B5B76A96EEDE764F559C59D40F48DF92AC063F61C9FD1
80EA9402409218636C0A7DEA2625697389C79593177B37E0E45CBB0AD778C167
190F3326881E67FAEC8A10F0C77EE9215B73B7E88D9B255616AD093C909067BA
841E756D0FD220F605CFE56DA8B99BCE670CFE23D6C3645E775EC712042FABFF
48388222E2879F3C8455697B068AED8FF88436876034074897F6A73BCE98BC09
B2B8B90F23D134B62B3EAFA57E80138BCE2F26173FA20258282BCB5B02E38BFB
36CBC06FD9269FC73192CA5C7C1E5A356E11B3FE268772021CB09843818D5002
49F6EFFB9A371452E23091C66FA03DF92D4F5934F49046030D4826D3CAE5BCD3
9788F40A7C7E885567FA47462A17E931ED8B94E2FC567F01CF59F9E7DD2143AC
7A392162ED03337DEDA21A69392660EF00A1521A02AAFA167E1238FFF855A95B
8FEC5847D3E6BF81E684D89D55C9E100FE7121DC20088D1BEFA38DFD251EFD51
42029A830ECA77E8FEC809C7D3744592A950984B6BB390F4B05498295704C759
2DEB0FCD0DEB0520FFFABB84BCEDB7E134E1052932BC6AC99EF357B29A1619C6
D862EB3A069494E0B4A6C2B8989DDE3629B20D494FCA2CBF1052C96F28659B45
67CE2EFECC9F48D3DE0EA4B0C40112DB1F6B7077666A3D47AD7E28B103D59918
38AD6E47B83DB705084141D0F0B2C5AEC156911268DBF67CF2D3E3D2EB22BCF5
D2C83FAAC198355440F8790AA63A02D345420B5D9451BE0100C732D22C6B7E1C
FB4C098DB78035B3500304101F3F31DACE98C53A6841260E317471FEF040574A
4159A4DC2EDBB7AE3EA055C176335EB12901C4F707CBB565E89BCF44E91701D3
12C08822BDDB66B26075DE599BDB68C3CEEECD587F3777161586A6D700DFB7A5
B1F07FFBD491626CA771D069C0A7367B607536A2E11DCD903ED2AA40A2D74F77
AA7948D6E511D0E6EDCE10DB82A08F3A3AB7EAF4BF4E16211A12CB78F1641CBD
39E725C84A0C918A3CC4086094FFB9AE20B2EE607CA02990447C210CB7B7F743
24C75592D53F8DE3D41B514E8E77CFB11EE71B3299E9141F5928573B9C1C8532
02250796C2729C903CCEBCE91F21EEA5AE0B108531203BA1144E79591792B364
C36E43B4D82BEA0DB25328482E89B04C923F531C68155445826DDF1180D04C8C
209288268C232C09313FD1EA60F9049470CD637C5FFDFD63E30ADFAF449BC4C4
F570D1C7C0D4075CF3E1C98131D4D542ADE1B34D97F50975DF4E1B5E232AC59B
15ECBED52C26B808AC4BDB26ECCBF380E5023F89D745C169CD7B7F0ED94405E8
80430B4899EAA311AEEEB2674FDE9838DBE985DCA28405A35A5D733044D6473E
A2381798EE9C100E2C9F988666836D028B149A4C7C86178E86B33B5700766FF8
29895F1ACF9D10AFF24F32BFCBAA390DFB4C3D373AB6530B24E56DBB752A5F90
FCEC03333FD8EAA5E712D94E9345C399D4F2621C4CA1D03CE906D049B7C36689
FB5A2CC942F10479FADCCDC13BF8416EFB32C4966746D4A5E42B83BA4FF34088
F947E0BD12C3C8942B3082B0E5897F3150A3204CFFB98E883BEAEF04A6C38BED
B66303CDF5D6D1E1458610AF632022F2747D4153C40CACC0488F90F857B8A4E0
27FC97BC424E3F4E5465CBC752F43C1648811485667ADA56F3A7D061C523A983
77EAFB5E58C5640F4B58F36FBED5710FC295D7A4CE0EEB0D90BCF3F7D9C9914D
5E90A4D30456F09BF188B8AD94AB7865EF9287AA4000658A6EE7D55E0E525F32
58478150DF12C440DD9B5B04CFF8E517E4323D36EDBC2E64D4C54252435FAD2C
A5EC36B0431E38BDA4376C489CDD2DBA784C30B04428FA6F0094FCD1047EBE0D
2FBCD6145BFA19200E4A1BDB12C2B9B8920FC239F97E12B532E0E37B79E5F122
D9D499FFC8F3236815481B64882DD2AF5FF7F9C4801C857ECA765B5468346CF3
03AAC27F95F851EA96B6EAD94433B4B6E30A7429248437559D980DD07727BF13
24B07BEB1A3A27B51522DADBBB3B41172DA3EB2F150C36A6ACBAF018638D19B7
7972D74934E470A43D3DADAC2B01894F83A7AB8138F7D037B4ECEAC7A4372467
AA1C74341F4CF2448AE407F36C904E4749A8721E72DC276DC191135EC1532740
BA5EB06F905F873D80CB16E7EAA4D28DDB391052589E09FF6E16E2A22223B0E9
C5DAB2CE7AF67CB41770B76EB09E4A9D3766592D5EA8AD30A44EA166ACE6313F
30CE2B5F9665223E096FEF8D05B296152A7BAAC65D3ECCA28ABDAA319FF9E797
3DE4F3A232CBE228DCD9A5B9FAAFEA4A028DF19DE217CF323880E5EE4CFDD25F
5477D3501D9B34332F67D4773525A9E12920DA008F37FBD30D8C1F3AC157DC1B
5C85825B7FA0086AA8FB60C78BF5F95D968EF40F0DDFB20C9964E17B61CCDA6E
28C2632520FE0A89C7759DC1E6400EDED33740E5C099321C05B3D94BF276B14D
14ED4675C84B784F4FFD07D6D051B90625E65B99542237D28BB919B0AAE8963E
0744A152DEB33352C0E683A35EFF5BE199D8F7EED72276AE0B2794B489B821B9
31C5C6C17D2F7C8AFA407728157237FC958B971CF7C3D398DFF53D95F87F1ACF
C23B060FF2853B2E651B90A339599C577C38C8D4DA617C56CAA782B3B18DECD7
AD20FFA3082A9CCA52C02FA4FACD0C921F46F1096737EB789F6FEA60E874EDFD
0D242B07CD79B7FA5E2C9BC2033C63465964F19DCFE4EA360CF93D46496C3E68
2CA5C9321293DC675487DCB8FD9488AAE047DD7717EBC46457589A52A9A309F1
89AD191A0D3174374DD0F5519B7668465A00FF194E58CC9E083BEAB15B97F84D
9A0FE1EDC6EFBE33FB592D8BC6882A23BC5754748AE05E84148D6C9FA8208FB9
B38451FDBC14F6FF26F15C8485DD0D3E358CA717F8E5B053D65E3C8FEB7D7F42
5AED0597DD2F61022009926B5F6716222179BC125049FF982B3EF13C092A6912
92BF9E1A8A8651D784725BD3264457B1720D0A716A02867F8198DD60EC65C753
A39F805AA6784C524038F93051E9BB22054AE389269F04D794FC7C8F048D273A
BE0C9F237A8508C32C9B2DE11D8EC8EE06590791C0E426E316B09017BA301F7D
3CF3AF2307B191C571E5CC7EB30FEA5C2862CC81F3A12C27B85CC6A3D7C15077
E17CB75B72CB0660B801465E99819EF5B524ECA26B9A7AB4DB12AADDFC8ADE59
E18F805FFF2078CED591A9D1F9CB99665897531CDD913269816346C71DD6731F
B9C362EBB12F2EF5592EA6E1670ABBB07AE5A196D48E6A4C4FAF364376F785E4
993E132E1337CDB09FC599792AD66A97ADA1DE64CD94A8D01276AE06E844D339
92B77FD487006853DBF6BD4E32033D4F21A3F1939BA4C4B324692F369EE12808
88EB89B90D51DF37320042F9B77F620AE2E4E1AB5A54CD3CD65B04FCAB64D0CA
3B2F0D73B3C9FE2171385EC802FBB38C8D3F2B4D1F5EE65023188531B653BB32
DE4733894EF46C08D09A9A8FC9573243CCF1E496D5D556455F2EE0482C8DAC7C
D123373439B5246D37D9D6158FF20B7973F2DD50BAAA0B17C9F8C8875F1BA72C
AF5504A8E888974BCAF1853418A62F47437A340C731A1D3DC56204F04DD694C2
42C12D978351C7F5C1C666E5AEC77CA513293CFEDC3EB081A938E881CD6D2DCC
9660E35EE076A118A5454B6CA60475320B4A2FB4C310348DD73C1D3E0CAFF221
2705C35474AE86F48C3C6D3EFEA669B7963B7F111976CBA8AA0F82EDDC840C23
14B203C8FC94A8A064EC11D3D0FB419579005623B6A34166795BAD4F4352387E
2B3F20CEA8D8AEC6683FA4C3439BB2E74077F0F39A32C07AF36815A4BB9B5908
2CBFDB8A6DF3636F7EB8B86B49045F432CF0A34BBC440DD263AC76FA427BD81E
0BCA8E2B422CA4A7A9C823E588A5EE388ECF1B5C3A14C1A4FD2F2A00562B9E7C
A098E705AB881B94F00754B156921AAF3AFD86F02140840DB53FC2C548883F0F
F7C7D8E4379405988F182CB468F8F7DCF39E5FC561F61D009033A099AABA5C33
FC7E420DB3CC39151D71414A114CEAAACA2CAE3510A121F12C51A266D20C557A
F6CEDD8F23F8F2FBACF920B180BFD6ED2D81EEB6FC227010B5F178CB8C6F675A
684673C32818F245F33A42CF1096F968FAA7B290C44875CF6FA989D5851D2DF9
0E12849C48835E13F205809188B5AB84FCC804315C35686F574F1EB9927F102A
143EFD536D8101E4C2A02DAEB1937B920E846BA1D26D2DFEF6A24BB2F3D4EF7D
0B90EE255ADD656E569DC587B9F30B4073475DFB74F015B995D2B719CB06BCB5
4C5291EA722230515875AFFBEEB315F71957F80480AA54826633995E87D297FA
5F2C54DDABC68455BECA71E6B481A8D662574F76002F90863EC701A6AD7B9D4F
FCB5F468223E890E568F9FD96583F593B97B6A079BBA2231FB47B4F77D7F8650
CC3DE4052F6EF3544D2D20FDB8C523E25A01D01FE1E99220331D09242E0B56F6
0C5644E213B3FFFA46EA2C36FC3CD9E2FDE4441A2BA6BB214F0DA8D335635ED0
CE9C3E73DCE68DB03EDBCDDA6EBCDDEB8E688933B265C1EC0F6755A93538B336
54D5C8A6EB58E6FC068F2BC46B30A0381C2718411D5D305FEF3A1F8AC8825567
78B0918C235E5DFA1E9B82FE1D09F44A31F7D8B964B980FA031A306A6CE913E1
A3C12E9D90E4CE939560FB9DABF9ED5EE59015CF7DF47C88CED0B6FEB27E53B1
8A4A54B55AF39670CBFCA5E744AF63C8D0094D74D50922422762DBB5B04A5D00
AA70F399DC0F403596F43A6F2F01A6E49910045BBFF300EF16B57E926B093EE1
3166D4D27B4DDD698F089C0889030A6B466718CCBAEE9DA2AEF6DE01020B5403
3E02EAAFB0B9D6CA6B7FC623EFBE3AFABED672DE9D121B6977787603197EA9B3
92715826470F3A1F453F91819066BE31DE98B38C7BD81C43B1851E3132FDE9C3
BFAC4A1CD9A4C99DD667902D0150EC9FC4710DB0D9265E36CB4868DE9DF16350
8CE44BFAF872BA982B1A1A4C182B4ED6E6BF2A52B977A4E85AD53EC890318A5A
43A1B22079BB37CEBB72EE314873A99D33F5C5AB14548C9A2915286BFA4F79EB
32695C094E98FBF5DDCA79B83EB1FB853F1B26CAA8745F829065A21ED2AA7202
F962A9734CDCA6773634278C6A16A9C18A7465D69E715817E97F209BA574B5E7
0EFB065D71A8FE919B12F431DF3C61A2DC1F13CD3BBDFA87FDE55B03A3D26CF9
2EA79BF7165218F0C93E5CE2C263BE379F531353D1F221A8980A28067452B3A5
A211732448B8F928FEF7D1E97537341741D1808B9EBAB6113E0ED364AD6A1987
EA8B9FC63F2975CDA93BEE469B0810B72360BCD05AFCDA696046756D9850AEEB
66D566CFF72CAD95110D975B92FF5EA50EBCDF7E79C6AA864BBE3BE0BA1BDFAE
5C22A8CD416C3ACB4967F4FEC6C96F5101EEE86C76E76ACA4554E24A024E2B53
134B7BCA509B7974014C07DAD89BE20D3890376555C6A246A6B1F14B1C0AB228
3DD74C5B5E4EEC865F3FDF6E061403C4ACB7DB9CB8975371F62612FAB9AC6ADF
B17F00417474C681F8571C32FC363DB28AE74B9BD34837CAAF510C130D8B0F9E
3DD36E957231F91CC1825AD19BB99B35EC625ACB00ED02CFF6B442A2B0A50DA5
008479343EF6545734A0B6713C0C6A1A1908B9C79E5BA65FB6361CEA11A2C018
4E6D1C75719016833372E2FCF035EE0FDC63ED2249C9D861F708CAF658841B09
43C4C1D8B52029D4119B2A6C5ACF79F4F66634DE56E7337B3818F678B241227D
4F2383B7FFED8A50A6A02EB5AEDE79CFE274CC4DA2B7D7AA0A5D35EDDA333E51
755A2D24BBFA564202DE1BE479B3F169672AA5E291FE9EBE2341F6E0E91EF644
955C73C392999AD9E42610F9D20F5FA45FB59BA34EA70933285FC2AC725EB148
DA64F101A4EBB54557DF391444841EA0267D10E5A74743FE781F15FE758B2278
8DF9E1EF1C16C9D6C67BDB6C8E2204B56917BC1D6A6F35605929D6D790A3722F
71E964DFE307B1EDD299CF3C33DC7E66159A02029F70FDBC9B05BE580660FFF7
22FEF74743A1A411DFC9CB923620738A4E6466A69766510B3E0546199EA760C0
6AA4192335114915B039E75EBDF2BEF1DE7BD3FD361873A3BED6205487331672
2BA6D2B734DE06C3EDFF042A3DEBA61ED2114908FE67825C5EBC8C348AC98EE0
E7270BA2C7FA657327AB3BC64D0E5E8BFFDF5AB948F478C09C19AFD40B40CC5C
0F5016E9E8FE8A8C52F306F0BD8615E8FDAD048F87AE493FEDD3FBEE54B94FF9
8D6285197F37E3865CE6149FF3F07B59ED97168337708E78C9A99EFE3D6D0722
9D659DA29D9B7675AEE69C179EFB0D25609DE210DA97D39B1FFFF737725D8462
C5383C2C16DE25F2A36B10BF92FBF4379EA169D1A82B9248F6EA82511810F9CD
37D254925C84A04ADA7CA6ECEE16C37F75CFAF5BEDA53A8FA71A6D6572924589
858D36386D71EC1F3E01943029D1A56AA1923BF6DF3D26F87AEB84DE19D2A403
1FC08556E541326C198D6E8538D902151C317F7387C12541AB49A6B66970DFCC
812C54DD21C9DC3DCD0F76CCFFABD8FB7E5174025BC640A8163D7CA2D9529197
8126625B68886F01A3E641E18B814E989A875517C2D7C3CD1408C92E6D8D48DE
1AD3561685851373ABBE4C302DF344171A599F303CE5CF1E93198295B3AB0981
9570A6DB09F40B72530C062AE09947AA2190EB78274B594FA8044841B9290254
36198A2D3802EA6ABBC706B84818A989FF8397918B37E0C47654CA1D89B1136B
22AB7D2C0A557D55AC4EA1E104D656B2D2131F8A70EEA6AB8D3B27D7041ED7B0
F8633BE48673E58B327242C4AD2C33CD70CDE146BD1C5007191D5652EB429265
D0E7B59831EE48AC6A4EA4F22CEE3DE8CF067BF6955084B9C6FDA462F91FB508
0252D78BF5EE005CAACF6467F33A2B8B4AB311E06EA6697FAE78876020DC2DD8
709BB10280F2478D563280AA4100F07D0A2479AA5250FE00703724D02BB743BB
5C9DA905F4EB3267A0854376C0D3C129E43F98F2F9961BC5F31F91B850300EB0
C5E4C89473F0FCCE6B87408E7B3F542A66BA17B716040D41094877FC6179805B
B024D0DA0C227890BC5A403F346ABDA72E3992DD6E4474FB29EC14F8785FEBD9
6B2F78365DB2129CF3990FEE6377B9D8A760C77BDB87F10278D38752AE8572CA
0A7C12234118832EC8255E8D5F7BCD7E6370F15CBF860B9A441FC550FCD8D4A9
114AC9910FE2CFCB75D8962F32C8694E20BAC6F7BBAA3BF23027C2994E05491D
833008EED51B8926F348EAB379ACE6C346DA873743998D53B420B1B9CE653B26
2AF1216657BC10307C4394952B0E5DB03AE9B91C4EF63C9D6730F8B12FD9B78E
594388059BF970A8BAA938CAF457919C8B17E20F0F2A1345C683932A49DB34BF
130E409B718234FCB549DC1009A28667C25677E43067B9D8F3C2C628DAFDB5B9
1E0A08C50A2C6D28AF8E016B0E03892E8CC32BB53D668530B2DB04B8EB4564A7
ECF2509F6AC44102873BF9AF77B4658B6039FB4CADE161ED943435B236A98285
E25B9F3180B296E09A837C2B6BC1BD98874DDB6D8D93D0BA07283A390AA4D0F0
0D672644B75D212757988F33CB421DAB645BE0511A38E64BF6C273A0D78BEE53
8FCCD4F9851431BFBD4C928FA588D7A48FE5DD080D9A31655A3160B7CA129E0C
D365B9B2B5B0E0F656C64D20E52CED1E020E47838F152E4DA36FE79407AD3309
34F99F3AE25181C889B8EC2A6143AC34725DDA018095DFF879FCC88E818ACE8B
B99ECE5A782BB1CAFA395DA8FCAAE0E8F9563B5A9BF779A331683D6457FE5034
99AB3E2541A9D76E089D33E5E7E7B62DCCC64F1B8AF5CB995FF31E3DC9729CFF
3585C4D0CE43014C7B239E2D58EA2681B1BA21244B2484EBAAB536F546EF73AF
D6307B0947F4FA65D9F75C2D19D801DAACECAD40709BFBA8E672F2240E487E5B
F41AC54D1326D21CA9D4E16FD32826C7EFB72F14027104EDB160C5F26903D315
1AB9FC67D02C32F33EBE478B9EAF32ED97FF8DE5C1B9877B9BC300C7237FA4F6
50136EF572FFC125B1379AAD07B76C5C32626533550B801EF0075B1FB8E979FF
8D1A4ACC4AEA8ECF5C689BF65F3F2B48810E3FD989BF1A21D9AE96C0099A5ECD
FE7E5E3C89CA4F06CC1F1CD8E3DAD20BE3E1CF31576A4AC5AA98EFBF28CEAD56
7094DA87C4BDEA30D8220E16842FEC3D23677ABE842BF33F6FC5946B320BB4BF
936CB6664E15E217B56284E10ADFF2CC31B5D3824E0417EB6207F14F18EAEDD1
73C15A9A0F4AC57AEEBCFC2AC0F3D0649DCFEB9EE76580774AFA44169570AFD0
9E177B3EBAD131DD137D5436FE66288DF7257EC4B4F332FF5AE916075DFABE04
B0CF7F084E95AB2846EB169BAC29D5777482D9B8E12BCB0BFC37F4B8F8A68774
2600B09669E3D9088A9D8D76DA5391F60A62C4B0AC5C52669F93B0E722DE2B98
C259423A6DC312B4832DBFD3BF6549AA09C1A303A11F76045043221B2828F337
63A4FC61DB1C8C0DFF0B24F4EFA4A9AD1A649D2C7B5DEDD6F6412A0551AF6AFA
62DCC8DCD40CA853E99EB73264A0451F5636864BA679C21BA0EEA1FD7C841ABB
B5B06C64E3BDC1A924222EB9C1FEB94AB33E1167EA630D9DC6B2A75030AE5F21
B71C5F61D95442A1569DB52D046D42968D83A728EB2EFFF8A5ED13F9E8CA11C8
BC8275BFE3F95C6C9A8A8EFFD08541D64DB9B82B4C08141E2F14DC0EE3F826E8
8440BC16A715A265F0527A7559112C263C16A12B960E19AC9293709D38D91DB8
370894D6E7033E769850BD8AEF541DD6FF19877C36A05B99CF8145A72D76F4FC
394499B88E66DE8CE6593535D52483E62D21F3D39F97C416CB7C2B538245556C
1D77CF60A5E051D356EDD0CF256A5ED7D0FA7AE79E70E7EB98E5A12254694192
EB9E4310B701BCB276147658AE51B8B549B16FF201760AA23CC5BA9465D1A7D3
F1D24161F47859BD3ED2B2AB29C9D06D5282D4CF3551DA091EE043D0339DEEC8
08F3C62CEB5D6C5D83C3982A451674AC17180FE0620EB6AB68A6EEEB4FFB4BC3
125A5AC23860826BA6461B9367FD05ADF563EAE87159F05E353D86B7EA6F9D0D
C44786E37C5D86F9FC86F188C22841F6FB631CB9A260139FDA6AAF9FF93EA3EF
2A189797F198E07250F0FA57DDB4029339E22B37DC5182CD0593A0EAACF3CB6E
BAD1069EDCA0739F4AD2F632A1678230ECA344256E06FAAA4CE25B395DB1B422
F7BE937F4C64B32A6A9762EB4ADB1D5974EFBB322916238AE639550213514A6E
B99DB1346EFED6CA241542EDB64CBEF122704860782496ECBA894315D4D27262
326EB8704396F5BD4D159286E80B23D6F98E7A96C4235AFB4DB7E18E113C46ED
73D0C69F4DD3F93DA3A76D636C984741D807EFE331F9D10DCFDF555D5ACE7AC7
6EB7ECA6260011B5FB9D87FC9BBCC5E9E7F888FBF3B02C94A5BA225A802CF445
5CD285CE79F50E9D6D45AC1AE48C394690F4E4A237B056B1809915A2E800E03C
5D36F0906B304E42DA2027654B9831B66A1DE721B00C1F66EB21D48907156D63
A767459EEFF9951D2740ED1D3D57F2853F1D133CA8065C28FD00A672F7BA7A84
C2F943D0EC728ABD2361D0D05E2875F70635306988F7A6A19B380382DE382CFB
CEAEF2F83E7AF1FAFE628623D882440F492E8E9345D0BED77D2A1AA09C57EA37
33D67B158B29443F7506FCF74C117EAB92C662568325617F413017FB34DA99E1
3C393C5C0457A9D171D4239C4182547F3F40CEB291FCA1D771164B9C5382385F
9384372420D378F1516314345339F3EB987E4DA652E89F28A8D6BCAC3F4CDB0A
CECF4700BE46F2D3A88807042B4EA3AF8FA5FDB0363717B40CBAAEEA9F4DBFA8
814E84748DFCD613885D4B36DBF7D5DC5F33E09BF0CA297BD534512E1E7ECCF3
8D87FC3A1D4FE3BD700154F01B3D81752EC6A8E803B1D6A228F9E8B992DAFC38
ABCF4E050923144992EFF0EDD494BB800FC57707C2653D2397E3F2CA2D37DCFB
60A2D63DFEA116B4FA157BBB944AF27700F25092C6AFC00C6BC4CCAE4779BFB5
6B9ABD2DE9E79591E6B2D6833A82D96978C9AC7C2D5979F24B102AB17E3A48A8
05D613B0856C9B6B7F8DD0836AD7F030189DC544C1D0834F6CFB9D2872F43A36
A11A74BD866E4CAF5AF1E6C9B9ADC32F7631C3C0DDA52336EB2E664CCD78B310
AE52F61D7C6DBF112BAF2C4EF295E5BEF666DE166EBAB3975E1C6286BEF616D1
FB66DCB38EB808F433CEE9CEB6098E03607FD2670672E01B9B9C68644C51D223
8177CA28ED86421C0A15577FDBF48F78F2C53349502AED4317C9836054454B12
369D9AE3477F7DAD62DCD3D148BF0332BA772E3A96D9BCACDBE20B06F8C18E06
14156CD6EE6D17E966A2C710C50C7D7678C44F537743DAEE19755B319EF8D4BC
233DB0777DE6152D0A4FD38ACFE749651C75DB60ED64F9BF1C443E16E78AAE90
08EDBDE6B6629546A1609C95FF23D805631E9FC52F65D4A28FFDFFEF4D1E1B8F
02FA678BE012F327D97BDC1B10BC8BE43DED64875F3DBC089C5A31A6F4017997
9AA09C885CAD59EBC420F4D59BD75110D8CE7D06D9C72D051979CDE8B8EF515F
1EA4846DC18769266EFC481261185829186B9A9A768E4B698C5E87FA6F7DF685
DEDDAB8A86277E072D8866950DC7CE0337728AAB6A8FB162E28BB1DDF78DFB1A
3924F06C1058878906157F517F730AA9D71F70D43D7E642ED6A9650835441B8B
1AFF5B9274F966564941A538311447672A4B62B382B093257DA503FD05AC2B71
D456C70D6395BB9F6F850FCD3F909722A4C7BEAFD0B8FC15E5D53C5A8B4E4144
33BD5DB6997BE0C3673B3E96858FCE0BB9346278DA389B16F6FC140D476A7D70
7336E083B505D9C2B53EFDD9F34D51F9ACF431B7E5A562D1DC3E3BA99FEB3A7F
AF1F9A9883D135B492081D7D4E58A9C768BC31A16961598DC82C19FFF8285F9F
3C570239DC9077FB906A20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (ficheExoPS.dvi)
@start /Fa 205[31 50[{ TeXBase1Encoding ReEncodeFont }1
58.049 /Utopia-Regular rf /Fb 57[55 34[55 1[55 161[{}3
76.3802 /Fourier-Math-Symbols rf /Fc 152[38 24 4[43 97[{
 TeXBase1Encoding ReEncodeFont }3 76.3802 /Utopia-Italic
rf /Fe 22[40 111[40 40 2[48 28 34 34 46 47 45 49 72 24
2[24 1[41 1[40 46 38 46 42 18[56 7[45 13[43 43 43 43
43 43 43 43 2[21 46[{ TeXBase1Encoding ReEncodeFont }31
76.3802 /Utopia-Bold rf /Ff 22[98 118[74 1[116 3[53 6[98
3[99 16[114 1[148 9[148 1[123 66[{ TeXBase1Encoding ReEncodeFont }10
190.034 /Utopia-Regular rf /Fg 17[22 3[39 39 39 38 4[40
1[40 29[49 1[49 4[34 15[34 14[67 33[37 39 37 1[38 46
26 33 30 45 46 44 47 70 21 2[22 46 40 24 39 46 38 46
40 10[48 2[41 49 58 46 58 60 72 43 1[27 2[56 44 1[60
52 49 49 1[30 1[44 2[20 40 40 40 40 40 40 40 40 40 40
35 20 30 20 2[27 27 21 36[47 2[{ TeXBase1Encoding ReEncodeFont }72
76.3802 /Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 -354 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 -354 a 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1330 a
SDict begin H.S end
 -136 -1330 a -136 -1330
a
SDict begin H.R end
 -136 -1330 a -136 -1330 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136 -1330 a Black 0 TeXcolorgray
Black 0 TeXcolorgray -128 -718 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -718 a -128 -718
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -718 a -128 -718 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -718 a -128 -718 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128
-718 a -128 -718 a
SDict begin [/Count -0/Dest (section.0.1) cvn/Title (Pr\351parer le DNB)
/OUT pdfmark end
 -128 -718 a -128 -718 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -718
a -128 -718 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -718 a -128 -718 a
SDict begin H.S end
 -128 -718 a -128
-718 a
SDict begin 12 H.A end
 -128 -718 a -128 -718 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -718 a -128 -85 a


-128 -85 a -128 -85 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 332.83478 67.83875 ] concat

 pgfs



 0 setgray
 -128 -85
a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 494.36862 68.15623 lineto

 496.71696 68.15623 498.6206 66.25258 498.6206 63.90425 curveto

 498.6206 4.25198 lineto

 498.6206 1.90364 496.71696 0.0 494.36862 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 63.90425 lineto

 1.41731 65.4698 2.68643 66.7389 4.25198 66.7389 curveto

 494.36862 66.7389 lineto

 495.93417 66.7389 497.2033 65.4698 497.2033 63.90425 curveto

 497.2033 4.25198 lineto

 497.2033 2.68643 495.93417 1.41731 494.36862 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 59.6522 ] concat

 pgfs


 -128 -85 a

 -128 -85
a -128 -85 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 77.7134 8.18654 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 77.7134 8.18654 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 152.16693 16.3731 lineto

 153.96732 16.3731 155.42679 14.91362 155.42679 13.11324 curveto

 155.42679 3.25984 lineto

 155.42679 1.45946 153.96732 0.0 152.16693 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 152.16693 15.23923 lineto

 153.3411 15.23923 154.29292 14.2874 154.29292 13.11324 curveto

 154.29292 3.25984 lineto

 154.29292 2.08568 153.3411 1.13385 152.16693 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray
0.62 0.12 0.39 TeXcolorrgb -110 -85 a Fg(S\351ance)18
b(1.)91 b(N)n(otions)17 b(de)h(fonction)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -128 -85 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 -85 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 27.9544 ] concat

 pgfs


 0
TeXcolorgray -128 -278 a
SDict begin H.S end
 -128 -278 a -128 -278 a
SDict begin 12 H.A end
 -128
-278 a -128 -278 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.1) cvn /DEST pdfmark
end
 -128 -278 a 0.62 0.12 0.39 TeXcolorrgb
0.62 0.12 0.39 TeXcolorrgb 0.62 0.12 0.39 TeXcolorrgb
269 x Ff(P)n(r\351par)l(er)42 b(le)h(DNB)p 0 TeXcolorgray
0 TeXcolorgray -128 -85 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 36 a Fg(P)n(our)17 b(ses)h(32)h(ans)o(,)
f(Denis)f(a)g(achet\351)h(un)g(v\351lo)g(d)n('appar)q(tement)h(a\002n)e
(de)g(pouvoir)i(s)m('entr)o(a\356ner)f(pendant)g(l)o('hiver)-5
b(.)-128 135 y(La)18 b(fr\351quence)h(car)o(diaque)d(\(FC\))i(est)g(le)
f(nombr)o(e)h(de)f(pulsations)i(\(ou)f(battements\))g(du)g(c\234ur)f
(par)g(minute)o(.)-128 183 y
SDict begin H.S end
 -128 183 a -128 183 a
SDict begin 12 H.A end
 -128
183 a -128 183 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 183 a 0 TeXcolorgray -26 276 a
Fe(1.)p 0 TeXcolorgray 42 w Fg(Denis)g(veut)h(estimer)h(sa)f
(fr\351quence)g(car)o(diaque)f(:)g(en)h(quinze)g(secondes)o(,)g(il)g(a)
f(compt\351)i(18)f(pulsations)o(.)80 386 y(\300)f(quelle)i
(fr\351quence)f(car)o(diaque)o(,)f(expr)q(im\351e)h(en)g(pulsations)i
(par)d(minute)o(,)i(cela)e(corr)o(espond-il)9 b(?)-128
414 y
SDict begin H.S end
 -128 414 a -128 414 a
SDict begin 12 H.A end
 -128 414 a -128 414 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128
414 a 0 TeXcolorgray -26 507 a Fe(2.)p 0 TeXcolorgray
42 w Fg(S)o(on)22 b(v\351lo)g(est)g(\351quip\351)g(d)n('un)g(car)o
(diofr\351quencem\350tr)o(e)g(qui)f(lui)h(per)q(met)g(d)n('optimiser)h
(son)f(effor)q(t)f(en)g(enr)o(egistr)o(ant,)h(dans)g(ce)f(car)o(-)80
607 y(diofr\351quencem\350tr)o(e)o(,)e(toutes)h(les)e(pulsations)j(de)c
(son)i(coeur)-5 b(.)18 b(\300)g(un)g(moment)i(donn\351,)e(le)g(car)o
(diofr\351quencem\350tr)o(e)h(a)f(mesur\351)h(un)80 706
y(inter)q(valle)g(de)e(0,)8 b(8)19 b(seconde)f(entr)o(e)f(deux)h
(pulsations)o(.)80 817 y(C)o(alculer)g(la)g(fr\351quence)g(car)o
(diaque)f(qui)h(ser)o(a)g(af\002ch\351e)f(par)h(le)g(car)o
(diofr\351quencem\350tr)o(e)o(.)-128 845 y
SDict begin H.S end
 -128 845 a
-128 845 a
SDict begin 12 H.A end
 -128 845 a -128 845 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128 845 a 0 TeXcolorgray
-26 938 a Fe(3.)p 0 TeXcolorgray 42 w Fg(A)o(pr\350s)f(une)h(s\351ance)
g(d)n('entr)o(a\356nement,)i(le)e(car)o(diofr\351quencem\350tr)o(e)g
(lui)g(a)f(four)q(ni)h(les)g(r)o(enseignements)i(suivants)e(:)p
0 TeXcolorgray 0 TeXcolorgray 80 1039 3948 4 v 80 1298
4 260 v 184 1150 a Fe(N)n(ombr)o(e)d(de)h(pulsations)358
1250 y(enr)o(egistr\351es)p 1066 1298 V 1192 1150 a(F)m(r\351quence)e
(minimale)1361 1250 y(enr)o(egistr\351e)p 2052 1298 V
2185 1200 a(F)m(r\351quence)g(mo)n(yenne)p 3038 1298
V 3160 1150 a(F)m(r\351quence)g(maximale)3333 1250 y(enr)o(egistr\351e)
p 4024 1298 V 80 1301 3948 4 v 80 1471 4 170 v 488 1423
a Fg(3)e(640)p 1066 1471 V 1188 1422 a(65)18 b(pulsations/minute)p
2052 1471 V 225 w(130)h(pulsations/minute)p 3038 1471
V 204 w(182)g(pulsations/minute)p 4024 1471 V 80 1474
3948 4 v -128 1523 a
SDict begin H.S end
 -128 1523 a -128 1523 a
SDict begin 12 H.A end
 -128 1523
a -128 1523 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -128 1523 a 0 TeXcolorgray 126 1599 a Fg(\()p
Fe(a)p Fg(\))p 0 TeXcolorgray 41 w(Quelle)f(est)g(l)o('\351tendue)h
(des)f(fr\351quences)h(car)o(diaques)e(enr)o(egistr\351es)9
b(?)-128 1628 y
SDict begin H.S end
 -128 1628 a -128 1628 a
SDict begin 12 H.A end
 -128 1628 a -128
1628 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 1628 a 0 TeXcolorgray 121 1720 a Fg(\()p
Fe(b)p Fg(\))p 0 TeXcolorgray 42 w(Denis)17 b(n)-6 b('a)17
b(pas)h(chronom\351tr\351)g(la)g(dur\351e)f(de)g(son)h(entr)o
(a\356nement.)i(Quelle)e(a)g(\351t\351)g(cette)g(dur\351e)9
b(?)-128 1769 y
SDict begin H.S end
 -128 1769 a -128 1769 a
SDict begin 12 H.A end
 -128 1769 a -128
1769 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 1769 a 0 TeXcolorgray -26 1862 a Fe(4.)p
0 TeXcolorgray 42 w Fg(Denis)17 b(souhaite)h(conna\356tr)o(e)f(sa)g
(fr\351quence)h(car)o(diaque)e(maximale)i(conseill\351e)h(\(FCMC\))e
(a\002n)f(de)h(ne)g(pas)g(la)g(d\351passer)g(et)g(ainsi)h(de)80
1962 y(m\351nager)i(son)h(c\234ur)-5 b(.)21 b(La)f(FCMC)g(d)n('un)h
(individu)g(d\351pend)f(de)g(son)g(\342ge)i Fc(a)t Fg(,)e(expr)q
(im\351)h(en)f(ann\351es)o(,)i(elle)f(peut)g(s)m('obtenir)f(gr\342ce)g
(\340)f(la)80 2062 y(for)q(mule)f(suivante)h(\351tablie)f(par)f(Astr)o
(and)g(et)h(R)o(yhming)g(:)p 0 TeXcolorgray 0 TeXcolorgray
475 2162 3159 4 v 475 2332 4 170 v 528 2284 a(F)o(r\351quence)g(car)o
(diaque)f(maximale)i(conseill\351e)g(=)e(220)p Fb(\241)p
Fg(\342ge)o(.)p 3629 2332 V 475 2335 3159 4 v 80 2471
a(On)g(note)26 b Fc(f)19 b Fg(\()r Fc(a)t Fg(\))e(la)g(FCMC)h(en)g
(fonction)g(de)f(l)o('\342ge)j Fc(a)t Fg(,)e(on)f(a)g(donc)25
b Fc(f)19 b Fg(\()r Fc(a)t Fg(\))14 b Fb(\306)g Fg(220)c
Fb(\241)i Fc(a)t Fg(.)-128 2497 y
SDict begin H.S end
 -128 2497 a -128 2497
a
SDict begin 12 H.A end
 -128 2497 a -128 2497 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 2497 a 0 TeXcolorgray
126 2588 a Fg(\()p Fe(a)p Fg(\))p 0 TeXcolorgray 41 w(V\351r)q(i\002er)
17 b(que)h(la)f(FCMC)h(de)f(Denis)g(est)h(\351gale)g(\340)f(188)i
(pulsations/minute)o(.)-128 2618 y
SDict begin H.S end
 -128 2618 a -128 2618
a
SDict begin 12 H.A end
 -128 2618 a -128 2618 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -128 2618 a 0 TeXcolorgray
121 2709 a Fg(\()p Fe(b)p Fg(\))p 0 TeXcolorgray 42 w(C)o(ompar)o(er)e
(la)h(FCMC)g(de)f(Denis)g(avec)g(la)h(FCMC)g(d)n('une)g(personne)h(de)e
(15)h(ans)o(.)-128 2737 y
SDict begin H.S end
 -128 2737 a -128 2737 a
SDict begin 12 H.A end
 -128
2737 a -128 2737 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -128 2737 a 0 TeXcolorgray 130 2830
a Fg(\()p Fe(c)p Fg(\))p 0 TeXcolorgray 41 w(La)f(FCMC)h(d)n('une)g
(personne)h(est-elle)g(propor)q(tionnelle)g(\340)e(l)o('age)9
b(?)18 b(J)m(usti\002er)-5 b(.)-128 2856 y
SDict begin H.S end
 -128 2856
a -128 2856 a
SDict begin 12 H.A end
 -128 2856 a -128 2856 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -128 2856 a 0 TeXcolorgray
-26 2947 a Fe(5.)p 0 TeXcolorgray 42 w Fg(A)o(pr\350s)16
b(quelques)j(r)o(echer)o(ches)o(,)e(Denis)g(trouve)g(une)h(autr)o(e)e
(for)q(mule)i(per)q(mettant)g(d)n('obtenir)g(sa)f(FCMC)g(de)g(fa\347on)
g(plus)h(pr\351cise)o(.)f(S)o(i)82 3047 y Fc(a)k Fg(d\351signe)d(l)o
('\342ge)g(d)n('un)g(individu,)g(sa)g(FCMC)g(peut)g(\352tr)o(e)f
(calcul\351e)i(\340)e(l)o('aide)h(de)f(la)g(for)q(mule)i(de)e(Gellish)i
(:)p 0 TeXcolorgray 0 TeXcolorgray 277 3148 3553 4 v
277 3337 4 189 v 331 3266 a(F)o(r\351quence)f(car)o(diaque)e(maximale)j
(conseill\351e)h(=)d(191,)8 b(5)i Fb(\241)g Fg(0,)e(007)i
Fb(\243)g Fg(\342ge)2508 3232 y Fa(2)p 3827 3337 V 277
3340 3553 4 v 80 3475 a Fg(On)17 b(note)j Fc(g)10 b Fg(\()r
Fc(a)t Fg(\))16 b(la)i(FCMC)g(en)f(fonction)i(de)e(l)o('\342ge)j
Fc(a)t Fg(,)d(on)h(a)f(donc)82 3586 y Fc(g)10 b Fg(\()r
Fc(a)t Fg(\))j Fb(\306)h Fg(191,)8 b(5)i Fb(\241)g Fg(0,)e(007)i
Fb(\243)i Fc(a)890 3552 y Fa(2)930 3586 y Fg(.)80 3696
y(Denis)17 b(utilise)i(un)f(tableur)g(pour)g(compar)o(er)f(les)h
(r\351sultats)h(obtenus)f(\340)f(l)o('aide)h(des)g(deux)f(for)q(mules)i
(:)p 0 TeXcolorgray 0 TeXcolorgray 80 3795 3948 4 v 80
3954 4 160 v 133 3907 a(B2)p 566 3954 V 397 w(=220-A2)p
2295 3954 V 4024 3954 V 80 3958 3948 4 v 80 4128 4 170
v 269 4128 V 395 4069 a(A)p 566 4128 V 1407 4079 a(B)p
2295 4128 V 1679 w(C)p 4024 4128 V 80 4131 3948 4 v 80
4301 4 170 v 156 4242 a(1)p 269 4301 V 127 w(\302ge)f
Fc(a)p 566 4301 V 860 4252 a Fg(FCMC)26 b Fc(f)19 b Fg(\()r
Fc(a)t Fg(\))e(\(Astr)o(and)f(et)i(R)o(yhming\))p 2295
4301 V 807 w(FCMC)i Fc(g)10 b Fg(\()r Fc(a)t Fg(\))16
b(\(Gellish\))p 4024 4301 V 80 4304 3948 4 v 80 4474
4 170 v 156 4416 a(2)p 269 4474 V 183 w(30)p 566 4474
V 1371 4426 a(190)p 2295 4474 V 1579 w(185,2)p 4024 4474
V 80 4477 3948 4 v 80 4647 4 170 v 156 4589 a(3)p 269
4647 V 183 w(31)p 566 4647 V 1371 4599 a(189)p 2295 4647
V 1539 w(184,773)p 4024 4647 V 80 4650 3948 4 v 80 4820
4 170 v 156 4762 a(4)p 269 4820 V 183 w(32)p 566 4820
V 1371 4772 a(188)p 2295 4820 V 1539 w(184,332)p 4024
4820 V 80 4823 3948 4 v 80 4993 4 170 v 156 4935 a(5)p
269 4993 V 183 w(33)p 566 4993 V 1371 4945 a(187)p 2295
4993 V 1539 w(183,877)p 4024 4993 V 80 4996 3948 4 v
80 5132 a(Quelle)g(for)q(mule)h(faut-il)f(ins\351r)o(er)g(dans)f(la)h
(cellule)h(C2)e(puis)i(r)o(ecopier)e(vers)h(le)g(bas)o(,)f(pour)h
(pouvoir)g(compl\351ter)h(la)e(colonne)i(\253)12 b(FCMC)82
5231 y Fc(g)e Fg(\()r Fc(a)t Fg(\))16 b(\(Gellish\))e(\273)9
b(?)-128 5261 y
SDict begin H.S end
 -128 5261 a -128 5261 a
SDict begin 12 H.A end
 -128 5261 a -128
5261 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -128 5261 a 0 TeXcolorgray -26 5353 a Fe(6.)p
0 TeXcolorgray 42 w Fg(D\351ter)q(miner)18 b(l)o('image)g(de)g(31)g
(par)f(la)g(fonction)k Fc(g)10 b Fg(.)17 b(J)m(usti\002er)-5
b(.)-128 5382 y
SDict begin H.S end
 -128 5382 a -128 5382 a
SDict begin 12 H.A end
 -128 5382 a -128
5382 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -128 5382 a 0 TeXcolorgray -26 5474 a Fe(7.)p
0 TeXcolorgray 42 w Fg(D\351ter)q(miner)18 b(un)g(ant\351c\351dent)g
(de)f(188)i(par)e(la)g(fonction)27 b Fc(f)19 b Fg(.)e(J)m(usti\002er)-5
b(.)-128 5503 y
SDict begin H.S end
 -128 5503 a -128 5503 a
SDict begin 12 H.A end
 -128 5503 a -128
5503 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -128 5503 a 0 TeXcolorgray -26 5595 a Fe(8.)p
0 TeXcolorgray 42 w Fg(C)o(ompl\351ter)19 b(la)f(phr)o(ase)g(:)g(187)g
(est)g(.........................)q(....)q(...)q(....)q(....)q(....)q
(...)24 b(de)17 b(33)h(par)f(la)h(fonction)26 b Fc(f)19
b Fg(.)p 0 TeXcolorgray 3987 5856 a(1)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
