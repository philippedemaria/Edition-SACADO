%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: ficheExo.dvi
%%CreationDate: Fri Nov 10 21:18:11 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold MSAM10
%%+ Fourier-Math-Letters-Italic Utopia-Italic rsfs10
%%+ Fourier-Math-Symbols Fourier-Math-Extension
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ficheExo.ps ficheExo.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.10:2118
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Thu Nov 11 14:57:39 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 181 /parenleftbigg put
dup 182 /parenrightbigg put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 774} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCE17DCF5D3B7363F4BADDDE608D74
12F1DE5225D1BC9EF64A528CBEAEBAB7C5CA75B68EE58CD3BCF098C552B2A1FB
75BF21F58BCCBC9B908C31E373408147528CAD183940FA19AF923D72ADC1836E
428B74A5B3EBB55F5B6E33E8FFA3025EABB8E4A824D430EC40A31F0D72A210DD
75759CE62844F0F7D49BA3D4BD6BCF66449B9AFB9BE875F751E394E0A4FCA52C
D8C522586A8B3F3C5C7804B68E3155F94CC622FBDDBFAD41C583E43FDFD10651
DD5434E0FFB349BDD07170A0FFCF4250E226F07D9C2CB416DDB63CF486B33CC2
389BF90C05271234DD30D97680F6B41F2F0B28FE0C84893AC64BF925683F8DC5
3DF4B96610E5CED82A6C57C1FB68FDBC3B4B88424038E1CFDC34157B77F9B99C
F81577EDF8A82CE0C6DC7397945E5E5C192725215EEEF3F0D0C2221C24A174AE
4D6E8C782CA8C003D204EF2DDEA75F563DD5FB33095F872BC457CA43C979BB8B
2E1C6DB52A659C726EF3BE8A44E2B2B189665BAD3029377EF989951855031A46
35A0F75CBE72536243DDC09E4D3B70D9EC465BA6941D05D1D74BFF1C090C9996
15ED42A15A4C030CD533FCF76E5546E83980D04F8DD9962B460B3C60A99CD0FE
7B537712FE685EE1FE724EEA199D4838F94802526E95371E4CF3286C1E798B32
A642F4291525C954A6B2BDAEFE1DAD4CE1FB64C375A74D82F10CD0CF9F83475B
A369D5E80CAC68B65C1FBA3BBF19FD3F7506F865DED7E3C2BFCDCA8223A756E7
A64DBAE9A000A5B1A7BFDAD6C3B8499D996F3AFAFA8B8FD730689EB5A2F9863A
C37F150635D4704407F0211A155FCB44F71B3987A2536531AE0C9664D6B142C0
06BB67D226D4263EECC79DD1C5CD4851F5752F651EECAF9454709210949AED5B
D427C6498ABF42B20E46F937A0D0044901657C70C528F59DB4946F9F6F054F98
419225F9EF40664CFAF55C538677F458823C8D8AF1E9D27E6327FD830A1AB2C7
2FEEF0E20A80DDC073121EBCEF23AEFA3FEA86BEA3315A7C9A121488FAA51106
DD287878613598B34479EAA4844F3AB80A4F084E52729D059EAB739A2BAB9FCC
17A1208023EAF0720DD8C58F9E84A8A4CDC32D6F19EDF7973EBBA8E03E4C8D91
7F48BA47208F8A9D17849633FD445B6171DE7CD30EB039B9C8FD8D02B4BF310E
B297012E994CC68F79EB34EC4DDA2B085CC933EC4B0B3113BEF72E785B25398B
52832C249F2AB2B35D273481A3BFADFB38805A705961DBC1C44935614BDE223F
6C5605BE12B51CCA20DBCD59750F93D424AFE6C21A82812ACAD35638A2E80B1E
041CA9F112B30CF3787C7581CAF11A08561370F23B40E34709850E504FC3FECF
C7D41137A307A3A74C76AB58137C2F89BA80117A27AB50F39E0DA7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 163 /multiply put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707DD8E695DFCB39
B34B86F032A4A6B240502DB75B72BE9D700A58634D640FF97B71DAFB8AB659B1
338FEC8E10EF40D16AA1097E862F3B82461B9DB20AA43C33DEB7513BA34D41DF
2A3B058E6379ABC7183DD8BAC1B00408934B45791A9004F3045C4614563A89AA
1CBF2EA03360BE2280462BFB72E1097A0D02D4F62C2D973C118AE83D2923773D
BACFC9BDB8E0E69C5DE89090F0AE2B0B9D954F1B4446A43466143C9D279E0A55
61F967CA3474A9B7A277609FF6B0E9CB97CF1751C2030D2BB9C6E3B552FFE4DC
67C7186B5714DF5E96F33F79A68FAE3B9FD0C2390C47C55D302DB20117B73C12
97DAFAC6CF9A784D7C6A3BE919AE3336EC0E9B4B456D4BFD2932F65562DE60BF
CFDDA90A8A31CD66BE1172E8EA3839223803CAD2C35D30776B13D3A8832662A6
EB8D2DED4537DB61737DD813C293785BBBB15D960552B24024FA0CDBD8990C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
56D96BF032EBBF033E0EF740120C2233CC2743D049E701028BDF2D7A31991AD4
BAA84CE9FCDC5659BCB61EAE391914480BDA0F3774AAC46BC8489898F1AD73DE
D2F5538FB02F37E1BDAE49DB3929EA09C134C4512B3A1FE9844D760F1969CEA6
6E3224E9195F2B06705E64A21AD39595E6A6DEECDB228F0A48A4BA914858F47D
8DCA977B036E69FD1F8FE089974B22606DF4F87EF488D6C101B6C8EFA1B81A32
662937874153DAA00E6FD94CE8C3CB5A5F4BE904E1E588A434ED30FB66CB45E6
F9E51C0C6019B9E3E55B3ABF6DE68BB93B63EEBA9A3D2C8F8EC2CD2E63CF7D0E
39E700751C842FBF300786C92E5AC73F32D0ED08FAF48AED17DBEBA4DD111D85
204088CB97755F3124E283462DDB1F14815707AFCA1CD02925F5FAB569ADFA91
0C9F03958FC621521756C6D7B86A1EF25709A8696D992A9E4A686E21504A253F
442DE07FD007C2E6FB4A94952F11B77D01DC1095F93FBB61CA17259AF5BD54C2
DC4C5B7ABE204302AD80B6BB5C196B3AD243621C6910F32F1C3D324A5983198F
1895326FAF275670CC65C70B8A6E2BD241B993D1A05CD06352E7E06F7AA4811D
81029AA4C97ABD7C12E493A4765119D3BEC708FC26DFFB70E37A26C6F1B016BB
A5D31D476E2110D3F3DA32FF2B70B21AC6601146907D854D6A30FDD7FCF1E12B
16DA8FA677FC50638BB19E4D7157406A66627E42F2B701DFB6C4E8A0BD65C5D2
D5F4EFF5D60690A278917A0BDAAFB148FCE2FA793F7BED084B76C249E31F1DB4
3FF0AC533EB8FC958748DF8D7366DBE6B6F7FAB3A216EE5DFB6E5EC55BB7CEBF
9A8EE79FBD4DD4180205F6835AA84A2DADCDE072C0C1A49E900D4416073A9F1E
34262CAA83534FE761D83199040AB64ED9FEAEDAA325B6EABABC44991BCE9BCA
F917F48569083D3ACB37910B37FF941D2BD6B8AC2EAA198662A7BABEA8C3C2DD
56CFCE93C8E10031A8D199E57B11FCE65F1E5C1CF11F62E7C08FEDAD541EB171
2853B717ECB748889FD9D7D974F591CF933BD8B56600839DB5076676B9BEC937
96EAA17B394188BAC687845150CCDF19619E496C8670607DAED28109BFB69534
D6E2FC972E3DF1E89397260C39A7CF8F5B0DEF99EB9330FD1D0370F2B2400549
BAA570F9691A2E501EAEE5561B09648576633F16FA099A45612CC46E07875E4F
F0E31DF209CDDCBFD6063379D9963FC18B01442CE80866F25E94E3DFCCDD4A5F
AC0B6AF8B46A5B8C156B6555F6E1BEFA574643EADC08BA36A2EF07BB0AB2CE6C
615241BCB90CB54A97F10A7E363AFC6BE53D4AE29BA57EA54276F94A5D1496B9
06E3EE7418BC637BF988F1E2EBC7191FBEFD510BEFD0B54922587125E8C51B54
B5C793B717743C7AF418C7939D6A6B4631CCEFEC324FD2DFA58C52BA94D85624
8B51C5D752678FC5D929DEC542547DFFAFA5F48F44FD6752FBB0048647DD26E1
0F2E7E9DF8620E9DA7D2E4EDB75C29F60512FC38ABC1F2A618F4BD92F3E95CBE
949EF4B833D951CE840F1F0F037DDF207939C4448BA75DD37A909F53FAC002F6
8E91AA6F46ED462CA6CE176300D5B2331402015614C10AB1FEDA92721CAE69AE
F32464B010723571D8AAE294BEB691721C1ADCE39B9A7EA6E91A9D7FA96F8F97
E93304BA3758C1B06394DC635B06A2153CA4D57613D38B1C3E822D505080B455
5FE347C9CA87F12CD54F258F2DAC9F55768AE95D4CD1FF3956619532930B6342
F1B4A300048C778F0F49D5F8DE91A2A94C8FB20F075DB2119E8D485D9C4AE759
5EB2019448036DC6131B6F3F968A85D2F47E48E125797BB4BF684D68A31683DA
291DCED20F02C44D6A7E61502758C8C2CDF3D182C0E35AC441068D6CF4D62EEE
7E79CCDC64A183E2F00C4D766B9F3174B16A0834B6BC81B8345A410571ECA819
C545D9890F48F2D041BD07CBD3148AF69215DAF462071428116CB3E3E06966BB
D81C7636A79E102F42CBBD069BC218F22D6449E14D4093C51EBC67E17B148F05
FF52FB15EA4554B6B7E982BCC5350CF110EE0ECC75DF427BD7225030337A86FF
A7A4E0AB0DEA3A8BE3B6858465A82A629B8CAF956D3F8DFC218085FA97FE682F
502BB42C91CF6C6CAD374FBDBF3D8D348873F36A0A127412BED781F89AAEE657
5A26F7631C8EFAF2968CA1B20C3D6DEF53574FC7398EDDB75FBE3D92E46DDB1C
8C0DE7F8FBFBD36B2031894C3C4DBB599E89D8D3B3120920D7F869F3ACCF715E
634689295358EF4C7250AEED2824980D090E5F37B5BBAD95906ACDEF1A0FB984
95B2E4CD759B2F6F443D3926DCB5AF6608801F34E16CC0C8448562ED00E19040
028000C6B41E414BCD1125874061D3B4B6B0F86EAD51C00E0300CED68405A82F
27DC0F0D90E752802DC0177BA646A3635D2AE339371EA3EA711CE0B8B8BECA1B
EA5C673FA222FFE372984ECEA0E376AE07C5573991685E7147AFD43403CE8211
CA278C4807BFCEDF36B405BA27F77FD3656B43E2DDB4BB4E0251322554043464
5AD290F446B1ACCC064A761EC9CD13B520251C02B0170BF02E65184BBFB937DC
63F3C61A19AF5438A780AA50A66762967822CBF96624995D0873FD7339AF57CF
BEE80B1EB0FAC9D0D7CDB0BFBE5049C3FBEA1B9E4947FF31DBB8CADC9BA668F4
DD59933C8B4E514D82F03A70F4AC632AA21A60A21E04F139C499CC23139F42FF
4C40D82AE0218C323E445C229B5484A92692ECB856495283507E3709AD8904FE
0CDB65F51967EF7E3BD11C39A9A515D3F7DFEC0195E99B6E75B942FBA2C6DB9B
78E1AE8AA25526F787B53096CA41673A87B476B9437C16D275CA4EC27770554D
807F7DE678CDC6C0FACAF5F96C90CE22EF906079EF0E95DCC8CB8B3C0A6E645D
04CB109E7868C174E676B34880CA4F8325DAA94D3E27D16964F9A37CFD27E01C
5BB02CF005A7F126649BD8516AF2CBA740EB436367A784AF0AFBC82F1DCF849E
0973F04DBECD07E9CA1F47AA86C4B6DC49DBB64B20AEC564B8FD072464C0F7A9
EE6D9E520581F7DCE884A79A290E96FB9A2E6FBEF785AF8D9080EC153D8AD84C
D2B6EE7916B8F61E80F03C6AEEA4E8129F33137157A0E2A3DF3C2ED508A566A5
48F1F5EE7CB6BD6367C22DF911F43C1B4F699ACF11B6ADE903B4730CB2075F86
019CCEF8F3649C5C1B2502D683BD000873D8B6C273D9B94FA0EF759C005F8325
C89AB1AEA1959666FDEEAB259254CC4305A9FE81079C1EF2823D1BDA81D0F7EA
29949F213EB8A9E163BF413466BC11BD75494DB3E559C5F5A07C0EB7935DB8F6
08C04A8FA12C16746FD49F830062209A941C0C4A0A0099D02BE57D8C2CF498FE
709B9447BB18F4174BD10992024B8AE21D8E8259A2999D3B57B8F70AA21888E2
5B6E28CEEA89768A63E82B5BE1AD90B10515B518D59BE841A5B685F48F4E3A7F
0AF2DD0CCE72F9F69BBD6D5EEAA37E3E6F4F920DE9C012E610B9B6A5732CD542
07DE9ABED6F364260C4E8875110E2F94ED9D6F1DE7D8DEA272B3F3091ABFF5D3
1C9C6C0FC72DFE00FF0190FA4820DCC80E51AF95AE5C97D39E333C3677E61347
CF89DF395092244E42D1749C64E0E298CFC60EC533C57E3FAAFB89D8B8824D2C
9D5B6C8D5ADCE25EF353CF5CF7E88BDADAC3F0413DDB72DB3C736FACA7F6BDE4
C07A470EC6591FCF84832EC7E7AAEDFB196606309ABF681F9CE1D6E9CC9FB78D
BF167D10E40E9EC21C54F1E9D10C1C7D4A30381E07F915B6840E37A7D4CD5327
33692C4AEB882B5E360E01C634BB80A6425EBE5736A6A5171BD2C1477D781DDF
9EE3A5D0AC6373FA84D6FCE9FC03A0E65C015DD29175BA402619D48010FA4740
C5154242C43C5AC2A55FDF7F9BF8237387DCC63EC5B3736B42A01C8B3074060D
28AC946EFC2DA5BCBC17ED2794C0759CDD1BF9EF8341DDE632D7AD1A58F4F0AB
B4F758E91796C916FAFE6A23FC8529F41DB9F7A83F13DFC8A21B75F34987BA6A
B57981087E32ADC50679642ED6A97D43741F5498483F0EF407E64BDF800ADC6A
F87683F0FBC6C4BFEFD3D410330FA1D06FE18314DF00AB03E35F117363E69D53
6D99057E3590993D0CE333B192BA917D5B91FCCEBF45A9DA7EF41222F36D76F9
4A5249C5FD6FD166FABC8BEFEEAD4FD9C7D2F931272302BC8FA4B070EE810A37
654375371D012A4BF947782826C52949BA95B83F8F0CF61F30833F426DF9295C
C349484222A9FCD5027A5F84AE6C08E4B22525D91904827B60B86EDFDBA1971E
39FD551A0C25634F90A9F3FD1AFB8E35445C0CA503DCE487958698D5F6153265
0D0B4FECB6022CF59825D71AEEBFE1708B4377FFC200FB38A6E36212EDE6D70A
3C3FD35BC626ED455E1B6282D3DBD1EA637775BCC1B2CDC64A2215D2F2204DF7
2CCD4FD69BD0386D4FCE408B08A87C049826CA2F6BD199FD55D13BBF378D181B
BF4F3731FEA4666A896E5079721BAF119F4C412CB12DCA76A8B4C0F7F5E7B27E
D27072526295892F8AB2246639DD75005CB9C7B1E4411F3B476F8937409FC21D
D326726F95E3FC9DBA6673C707C4C35DAEA5041C654A407541621DF0986EF4AB
4C970918C3792610A44CB1CF3A553C2A3D608C9394954B53E271A305ACFE825E
4A301C6462D801BC8E25147CA7FFFF1A88AEC671E8FB0155EAF284D7424BCAD8
24AD453D006CF3E86A41C5FB5F7C0C0D306BD2180CD198212EA6E2FD72E89528
CD3CBAC412054B57FED270E95AF81B1D688DDA59FFFE6CA1029BD6CC3E039BD0
96A56762452E38A84168B5BD1641F4FF19080C55E0BF67D8277BDD2E837EBB44
8D1C93B75DB2174A712F0A2CA7C579EA6EF9374C88B3B75C42C2E515BDB3D6B2
AAD079DB6B4895E3ED94BF04685A3C5878851829767CBE7858F5790BC86D1A21
F74E3C696DDC7CC881A1998FD53CC14CA1C06926408B0AC5D66C3DBFE6419620
B6441B03DFC2EA338CF2159361BB0063EFEAC267876280CF987C7878F01F89F1
8028ECA86DBCD675247D00F55E9F16BAB98C3DA314BCEB9D11670BA89B29BF0F
08F586A8589281411241DE390FE335A955C6F53CCC12012D47C29BF82E5DC866
95E0A64FB79CF0E01080595C83054F2F63B73A83A2F86BC191CF26686378A9B1
FE313B0566E93F11D2F1DAFB42515935895432BE5777AFDE94E6F54B4AE76EDE
928526F8EA1A1D4096EF1F89F2060E567852027423CA325A76ED52B315F68816
53677137888ED6C067C0F694AFDE8C03B269FCF77C04DB06ABF8122E7D0A8CA1
4F7638DDEB6E8824E5D70B187654D7B6FD767FE93964007E1320966D1E6DF77D
4A4FB4FBEA9ECF3C33DCFDB71FA151BFE2854107F555F08B7314FF9A0E66AE00
C1CA5E0AB183765B71717C60C0BFD4064C45834676534794CEAB0A4930567A87
7E6D22E6321DDDA78FA4AE4EFDB0A7BA50552271020B0915C747921A2AF791CF
64CF7BD7A4B7009B1D93920DD493295AE4BE5DB7725A36C427F7A73A9BCF4368
2604ED2820EAFB8A072C6AC3B3D15931842B95B7A4AAB0805E4C0A30466DD6A2
8B95A62341E91238E4D2C6CF7D4588A4C892FFCCDA117BA616B1432225CA47DC
A70C5F04A2215337FCA53EE11776CFB75A80A16EF029A45449059C7FFE2D1A17
D7808F467090058FD31F831B9027846643DDF6540B30BDB31A8646DEB0484CB0
98B4D22C23554D5833833818CCA974673C28618CAB751C40FB66573A5E9DB593
61669994B74C3FC27E19686B7181D3574B11C5F16884AD88A8360779EFFA0663
A539E9A5E9FEDEFD6748EA8FA43A98760A5030585DB595AD7D1239E34711ADD3
753587DB2DF74C737B400A8DB0E6B555EE5EA7AD4D458BDF3DE1588EF474D75D
FE1ACBAD9691D42235571DB98E4DA0CCE6C45310F17678A40F36018BDE9C7D3C
91823B03DC65FCDD8B97626FE71D312FC0FC0162C6127EFFAE4961EF241AC963
FF658A87CF9D8AA0088C8AE188FB193B081B338714B5277CD5CF8FD053E64028
F8FFC6DDE8E2007C24E3972BE90690A80DF614C0C655A1FE092B93B56FB281A9
8D2FFB958D7020675B3C8AD0A810731EF102F8CFE88887542F94750DC5001B5C
38F173A5EE5389A34A7FDD85578EC5D5769AC8C9FAE869F6C5299D997BDA9BB2
DDF2829CC786602B5B25C45A4C89A7AACAD5B947EB79F2DDDF33386D6D4EEC20
824BD26409B9BA12724660FE31D24EF556CE9C161D1DFED4E72EC8B5A41E8730
A3DA6920EB098C752DFDCA4C0F485757A77F0816B9E00603DA2CDC09F9077349
C9660A04CCCD114D834B2D485CAF3459EB0928F84166B3699C3FF6962B8CEB6C
A0D55AD7C590C73BB5F44FFD6C3408EC0A636218321056A367508E159F2B9C85
52040865F3C536C45CCF48CA297980C68340D26D1E27C8EBB62E0FBCE6CACFC9
3D546623433B3E083DD36939539F4D6084F71B52822FCEA099F67036198FE44E
70BE2EC90FA17906B6511C6118120FE56BEEA38DB06BB92EC90FA17906B6511C
6118120FE56BEEA38DB06BB86086347811F7C8B1580AA7E3AD8CEC06549E93F6
26C14C5465CBC7E76111744C5A8B25FE56025D1FCEE2A2463165EB846FE48A7B
088573FC804919E0EF7748291572775418912CECB8E2449B0ED3852DB08089F2
42AEDE11879DC5D83AB2C543FE2C17CD43FFA39A2026680DE81F21EEFD8024BB
1E07D4D780571678044A171E0D98A54E3BEFAD5341A8D2ADA9B1E9383BD37D69
BE02ED8D5E338CBD396A3D4E4E5B8240DA839715BB3FAC1D8FA05134D14D0B4E
4F7ED9DB8797D61ACC003C7D36986A351791A3503D4734EEA836994DC96A2610
4941369F323CD7F2A9CD656F8761C0638906CDA1889B028E46ACD0A28749B617
75170FB57B1ED3347F96892F8130A2439EF269056C72BAC8B8450FF8FAB0E7A9
FC00251FE20A5C8EFD0B79E121066B478810F387E77F6E7D6AA32DF46C7EC617
5BE61D1F7414C75EE70F5A9149BCF4CBEFE16B7E87234F09C3FC8809BB22DD64
75231EFCBDD4AFB5A7367877F8B71086C544011098AB8ACFB5FE284C606B6D4A
9BDD2AC51B139ADD2095F3FFA77D8882723654C4992EA47CC2297A6FF9A466B5
5DB3AE15BF6B539B6A9F085962F84263AA24F503511BC16C50353B247310B945
8B6B796FD92B4BF8632BDB6F6E61D7C305E50B2AB081EEFC8242F170F39552FC
E544AAD5E290401224A29D191E4AC889FE9339216A412094119F6C49896D7407
CDF9F4EF1DEA2159AB1EBC886B05271731D7156C5ED849CE2C6DB03EDCDF27BA
4D42250851A8E78261DD9D398C9A8999846395865C8C87AA5A7FD746F1D778E7
16DDA1CF9DDCBED08AB579ED39E37A53C09A65D29CCD056876F769E7E4DD96E3
3E7E9F5D278115EB10065DCCA25D22704DDEE20A86AD85B58BC9857D33CFA97B
8F05B3EA1F686B0782FF750829FFB85D5941898E330FB0E5C3F4CB0D1E09E891
522400632982E58BB42FEB8DA637CF95E912647E74A2438147C5AFFC077FFF14
28AC9051C9F598EB9149B34720B666C63F84D1F9A19FDC97DAA9717E36AA2A7A
4340DD0404B75952EB91DEC576BE278B8BF95F40966FC97944978E98BC5C4727
B8F99841EADD17536ED75824AC5B9455691E4207DE4A92D008A8C68A1C76B8A0
EDE255ED1A39A3B0979DD2F57766334E2393889A2979F5E18227FD9EC4E3D9C2
8D7FA33129E5C2C1AD12DA6DCD618196E2F4B40C5025CDD33F14CCED8FF7398A
F4B0FAD31E0637274D9BEB6C47CE302C71DE5E8ABE9398BC49A602F48375A7D7
5BC34D608BA5AAEA3B22F9FD0870F6FABAD47CA484F640B2337BD16D6007D8C5
269066827B3285B53255A22E903A1C4E266C1541D7D2166C35FB52308AE96C1F
7316F32F9F6D891EC244814C2849EB8B9EE253F31B94FB5B60865AF75FA14036
283A4813974D2061E7E1BD9828BDE367D124F6317876B72A17DD1F106A1DCA83
3F5CE1EE3D8A68B3B83B95A9235CAF38DB6592B324EA15EDCBCCDF3FA2134F98
AD0A7D9EFCC1760E9C6C4A959298984C7D2D77FFA817CD4241EC91235F9F1BA0
7A5A482C1EE216508A848C9CC47F9A68707004D817AB38790E872A2DB40F6AE8
859CA5AF7A016D3C770C098C6212DFABE11A9838F438ED351815A9590205A3B3
334814C8A8996D839C743A935E34F05EA975E6F8521F35DD3F42B7750C61CA5B
79EF5203F3FFC1C5E472D5998FCA837CAE7AC9CC2B078FF24DFE11E5699F28C6
2F69AEA12EA9B138E8BC885824D7CF6C048BE60E74EBF41B36CC66479F8DAF9F
AE38EAEFB2359883C6174359BBDEC4A7BECE3475109E22CDF5F216B53410DF56
83610586A88CA9196E604BAA0ABD1F7A6FE6997008844048B62355D4FAD134E4
D4B55DA02BCFA06B10ECA24348652BC42BF109FB34C3F9CB5746937FC7AEFCD3
19C14ECCB3D3E9E8CFBC3571CF312E7994FECA994C0D133470733B2C23FCEA72
9292D1A9E5E9BAE8D6E6E9F20A75E5187B8716270F6E766A7FC70743C30049BF
62E61941B0CF628339AAF4718BFD8F77E7664039447C0B2F450511B5FE3EAF7D
399E7C89A31A4EBF24FF7D7875B2D0D811D4D28784C5B6E3EDD591612F74AC68
42B227A44B5017A05D5E4B317DD10A5EEF581028B7965AF32EB6F0AC1524196E
6CECFE99EDD2B9C1ED812F3CFCDEE2E4EEFF52CA15459DE3999B1F8548E7EA7D
B05198142F15FAB71226CD237F79E9F74161BC8CF6172098AA76CD43F5367114
8BE4DE6BD052FF44ECC8AB77CF9CCE48C205B5D346F644A39581BD6B5563B3A0
FE97C12450543A485B7970AEA4E44DD23AD57133BE7241517246EA007D86857F
2201806A33489D99E818AF500BEAF290C8CD73C9939457589CAF87434E2A44D9
D6FC2BB2A5A27271D8F263249B854A7E8682A7A6649545915C6A9FAB3C7041ED
BDD562A05B6823BC95500A93DDDC1EA9AE966E1C67DB232AFB37833DD53B75B0
6DA555694D8FE46F6F5D13BB904A49D6562DB2B136760507CA54A84EE9F481AA
2197BA3C3529050AA9608B7826A5D02468C3B93C5BBA0015CA03FA760988A0A4
4262E83B40A50C040563C37154D0872A222BDA1F14FF15872C540FAB2C4995EE
0788CBAE0C07ACD6539BD633F3DECEDA8B484FD4E88676342C1C7E6FB68294FD
F4AE8C77CFAA509FC0A8668A139C73544CFDCE9847961F810D99B483611309B9
91A8B72030A9AFB290EA65527E8C8F0BEA57F210E971961454C21AB1521550E6
317C0B3985DE4F4EB8C79F3FF3AC9B170D19C2F02F1E810EFD59CDAE3C25F6F4
1132005DC0E3509B656D69C282B4B49CAE5BDD5CCDB5EDF6FF4592591AC11D16
65C7CD5562F3FDD502B5622919C81855B5026486714D0E8CEDA9F2CB0472CB80
5AA9A7633BCB4C01670A0518BA88600502F76CEAFCD1246A7A08178A078B3DF0
0B0BFC2C39A9B9E5B204745C76D519E4EB78BEFE17C92580675360106EE91ACF
A9F62FEB38442A179F2CFF57309C7872532CC982DF1C2240BDA3F0BA53B2D0F1
C8B8B3873F221BE4BB40B79EF86E595F1BA1CC48C46BA164AC7BD24DE5DF820F
1E2AEE4A8913F6B24289312E74FA9C1A8A64C98FAB5A70DE29AC721A4F945E24
9D2CF36307D092DCC56A202708F6356D524A8E1CF8E4497211E8F1CFF6178361
4A0D178B7B536FFAA648A9822FEE696F566A8359795E1BC74156AE3635B01F08
1084D91C7A71C06148C4FDC909AFE124A2C41826C942C841E337ADD8ED5D7199
1FE6540270DB3D9AA1F3C16ED668A7564C18D44EDD276A0D7717D07A1879F88A
A4114FB265E238F5DD12206DE2C55B2908E3306E02C345C6C6577EA6EB47A290
377F04F512379B660FE3A9672F0FC5F4F3B999BB09D42E819B26D8CD24D06745
B8E7BE98428D5D811C6DB6703621119D8F4BF422EFC4BBE2016A73BA09FCDC76
3E825A167FD23E1BFE1487EAF3CFA44B7F51D4514DD6E213BF34A0CA4A814D82
7CC62A761566705507BFE1D6AF8E0B622B7FF1AB526DF20984B44BB38D99A959
87909D8BE4704E5130FB7B2F032A497E7B2C82AB9527D79FBF1E9DD09B987DEC
1E8738CCA258A2269CF668C650944268B357434FEC64AA1A5B3C76F0C2825E3D
E32D75ADC258892B2E6511C1A179E2C20BA5751C40FB66573A5E9DB593616699
94B74C3FC09B7AA416EDEE538356A8740617775DCEA57FFDEEC86B53059B9CBC
D1A44DD4E7B09BD9863F17A1121A92D28C815DCD63D128655E91C461F6B783B2
276CA8D07F2C6C1A607250FC48C05E81343078B2D1815F1B0A2DEACE5F8F357A
492E4B62B95901F80AF1147A96B87971F17C0CE67D79E606FE8F670CD0A5FED5
342B8B563BD793C4EE7E0D85D04F04CAE03111F8AFAC6671467636D83653EAC2
C5F0B5ED6AD36FE68D4A8DBAD50FE8FFA286DB0547BE9381711933A78B24D507
0DC35DD368D54BA92B31F13DE850ED9B671A9E38F5BD19E5021E22741D4708AC
CA6489C4B6E62FF34428D21911418F6AE8152C6A0D9B328A3C5BC10FB85BCCE4
3D55F464284FD1619FDCAD44FEC6374D3FB2EBA95AAE309813ED71F541494D48
EC9C055921327833A0199A2BE73FE03A2F93955813FF95D9A331CD3F9061E581
06796971C5BD13C02A993133FEBEE78D8EBA8CEFD632227FFD8F3024D1EFFF2E
70FDC75BC7D133005829F907053800F373AFD0BDF4153171D16DAEBBC21D5D30
F8BA76F9D64E0036DAE3ECCE2D84BE12A8974CEBE37462D5E4B46684B22E8267
EF048D96773BD613FC2156756F0807345353372CBB487A301778796F0B5278C6
D19053BD75576035A9B6F4ACFF2BA83ACE4C36FBB220B57268643AEDC4E5FC48
C9D97F8928C112930AFACC30FB6B7359BEEF25834C951FC8EA1C31DBD041961A
FED293BE20F0299ABCE1114314C13B62E32D335DBE159FBAAEDFFA556E6AA50F
0DB26F24EBF78DABCBB465B94B49B09D9E46169C6CBEDFA167188677530BE9CC
A5451C862E5774441A6A6FA7827F5C0091018A2243CCAEA82923CF06066DF134
80F24226408633B043F1C6CAEF95B12FF35F16DCF2C714A4AA40A28301EF14B0
3BE46DBCA9046A3CB8496969F5A89E99F3B01F051B696B051EC99AEEE7D11B53
8D32343AEA026D18728BA17460AAE02AF4E541725366047EA36225AAC87007FB
313585F4B1089B0B9FBD16E60E919A1DF7CF270F3631FC50D103C3E680796CB0
4CB71146094079A5AC179E32DA38D3C903A0A296D4C43CD1F790CC20C247
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8AD297F7A4259C35B7B9B679A509FB97F10F2BA3521085B1D5
104D43AFAED420272E0DB15AAF65567BAB2B030932584E4DE6150645266166F9
0B4254E51CEBB8AF1DF197332712C1CC25F4C90694E0A0062BC15C19C34ED8BE
EE6370E093DC61E10F0D21D131383155AA57EF3F1EC3BFE4945DCDAED151A00A
04E5D912729296F062120371843F314B657231B7CF6FC06B2A8B51B22B3D70DB
35304CBEBE59C2179D17F62B1EE25D68446270CB6EAECAEB45B3598BC094C41A
4D40F4706DB41E9274E5831F514E4CAC1BFFFB8EE79D8569D409F1D01FDD7B75
A18DB9B18325DFD559D8CABC65EC82F51AD87E4DBA547A683DFFE0652F3C4865
D9976699955A25C171EFF92D0D809443067F25110B5DBEF8F6D2103C6684E59E
EFFC5B79E844F77579B2C40B8F3B84928A6BDF989D2A564050C8E934363E291B
F1578CB5A8717162AAE4B14DB92CC9CF991FFF370B006B496FCB64AC49A3C48F
0C0424303A7A7951A233333A3BE94FA1259DBDBE4C114CA55F4FBCF553F70268
296E341B8D3B1DB27ABBAEB637F0D5127A02509E3232C1145ED3E5D1F0F33BDA
FB319C324214056FEAFA2691274EDA6302837A4528B62F334A3E257B19DC3CF4
1DF8AB287F292308001FAAAF21D906B19CA3F1F794FA42FBD893014EA9CE6156
337699AEB3705F125F62AF90BB95CDC84E8734BAAD3F7DD4F42C691DAA85EC4C
4EAE3F2FC08C02094C9B048E22159F03C61FA951B94CCCD146465DAD56BEBDA3
58B1A86F22F9D8A553C8BD3A596CA2D0522DADAF9CAF9DDB0EE7F959BF01C879
64425C02531EA5A60DEDB0C4A49F092EC51766598E05348B8E01E1D8E51BCDAC
209CFB3498B929FFA37D4E6D39A925B1655FC6978A2CE77A4011C078088440B5
A114C8CB4054FBD7C44568B0BD8F2CDB8D7EF20FF6A2EC5DFC975685E6DE411B
6C3FCED68405A82F27DC0F0D90E751DD5038099254AAF11D0A1A85BBF1DE986B
9B360CE21953C9CF73316EA2A943127AD5132A1FB7B01DB0660096E717906132
00E55824E00E0D4FAA5B6D78C704FBEC6FAB9721AE2A6C6506329E568BA3CB0F
A46A3146AAFE1B1D3E11315D0D65045BC4D24B30FAADB13F3159D3ACD83FDF18
FE566A2D0CE4EFF0A7A0AFCD434ECD41B5DE896F7F3E438AE549D96008CFCA4F
7EF98A4A938A92C4C5524E8EDCF3930B3F1A9802EF63E38FF1E99D5CDB235574
DBC778254D9E60BFE519495E44EF6CC40E42266DEA3C252D4380584F1B89FA40
0DB6578767B6C90141B0FFDFE744BA9E20D39F00FA65F6DFB546481EBEA1C9B8
FB083527D12986904611C144BA805249BFB4F94A2A58B7111F157C6054000BC2
B7B0B0FDE5A8AC4E54C595C3703E2F99D50D46553E5D7CEE8FD20DF4F38BEE8D
F503F96214F432DA676210C4F8F7638676851A0C9D27177730DE06196E907B6E
36E659BCC6810BDD121279D990192E90A41D2D9B708E0B829B1083F0BF2F93D1
323F59739E83CE1430E49DA26AAE007166DD2F49858BC3638F0B8FD51EDC9B17
BA301F7D3CF3AF2307B191C571E5CC7EB308016E6C6DDE465219877A6FFA5679
C50162FB62DD391067F6981EAA7F8D15F5A74F618FDA511BCF615273D597F75A
DF3AD8FEB9231F68CD19BA8FC488444542742A32C73865D83810A3946904477A
22C4EEA854478E4DDD413871CAAB11FBCD9D62CDB0E3B08577C2DF900A4AC3F8
9150594D91EF6B99B9FC1444A2EE772ED59F60B06D75100B33CEA34DB3AA14BE
9F7757F717C9CCBCD4026D55357EC4FCF781A5E99D07B19059867ED49A93BCE4
D9ACB0870050A41E77BF50B965E236A438F54ED890A39EB979A0D84B44991F42
C37DC8F1DDF7B854C4BF36A4BD23054FAC83D8653C9FD9937AC99DC824D9971E
62E9DA48A6102BC64AC12F50F3CF3F625B87326B8E20AEF1847073B451126F34
6149164DAD0BA4D7CB5AA186812BE05B6F0AF4EDA2E7250CAD2086C6EDF75F01
4ECDC9E3B705084A30AFF6EB6C011131470BA88E5F1C5CA9A47FA2DDF679DB1D
FA65C2710537E7398E65B7CB1395A13742D59B4CF1A5FA7FFFD9453C02C5B8D7
3820A5A2CEB33D97DF9BD8AED9370363C739E4F675D2EFBB967B4CFF814EE6B8
A17DDA3F0CF6B5A9E0A078F2F4E32BB07EA379E8315592551BEEBDC93615F140
4DD431080647019D0F5E65EF66A8E6B1678BD8EB06A20E395ECBDBF375A4DCB6
F52ECE5318047C9B51044442488C242F57B56EA92BC62DC2589783E9086B372D
22F0A4B04BEE9FA65C3D392EAEEC509F6752AB2AD705E6B5D8F50DA977806958
D3CC6C0FA769EEDCF79EE2C81A713A91EC40015D3BE601C0B74C1577D3F9AACF
2C75C214D2EB9F98F0094DCFBB9D84003AECFC6DBC730363E3B62AC0C15F6CAF
282D18EF9DAA1C7F443B668C1CCA13DDE833059E83970CE4B34FD3B8D0DAB19C
B1EFE09767F9C9E552A753D2B6ABFFB26A964221586B46A1D7E467010F6160C4
A379F96E7B6EE4F3F3555D660DF7A3AB41BE31F5078EF91478ABF80A8A155911
56C95D0BC3CE3116B04DD5C1A80C68FE61FAB386C8099A92A9E371434F086F38
9C29E86C7F26F70DD16E73C9330A40669C1D758D8C88361E103BDB3439B1257E
E600846A3E09D9F035EED2F9E2BC5FA966F5C39F804FD2ACFA15233373379AD2
B2B97BAB8016443530EFBDD62C6D4ABF100A812E57F4F2D842DE896351E71147
D5281A016ADC609EE6431DD24BF32E83093404E63A9C4D5F986B5B2395C39410
9A6D22E99DCDA22C5FA0FC5673FBD1C293A75860E50758A72F0DE69165736F23
E3E494B7244BC7E3B4930DE5E41F8A688FD6F9385767A972F70ABEAB6631F612
46397BFBB22197688277164206424A5FD8044E6719019556D6777E3DB938C4E1
D0F21F262031797A62B873115888C5A37B5F45120F347E6094E5894C524D7AB0
78DCC1EC72C25CF874E9AC560EDFF76689D4B2F3374BBA71674EA55972BEE88B
B4FEB40B133513F515F8B7E42B6D3E0277D43A1A2532D29E31E3D0640A71230A
9DF50559C743C38B683BDC447AB44342BFE5A9F78243F4C9BBE6CF0B8469480F
A0CF17E0FD802E6FD8E840934D25B967F5BC36776176204AFF41FA38ED8D2B93
C660049BBCC9B48336C1768E8E0A8A73CC9509594793F0201678944127973AE6
010DE952A2C701EE8888BD9EC3B6580F1AF76D0DCE3B36CA8C29ECD41144BF50
68D2F6B900F3C16B800786BEE61DEA2159AB1EBC886B05271731D7156C5ED84A
F8A4827CD0278A68EB02E852A17B22C4DA4B4BFF0E3D83DF54C16D88F17C4579
DD35BCCEF106ED93EFEA825E40C79AF92BA3A5A7A10D9BB6DE217EE3A158485B
7B12C6F9C91DA0D1A489EB0BB1315A1D7873601FA08C3C4E4902575679589C83
053D7E272CD37586B57E6E6F4CD4F521AC543753969AC587F31B62E3BE1B765B
FA1E9B82FE1D09F44A31F7D8B964B980FA031854134239B20F4B844C950B9BDA
89A74D8550213E1E97D16700D6DE0A41192FD9C1B01AC78C55193AD8B3EC1016
AD501CDBD5E2662F18EEF7425AC3ADDE0C48964E278676C23F5F2C2E0282E54C
B829A49819CEAA63F2D44A256AB4CF18C925C418E23E8BA27851432F714984F9
167F5C5D8987D32CB30797DD4ADAEAAB23EE4C860F07068418F41A007E6454E9
E8E7686A6DB5AF9FFC5ADD3D1982209E9DB25AB9AE3580E36A47733FBBAE7E72
3C14BF6D64E9C259ABC11C18CEE0FA1DDAFB91C39EB10682F8DC836C89CB16E5
AE3E658FF770C903FCEF817A460AA7F620A759B56519EEF4550DA6028D436930
99B051B7D6BAF650DFFA97744409E098CBA8E94F44B460B6D4FA7E3EE0876F7F
C396F01D68908B09459A6906CCFE90F24C7F1BEC60D8CDAC03556AEB400D6880
1A913AEBF5578BAF577BAF1696A084D203E197CD62C2FCB8F10C3E3C2C6001E9
4F64E4C119A1C4DE85607DA9C643C3546FC58165EF76AC6D7D804C18E9DB6AEB
372D926893DAB808353441AE0CC7D5E2182D31CB2DF8F2762BB918B6D40247A3
341CE35780907C8F413E9F1CCFFB3D76FBE365A40FF157E31B764127ECF7E5AE
8A5C9946607B624A37CB28AA02B9A6E6EEEC35CF2559CA67136A39D9B1FA1978
68475EF1CECC81C289B8919A64A57C2F35A7D16D332E51B1B7800EB18023F4B3
6442332F567240E3F67EE137E6CA0B5436572A20B8CC7B4E6A450C869BAECF7B
0F4A5ADA6AAC78B71DAEABB1C73355EBC3A3BF6B0D4C0E5E38467F452E3896BC
A6B353AF4849E604AD7942DB5BD93FB35FB2C2B85B60A32A6A5194ECE27450D2
63F6BE4E844A6B48CEBE7990B9C1C1461406A980221EDD0ACCA54AA0698E72EB
E7FB10683829D2D54F9205008079F0A92113C51CFC8185CF2E483E6E1A750528
94C39DAD728E9D8CCF2FEA5EFBA70BB2AD31D6ECAED6F3418A540A0C4E8BD605
DA605F6D2AA13E7B1270B102E5FE2AE3E88120CA92B4164B3B9B37A5CF93C690
BCDC1C226CC577FAC76086DB1CE18A7943970AAFA046D99963170F8CB65E7B3E
031FDD3014D53E00DA7F4B100C6B22765924E980DBC5746415B1D1F4B2BE684B
749A1E0DD874B7AA08B065E8D3B7640F598772B76C72F09CDDC4CDC31893B1AF
0485C5228FE48AD59C71961E64C84E92045C752827F2561397EB2C32EE011BAD
68C29DDC9ED61B28BDF14DE63891EEB8BD0999695ED675C09E980359988C2431
6E1AA4B38774069A906E35BDA5B80C25138CE2AEF7F7DF4CCAB2A85FB38FB2C1
539C748E20F21362FD1215D847550DF2FB0A2B195538D2DAAF2F22607E1F3A9D
A8509E7ED47DFBD40A3D1B156790CC61B13238E142AAD5349BF67347D16B9C41
A756C5CF9AAF49B05E8ADA834E7768DA2E1E7D41DA609C7A33D19152F9B2A5B3
E2A8E79F85EA99E84065D04A77631670CF894D4A17700F4D694987D9A8FFE06A
91CF2706CD4E367F165A1C6A21F5A8B2C4871065EABC85896ECE38D325FAC472
D7A5FEAC82D7BF89A8A267C1EEA6E6866A64E553D45B66087727A5255DC82583
BFEC2670724A8E754BDD8FC2FD7B8E39D130FA7ECCA082AC878EC44A72154DC5
05D1FF2131781F3906C0803FDC650432EF0053023B5A452CC74B1981DF37D70E
BB73A19EB312118BFF5E78D9AB8A0C46F2E12C9802AAB5562627A5EF9662954C
A80BB21E24BD423F1F8D2826DEFD56279C687F81D9901E78D50E36307C390FEA
9AF6706107BE602E0D1EB0C567CEE0E2332276F32283FD7D89DCCBAB7DAB16A8
4868FD387F1F6EE3CB17E0CFC0A21FC66714393D9893C7C741D1D9B0E8453551
12F39FD99184A94FF12A87A8D2ACFA5C76CC0DC9DBB1F743B60BCEA6BB22A828
C45B2A647277B9CE8FB15F0CDB6C87A6D57F437150D0E95427913E3DF2FAB602
8AD884FC8A25B88F84D6A12C9D36FC4BED6E915EE0A8F8162C84F23294A01FE8
B7B80FDD3858D5F37DB00ED420D35AAC6608C5ADF2389C26EE4DDAF9A20F8129
2E4437C8A46E37B16C4ABB249E73B10D6CAC2881B49DC2FFAD1343E45D64C708
42EB55E074E0A7EDFCB4E7DD1C0E0D1779B51ABA63959DD85AE2E3CDE1965F4A
E1D53FF2186BDC7C446A6B358140F20990513190113137D4F9B91F1D6C85001F
3F47C2A67F00C63B037CDFA5ADBA32A15603E1C45CFC882372B814458C3610C2
764985C1E455B12315CC837C25D4A33FD65B2820B94DC7FC27FCFE62A9855A1D
B7AC11B51FFCA631ACE631E93DD185EF4EBF102AA52AAE64EB28B612A659AB97
D4959E8975B863797C96666ADAA0D84B8E28E70E9C8B63FE13B85B1B104AB05D
A60F3DC15AB3562BD4C26A24D3ACDF937070C63EEFA96E8ABB5CCF6A5D0B2058
65D6901DB569C4DB74762E175DC3DB05369F62CB781D5A2E19BAE18694E7032F
A494C2409EA9B70EC43DD617C2A9B3B39BCCEB1F200B6A2B576C865F625827B0
B9D5BDB2DE2F13A7588EF1DA1D123177DE93A589D291E92793F2A3F873B61D70
DD8A025E098FFB4C84716FFDE7B882F8AE601E81796757A63941A62016B04D52
A4263879390BED73EE7BF69E8C7A56AC88D4C02F16174606AB159688355B9D05
E7AFB02AE97AA40DFE3D3B3B0BEA23BF38625B87358495A1702B6FF26956EA86
D005761E13A5BA19D277422B60D28A170EA2427850EBD6C14C5A176F950C01D7
3B6DEE42DB728149338459F8BED6635C7ABD2360BAA7507D358FE389149FDB6C
77485C0E1245ADAD083E5FF7EEC7876006ED3373D16487B2AB183A52F335E8BE
F9224B6B3B0C42BCB6B3794F6303D038DAFC2F77D8E03D9BD6366174F0EAA9A0
9FB66B3AA2D5AAEBFA0D6C2A7F71EBDD3281D71574373EBDC51EF2549585CF0B
FAF474340E99E1D5E76ECEE136CB4D6288573AF68BDB51F8C07B6F4ABF63C361
7503393305F29C05FC3DD8155DE25D51321A1A3615C595A962D9927669DC2FBE
4448AA5955F36A3BFF346638B2A861EC7CE583E1253661F2D55B0BEF461C74A8
EDC509992BB0FC84414DEF2178C47E347099B4950D485F880314EC95AAE94ACB
D921B34350059E316DBCC52C41628B8ADC8DAEC5B52401C1571FF4FC6FE4D0D5
BAAE8A4A40D41B7D163B0269F5CEBDBCC730798EC252FD106518574DBBB54DB7
E2FF709C1710DA053E19A16E5A1B12C67E01DD3F00F21FBED15BD37CD44A232B
3192CFE314D375C47698F5410465A031E1FA1A3250F71F3C50CB9A0DBA444EB8
4F2BCF083E0B5BFE76725BFF2760B0AD6C715F29D0B94AF8DA3D8B7953DEDB23
C805F323541AF195B034B71315D89A0A06E61644E74824B8761C71A894301774
B91FD7F78DBACBA7A4ED77EE177F34FFB5F7CE616D94820D0C7BACD605974A0B
37045A5BCEBB0A18E4604FE2331D47B4EC2B55EC21B9DAEE4FDAF81E60C22B7D
6B8E4F387018716DD5BAC48200EEB0BBB4F195B100D8ED3EE406EAD512440B6E
035B90E3372597CD0A0E709084CD1E495D28683F94933B2F71605ACE390C2459
080D5372BA5330BB936BD3C200524277AF247897DB152430B27065FF55BC365B
5B5ED5CACAB3A04185679701D4538F81E074AAEBA3E2F415E0A31EFAE47AB205
98CEA41AEB9427D41171B01D2953BB5AC76187844D26A35E2A3E208A090B2721
75E9484FEF1E1054E9B9C6FC618B843B31C341DA27BB7728023E6FE0DC6B58D2
750A6E7856E0323CA9B40F918E814A200FFD1798739E6994DC3C861FD5A9324C
D4C0BF14759726591F1E33988033B1D4EC01DBE7FCD704775AE0900A98F8D98B
FC4E23A1F664442DA3626194D76ED4A6F7BB1BEEBFC973CFE311A9C1D285F159
4661247098E77958D3502994B903947359ED392DF2D536A980E69473BFF0D15F
F506C587C2755D41C6192D8D0AC966AB99DE7B5B71323A220939514252AEB657
1CD9E30F73B3C22EB5D20A7DA4DE69C91496D825812ED9164D2746C99963209D
DC4FA074B44B977DD462BC0A86395723CD6A1A8383DC3F19D9D69074CDC4E7AE
3E8A67EB82EEBBBFD42F8C72439889894AF9A2F31B144BDCC6701E47D1013508
4809B0ED6BBEF0012E0A2B3BDBDA4970DB5F40DA3E69349AB3FDEEF13ABC81A3
9742DF3DEE33046D1B3F8816F01183C3CA2B72D4F037636E7FEF3D544A8F9BBB
8EBA6FC48DF968E60E39A3B0979DD776179C1F6138D7A7E2FC165818575C532A
A229107A589D0471188DFD2CEDAC61D7FA7C04BCDE854D06573231A9C7B54EE6
E96D4A5BCF67FE3C02151E98A810B369B9379AFA2C179673CDC471F44FB59524
9CF54D65F4C3095C52EEE4B447F305BCD6607E25DC313495A8B1BA2F74B834CA
B0DD19E5239C83E327DDC70CA4BCB9C1062AC155CE313EBF544CC698667EFED1
521D1221F69F49EDA513D1CF9776D45AB66390BD14697B8997126DB5EEA748F1
3E1B0C217603DBEFBE2B849D28CE08AFF8C85C68F9FBC42CBEE35DA3B2D4030D
7C1B7CFC74FC1ED420344BFD90D50F2A20498AD18D36829FA750AFD237458511
4B9B4F4DE60A01583EAE32B0C6313226788AA0610EAE7B9FA2A1C49E774D370D
684A7B8A2E3FE488CEC40171A06BD70910DBB74E801829EEF63233C4E83966CA
C735BC6E2F7E70213FBDEDEA7AA4C009E9CCCFF2A9362906FD1B49C05B2854FD
DA9772D24C772C9C4E5F6A888018907406E2D0192CDFA1107C47275329104653
F64649E19D1B86619C33367839DB9063841674F0A7DD71E44EB6E66B2DA0D3CD
0A74954E2F50A0439499F9D264B7CFFD26B79B0AAE2DECD68E76A5BA94F054E5
638AFCC6540A54266905615BA672834CCEADB8F4E725FD5A6C6489CDE2FE30EC
B47328520E40365C825684E7302BE7FE1316F22DCACC145A8AA9D12EDD225732
113693FE7BC74DA7681402B4DEBE3CD4FF43D75DD410B85533BCBDBA1EAF3E78
C53AC1A9AEDF1AB829B751252024E96E963E13A4DA41F7D08F9E480E6F8D6D86
A8AA7CF4F4A27B8003D23884CB852E1FC17A7CD0448272016D24D2B7EA4AC3B5
1196D8C75F01CD030AAFD603C04892CA86C6EB47753AAA75B6DF371BEA104761
AF75FB7F23D9CEE426D6BE4060D04A5088132DDCB966F61D53D7867312CFBE95
FAC8EE3F2185AFE7562855740E8363B6B1BF581DC00E8AB7F48F0B2D4886D04A
1E57D8350C2860979DE70B8B4F36E097EFAC3F88618A73BDD8E7D26138CB4EE9
724B8E7C4743B72F96AD4826EA3A150178C206C7CBA84B7ECFF204235F08A335
FA3FF6EAA208D3E0D1A3EEF68FB116E804595AEF69D583AE95E542E87C54679C
54944DF5BDF579225ED4BBD2F1BCEBF73648F0C6C60C7DC0E8A5B4027B812647
0C80EDDBA10297C3EC01BF917BC973C7F02AA49D404E3C534C95E986B4B00DFF
0412E8CF0E20E7D11A2C86EAE595D7601B54691680C35AD86FEF7467D9C8296A
95267886A2299CEA59F1113336E74C4A4A7F244894E6C577F170469F2DF27CE6
D4E1EECDCAB6CA6AE56D632523256C36E702E633BB29195F90483086BFB79B4E
CD968D5643D987C5417E639E6B4B810591C8444EEC9F906E6A7F9785F72800D5
80F640A53D8EACCAF4FC6D11439B3DF1963736620E25679F88B87136DA1D1629
CFA022E68813E3682A3D05EFC4DCB73CBFF5CAB5D8841319556002469D9AB505
B94F1944B856AD10C3E00F8E847FE9977A741E46A886D139E619A2693A402BA3
CFE00B7A383865391FAF2B59056AE486C3E13FCC9C50644E733E160C98CC26F7
32C9D6FA9D9928461DC6663EFFE4724477A2C3D490D2F696389F7E8615074131
FA31C0138B2095C628F61E353CD7684A18F9E4ADB870785584A2C48EBA62A60E
465827E8A0B2CE51B42E11E5561B3097B0468AEE880D1F0CCA7F099E5A586C42
32A1A6CDA1B6BA77CF77CCD0970592075FE95394EB4B23B598DF1EB5BB9BC401
8439FD1AEAAFC01C1F7EC107372669CC5806C1638CFA5B1303F72A9298BC2AC6
D18D1AD18F19958F6925FD884F0DFD9D9D30751FAC4A1F667FA3B981CDF36EFB
EB91A74C84752122E3D978E5B3D31851639FDCCD7A40BFCADB9A9AB72FC754CD
B848EFE7630BA0ABB72A8A17CD447047E6E94DA233359CE0730CD6667B7ACBC3
285A93D109EEB7995AD3875091E944C4949CBA6148143A75B5CA44C4872F4F44
6EED5339DD504514D6F2ABEB05FD27CD6D26DAB8F9F3372DE8CAF340B83A047F
DBC524C89B8DEA20B51236464CFF01F3EF4AB060A074148DB16C7757F329B674
95E8E2E12EB05B79995FAFF2CB0AEF3792F176BC5B909FA9F4DB179560C9DF5F
E19394FB67CD6F25EA3C837F863E294041CF8E0CDB6580CAD56D8497BEB0F5CD
A2B1A09CDE93BCDA2434CD58D044791DEAA0DF3A2C50C77A47A61F704CAA3B9D
B8827C42E82C808899591225700DD968CBA79CE76611C0CD332175E35212C8EA
C425BB6F6086DAA217A0E6B15D7C6857E3ECE459B873854002F8912C9B6964F9
249BB0957C1905348AFC03B2B28CB7AC9376B6DC38FDFC9B638E677A4FC25D40
D379822413646DDFDC049DCD6F8ECF0ED000ED1C8E33468BD5B22B6E89AB4F4C
43002E018D49F47DA7A1C3A1440E9CAB01BAA2DCF2B3C249660456BCE40D0D8E
DFA3CB3216F8CA8DE045C2CDB1AB191FED40312BED971AD3A7DE8B7AB7AFA11F
FB0DFEA376AE266B9531574C54E4CA8BC6B77190A1EE3370B651D11AAD138DCA
B2BAB257752B47C767029EC807B91D33937CE85712E75971BB03B5C6E4D440BD
415827468806857DD6A0D150E97561AD72905C49BB5BEEED3FC7EE237A2111C1
1E9422321B3F7375B9FC0737886A47C574D1393A89FBB6EE8B8C2D5AFDB5BB00
CBC07F41C5C351840BBE01210EE3A89A3BB17D5E1A8B9B637A6F3A577669860B
EFED90AF32036B3AFE10F8D10A588352434CACBE79966157FA376960BBAC9555
05164BBA45AADEEAC74741DC623847015561398A3C69533B5C3B6ED91C8DD6F2
7F177868A6E6F4A945CB19B1F81F940728F48BABF74A87E83A4F76E33283DAB1
1330AFAB186C1BB9A1585DFAF2758CC169FA6AC20EF5BB3DA64AABB5A4928476
EA39DEA8A823FABBE99CA503DA539B7A591230B56C94DFA6E1696557BD6CB868
77044E10F0B2118915B8E5811BB85923027009E448627F247F8D566118C4E0C7
F30CEBD7A93A13FA289986D02C97A081BC357109CCA83A5A19513B59D16018FE
A1E8FC2C9C357C261CAF39538BFD08500B01C7AE04E1A732885110BEAD5F96F2
06252E808E2DEEDA15C90D564FABA4C25EAA31F6BCE890D038C5198935EEA888
124E36FA450C6DFD433581815E0B29771C1F25CA7C53D4D41802D11CD481B81E
E43E8287FB492857EDDDC1030D2B4C8B69A24AF3440686D1E5F3015FD31FDC36
9BA92F7ADC38D7A95DF1A70618560D59450FDE8A5C9630E3C209D3CAF5964F70
44770B9823CAF5771024414B1899B0597C5AABBD3ED8D4A0BB1D9796BC14B43A
6139AA31CE3CB6D196AC12CD7818F5D9FA58497544890F6449E2CDA0CC4269A4
003402AD590FB86BD35401CC58123806536E1902E82B66A45E949B1D205F68F7
0634FD5D3F4A183FAD8A5DF5D41226036947D9FACF4DE1FE6C7F051F78756BCE
865A94329893C7C741D1D9B0E845355112F39FD99184AA71FBF850576EA75595
B56A90380C0070CD016F470ACB721EFDD05746D2CF561E467244339C4B9A246C
A066A4DC53099C66CAE4245E9090A88649CE995F3A8852FC9E6466F4498D61BE
264A5A6ACBC13103647628E8EE8C15FF9819D5ECDE3CF4433BA291BEA901BAFB
B54A8BB1A97159AC1B80EA85DD29E9D6F41C2F1DD1C96A030B2EC6D74880CC6F
85A6E454CB978A2B24AF327E42AC99697B4B694EE2281BDBB8DE5AEF261EC048
826CF3B218BF5C13683EA12E19F708EB8B367CB3D8AC49C10089AAC280829797
3C5C507DA258EBDEA43821378ACD43B9C2926D1D46120964259C7817FEC9F914
BA1C84227A609B00A4564D9A9C6D8EF69020F02B8B9365B733D87595A215C7B5
9E6BDFD4A42DDE7F2D0511E4DEF9BA71243D68CC5F12DB9B46D52E7C903AE045
90716B22462A4715ACC6F3F033B3535A30269D428F22750AE6E6AFB24ADBC748
1751A7637214463B792943EEFF70581E659F3B69A213C6BF4E4BAF43DA1C74EF
A20246EB604F57B0F181A467E02B8CE588924A8F548F20AB0E5B0C3E4B0C0ED2
9B4BD7FF3E3FEB74181E6F4A7E66B6DC8DBB64838F430336174B662D9CEA81C4
FF1F98BB121FD24A9C823F1065AFD410679132122E05F5CA407B6B57DD913CCF
E783E4E76636F050F9FE404EE0F8EED64A5FFF400E68333BD335F6EC8605C490
A58CBC78B4262676EC35197A7BA67F9C42F07C38BA3E69E009559BE10507D216
88867E89AF27C2F275CDD7A36B0574A96CD3EDC132C65B6E095F192A2F721B91
1A0ECF31483C8ED34195C0FA5BF2A6DB04A738E338599DB29AD3892D01F90AE4
1427D78113F355B15691DADE8AC81E2AFF2F8A0725E51ABE6EF8EC76206434EA
CD303237D2A2D66A33F0D43E3F1428C01FB432E842499E71AA8C8AD6D2DF3B0A
A6EF678159AFD8D34BA3C647BFE0EA5ABE2C86A249CD4F5B06368552BEB3FB79
991E67FD82352D88C7DE665CD82D2146A431FD59BF619F9F02407A7D678EE979
737AB09861E013D17E1631D88BCE73111D5959490FD9016F0E07A8E7683C25A8
F0DAF6FB124CDE7D6EE471E86FCA83B5E559D3342D945FD2CBE1C7CAA0B20D18
F8522B9D5C22AE570DBC57F42F37425940B868069C7D20A9E52DDD9F89B8631A
C8755DEA0DADC2D0290E58BD0849B52A9E0A877FF2E5D0D4A52C21962690F98D
5A99A2EE9ECDA1E53F742689B3683098954BBC19648F666FDFDE3F06B60FD974
135F38D572A87DD3836D12DADD3095A4CDAF3944DC9EFBEB2C84E98403DA5F50
7BAA24B9F0027FFA5778CC532181AC9595E5EB45A62C35A181B5F1DE6FFCEF0B
1F4B9897529412903DEB95CF9C330CF11EBFA53CB793891AC536B9EA0EBCF391
BE9C963231B16DCBA2E2142FD05AA44E8006EEA335B5BDE2EFD60B45287718D0
7D3F07E6E0EEFE61FADC49CCA6C6C46734FF9C269ABA3222C064128CE38AB777
B839D9AC626E38ABEB5588775433BFF517E44AEE8BC731A1452B2340DEE91DF3
5EAC72C1A0B8E5A435C3B81F3585C9B36A75CD2CA9844F7635D9BC7AF7D1CE51
16B6457B324208CA42CCBFC83069DB01602443B837DC93FD7C6899E86D352FF8
A9BC471DB6AE3FBB5E64687B69530A8669046EB0B0C8C4B3211FAA5227E11E6E
A278328B86A25274CCE265D105CE7BEB33465F2B2A7FE9BCAA3B2644EEE502DB
32F121AA2840A2CBF5B576EDB48F7457E958F4854860A20CC186D59148324E7B
F4524DA0D63B837362F9193CEA8BCB021E29FF39F693F552EE52FC29ADD3A5AF
4F7458AA78EA5CC9131E5A014E4AB1C2E06E939B9267D09B409F6E970CB9C158
59CDC7C0DB8424529F006F9B21B53689568F6C6DBFFF32163E707A1994ECF0B0
EE2EA87AD0273D5EAA833C4494BDCBA10A60B138ADDE056125458E9DC39E1CCE
D442072C5A0D2428B05CB63820EC88668555B086812AE248905271985920DE10
133A7A488A2CF051535F9C68521D53588547A13A4971374A197359F790E7E350
302308622CEED2615602761EF93C6D01DFBCA4CD28FB9BA4C621F2371637DFAB
7F41D9DF02700248DF6F4C523D518AF5FE9A17FDE393F231A3437FEACB0B9146
AEE901359D1B97C28F8FD7D5BB82CF7D3237FC9FCA5C08635CDC4C0B641FF87A
996840E9E467695784E5F1571740395FCC9293CD049EF2C70EB1B00C5F181C21
A57674D67EAE3D49B30B1E897E41A612836CBAB4C578381BA3ACDDBF1621ED56
BBF4DD77E6C9E22FD8BA9834FF71703C842DD8620AAD09E16797513E0BCBFCA9
D28AEB75FAB588E2579CCF95417BBA0CE733032AC63688F54104445C09714259
B3179FBFA7AFFF46AF9B56CED23B237DA3BD4A603FFA91C814AF034D8886EA86
E5AB8151484E8BAB03DC7013016A4DFBE5AA7D885E34A2B2CDDE7204D3294C91
F884FBE3CD1DD01799DCE87E3E36CAF3DB727A03B6731240EF82118F07B7C4CC
5835BB35705C4F3288439BB4561D3CF87F48CC7BA661C175D6025C99A7683B5F
0853F1B0DCECFB7B49A95CD0CEDC9BC68C4444484CD1C05461646755AAB3A04E
F82B666764F97BC99FE0D3E9AB1986AD8B8E002706891BFD82394B60746A735E
A4CCD0E7E02DEED8ED8BE119CE75A6EEF3D504BC54D97E201681CF45FB69F10C
7D35F28EE7421DA3242DF9092E7E30B008A744F921106509D02C6FDDFE7DCF86
D9EBC8647CFEBC9F697FEDF573F23AD211BC8305E2D7B377FEDAA0A7395B19DC
60FC2AF65A7CF327D1FC6858D6FDD2FEC73300EAAACCAF8D76411882F61847A3
CD4A6753EA6D7319534E788929420E622DC147410108C3AD6D48F095AEB60BC1
D9E52C881DCE52ABF36206D7F828DB4D19685A92FBDB27B713D3F9DF6FC9795A
CD796E756ACD6C74B5C21EF4BFD9958B62099A2A6DFE149D41B7AD6359C2E329
B542E14368ECED58707E0AD403B2B11334505E00F8B11ED5F9257BA553BB1323
7BBB63894630219155B58E097DE0B496894A441C21B213B801C618AAD6A29594
A57AE3ACABBA71560959C5D3E118A138FC6CF922A0BA06F0A5FD0779CF761709
B8010D089AA59CD0AA10317C8B90EEDECBE33BF3C1FEB82D6826CD95ED5C9F8C
4C8A977E2CF8D83AD61B581EDA774734E7EA5E3C3B36F233300C3942875D3627
E28C77169527D917EEAFF14D7EB297884D659D1FC381AB4E4CCB57DF747E5737
621C62E66E7205C608BAC4C5849658D25BAE17C253F30D6206A5201D9E162E4B
61C303EB75EA492AF4495F3E83AE4E49205416833626CE3BBD7A56C8EE31A2C0
CE015B5F0887075141DB5292713C4341D4015ECB8AF655FB0FA54BD3D24E9DBD
622D485FE852B1720A14F3FF4D2604418C887B7E18A5FDB0CD4943A6F8380DCC
9E992D7CA722977221DE6A8FFC146C49963F6CEA7784966301DD6168E71E3A8D
3328D9E8249F9598A6D085EE55933CB5B14672BA9BA84613CA58B6F6579D68C2
6FE2354A974D8E8A2831FEF4DDCC45EFAB7045685920CC61AC833A1B04D8EC47
76875AA5D7B73D40B57F255639CC452E8FB75F8388A56AAF6BD76A35BAF02203
CC7859464A10F0398750A9309BFB680B4AABC2E214E95094C9D6E389489E4AFA
DBBD20ACCB6253343570D9118C78BE00FD086542D39318DBD7418E89ED02307C
DC8FE19861D707D2E89C5017731B6A27B9555D5C878EF9557E6EB0F280270E7B
8429080771437D3BD128C8E986FC1490292991F46A097BCDB7721AA914F963B3
CE0F3D5BB280C66A8B196F6F0F430178801BF8AB7AE4E2ED878923AB3FD85D35
8047B6E015C1EB27D09B9E31F1196667C2DA9C6EBA1ABE4D07DFAA55C4DEF21E
9CFB0A35BA1E62D96B4C6965D204A467879E3E68C80A69FDE9C9234FB4B4B89F
1347772BDCD0312C77DE68F95E0FCB48DF26D105255F7A8F53E8EA351E6BF22E
D619F4CDFC3B06F432CB4843B0AC76C507E83A7F26989AB05DC7CD7F04B6F2C0
9AB974409CBA7564D828DD8E3F1E6A3E7E8EFE63370ADBF7CDC97216BC7ACBCF
796EB2F3A630E4D00654BCB44C13693FDB874D4322291B30E8C56DA2E5A9841B
40C7C982A0F314BFF574F9E0086481F84171A5027ACB284DFBB2B3F9132BF7B1
1CA5FBA7767D6AD9307229D2B717CECFE2B98DDDAC6737CA6649F6E3160837AC
5BBDDC6C551CAEE7A2E7ACFB09BE9656312FCCB7F0CAB5A1E557397E93C2E553
8F6C80E449571238247A258CF8011370FDB99FF037774E66D4103C78F3F67010
2688D7493CB16AAAAC5E10C01CA72CC93A4D12D687CF23407CD48833AF58D941
A2BD05722DA8195F4EE4D995A11F8D1C667AE79C0790CB9425CA74BC03EA3A91
859564C7E63DCD8115AB67D6C0DE698866565816C04E58AF524F37BCE058222E
9572D9F5F9DB013D13C817D8A79482FA72DA1D816C6552746BDB1B83E034EF20
0FA60328680D60C9FE8AF10057F4046F1CD18CBF9045EE64ADA036A9D8D30FF9
B775D200FC8950B0DDEDCC95000AD8D4CDE356A012EEA579A78780BD4A2FD56F
06549245EDD6508CC3B2A772DE566B7421E5EF49F6255FAE8E5B38CAF44E225B
70CB192249211392270D81D4EFFFB1475F2A02ECA515AD9A7D1A43E863EDD13A
3A3A210913D7F6B09D33E5F104F22B97415425891DABA7D3DB62F5899BB31876
ADE10F3304110527C657A3E1C91BDBBB0CBB274309F8D60D58CB1719E23E6E50
EB7D07D86CCED6AF42D4769E297B3B349FC52A962FF1145AF63134619EB11F8B
BF8640A22F88001DAD0EB442F91936A8B9DDA5E653811829B26E0A2DD361A699
BB092E37691FCEF0A5B1951355E33C1AE5344F39007C1356046C087F36972650
EE034C405845F888A1C85193A6C17C35FB454AC2CD3054920775FB42A852C8E5
3346ABD99559B67A3F33294A6F52CD04BF6FFF2B0FB0DA8E30D54E55B7C7E5E4
D7A0B3274B15605E9652545E04C3003A41FD97BC5086A4791F459DC727DEC4B7
6B37304E1A98B828C51EDB0E6621A8B81405452E4C02107A14BBC2C08F872D49
90361A1F63C97A415B9BD9C360FB637E13EBD50D1683A5D1F5FDC55E9F7B68B1
F68B23A2CC6C904456D479BBB3A0DDDD1A12941128B7FE8D9F1B65582D12B3BC
9521C937FE3A1111E47EBA2F8A8D44CA9C02EAE04EFABA3C51DB78225E0F9749
5FF9F6F2BE55B43C4B1F8F7DC756EF79A866D28FD219459DA27AA809BDB0CBE7
A1493F0E9150C961CD3EBAA207CD0C8D27D672760880DA2571E19FBEACACC44E
50A3C231514C6090B23902185DB5BB8E54E3D9E319A1884943714547725B8940
F43A9377AA7496E4DF895F1B24257F1D20098F7A7A9B7731A431D8E6FE395802
39D2B4C9F26E2D3BD3676646FF1F206FABC4E63609E76CA64D51162BB17D1559
7E72FCCDD06A20D89E5DDCF084A93A7EAEADEFF9DAFC6C61913F7EFF60F42167
8AA3C9BCDE3CE551EFAED579935D3D47C667E1FEE21AFCF210A0DD7BE82B0B7F
53F3D0AB3DA071A768162241A5DBC0A47E2E121CCDAB93D2AA72754FD698E14E
971BF53DA7314E568533F2F8200F9EA6244E108D9A13B1AADDF869DDFB5DA05E
1331926F5468324063C600075CE66D12C39192BCD20C491F59E7637A5B0CE662
574F4C0B836D5ADF25EE203B1FE402F2245A2521D6D24286D68560E94FF91318
39BAAEB5640644E96C4B613A4E1DD8F6261AB6B87BCD954252DD629B6991870F
0665A19DBB95F737BB85DC5A2B888CD4C87EA9B0FF59A3DFFE11644F06147A30
8D8C56FDBCD4D68E897ABFCF8B50EA90ABD0F1CBF7D5DEADD8F8290B2A315DA3
8E731FAB1B15DC27E48906DD214661BB5733C9EEB75DCB79F5D16D5DA3E38E02
65F69EE6AD6B3A2CA0838C9C1264F0E94FB7865C924942410BFFBD7DDDED8F91
78CEFA1AE6EE3C7FABD42DC9F0620637472C9582F5238E6D9BA37AAF71A2DCF6
79409B8E9CA6B08F7735D638F979BF28B7EC856CF8BD6BB23F82A75F38EC4394
2E7B0FEDD662BBC2F00F16DF2636A4DDA14CD2BA4767934260BDDDF50130FD0A
A6B7A470BA0625C949F4CF20074FBDF62FEC07DE64CB6FB6C28B333DD5039FDE
3BD40CAE5654AF769FA5B8B4DA957720AA954E10EC2A2A4642EEC7AC36688B8A
07B840A268175F86F8E23226A45321806BF4D8EA412FA94E34CDBE89293D784F
240FA58BD1794561D39C72E0F7D06937415E87DB7E0EAA201B916402567B529B
8831BF8AE02453BAC5B2287248A2C83AF9518B2D48B08A0D032546DD18C08B42
E207997BD98B8955108DCF3055B810E0368204DB5A96278A40C8FA08CB3BF875
7379CCC8F7E9226114B62D6CC77003606BC1D18B9BAA372621C41D4A585D4C7D
BDFBDAD0102FCFAD26FEB45FE3C57CACB2A81D787C005F9A489AAAD4332390D8
67F2FCD28147DE6D041B0E1B59C088E3CFDCDD18CBC8ED9970994C7C81EE287B
C2FC5386EA51B3BDEA96C5AC709BC2E322C7C8EA27F2830257CC89031B430BC9
99CA4322D1A823E4870D8F22112B2DF446A85F85D61E54B8558624644562D0BD
D95FA2C834B43E0E939A814D10079E70327A0E68731D1755ACE042DBED851F3D
A13B0BE2D061842A7547C522A5ED35EB8B1F72D5F0F1C5DF917764DB7DFA6B54
0BF1A43C1390A9CAA815F35A7CC63A842972D6313EF5F3DF7500B6396FA590D3
B2C09F5C3B36B69B3BE0B76D4D791713DA108F1189C2B70EA76E8FEED502FF3D
2A2E598C53D3318BE22A61D1D55939E4CC99A15CA57BC1C8317D99F26767375A
A4B45629F7C49E5C68EC133037948BCC35E57ACD3E10C292E44EFB6213FE80CE
20A60D64ECE5A8894ACD69D6C6F2799B449727E5AAB431F23667986C6092EB3E
5CAC8CA4F8F1FB0FD9E717F1ADC5808F0231E0F1496EB7FFD42636F4351B9191
AC43A640979A5AF6F7A87DE7D350DF99B30BC319C101DF02F9EE9F9F91714C45
9A3EED6C8CEC43849C00FCDBA9649F6BA3F7E981DE15E71F2E40ADB54C5F112B
13D5A1493F46332F11AA25B6B49BE1F0C69C1E23D57BA9CE60D5A610BE4A9C12
BE2F8F5FA1E675106E627608D67674A7F1930DBC0F738FC2FC5AE7C57E4C5C2B
CFF072800EEC28B57222E672EA311B4C34128116E522DC56D652668889F09764
39017F74E3C3612795F74130F317FA28920803D76B9AAFD34ADFF5DB48523464
FCDB981517B2A1BBB781F4AE2D4A2C7A1AB76FCDB4257FF4FCF1486FD61DB32B
0AACF047B8FBC9E96A635861A02AB29A21B1EC13075F5C87A0405C08F4DBC4CA
112591085F40F66DAE519775957DB7AF0C791BC6ABA19D334A95436C09D65CCA
6180FF2E4F697BED5AA25B40988DF6703064F2B34641462005847CF6D27C927E
358A2E9E9419D0927866871FA80FB7CBA23F14E5B8A5238C9E5AE21B84786ACD
DB7D933AF8C9660E73FC9A6FF16F7F217DC58CC6B4D02C1058CA6E1F2964D64B
2DEB5004DAD3246BE16787144892B2414E32B221197C77C36E9A480584159C0C
4B72CEFFAFE38A3858B0D439621E396376E8A4C465401B401477242E7C39D694
8DE2B796594FD8675AF3E692F506B0339D8B416F3A6218D51357A8B672311894
21A260F51EC51C63EB5B91379049E22E5202495B517501382C198665023BE8A9
36CEDC15E6F7EA4A8CCE7B5BDCCD10E299A54CA7CC4A07F36A2BB28792F9FEC0
45EBDE273B124D3922F1D03F50DB0F17F48A37EDA1363B226321846936FA75E0
3E99FCC9E2CD295B6422E9F76F21E0E7C1301648E38FE0DD2D941AF50B30C7CA
AFD089A2421157C18A08258F78C0C0E541A2F3460799E7C2FC516E4C82AF806D
0B6C8E97F190CD283E86B924D481488A10ADE265AC2BF82230975D13F0A7796F
830A5A974406020A51B72506F9C996E7F4524D9CE0999F6630BC129C7D453185
1876AFCC334ED3DF592312E18E139A6C8C1D94E719285AF878941483D7DCFCB9
DC4D3D44C514DE4147B98CB9BABB9468346BA00F3DB0CFB12FA92499EC43D6C4
22939A234410BB644AD9BF5F65C7C603EF103E88A3CC904D859E0D3A36E333A2
CF3B0EC0908C2A27D7CD3D01A31AFCC8EC232CBC37BA222430CA8EA41E531609
F0F9314B646FF02E89D3544DE9FFFED95541C5CAF93AF4CDB46FA66E494E3471
FE5B7E38A062A32AE497C74716248BB83C8E71ABA8CC7A24E18AF4EFA0E7D526
2A75DEC930E0638691B6B3657F6548821227D8B4C468B51BC6B1604ACBD15E91
79A8247FA6B78044358667F3D105D52B6410ECF8B20DFA41C1E3D7EE3D1EF450
2D4923CB6E1EEE0D8D2A8D1A38F1895EE944ECB50344F4A59E3D9BEE43902BAD
7894B160047AAB1D5983B40574D0E40FDCB53A7726E1260696B6E584486ED1E7
38779197C1C7AEE342F864D9AEC23929A0AA693ACE2FC9A2ED093040BBD331FA
A789957E80A18CC89B898DA86DB39BE7B1EFF5BA82A495B08CE098AF1FFE1BA6
9F5477A27EDFF0AC3B063A8E4FB1C8BB2F475A9527AFB437DE008C946B04D00A
D06262EFABD5FB4FCAA92B2A337DFE7A3AB4158828ABDD6A5D888766F6BADD0C
84A8C79EEAE9D86C15A276538C90F094BFA15F035B68153C44B8000F950F3560
DC271981FD962D05BBBE2FA534CCD3B98D45174D489661E7B2C76FDA77E4E8AE
2D30265BE3BCCD6A360E6D373EA3FB41D9C64ABCF4F910398F85753E6751D924
B55CBFF6573409CC6B5109712547E6F55E1E7D1536859304D7A6DD1F3E7CEA77
F91ECC1E90302C3B176023FC832BC9206F583852B936D335C829D5BD94D8C37A
AD55AD8CB8AC0D7840747BDCFA79747F7C1ADFC2EBD19FC7B582908E9DB1B355
941E404619E88D92BD5D882614AF05D32DF50D37CB0F3EE9C84BDE3052270C5A
0CC3DF6CE4FA1D5F8B2E4168ACFB885A1F8DF04196AFCBC222E86B1CA9B72792
09F7672985D2FE7DD6D6A7491EE4AAD86994215D07D871E2C4582048B435146E
FD260E0C183CEB79E7BBF5FD1386A31D420F557E3CC1C43E46A758B4030B2C22
A69A447EDA53671501CFB8B50C0BDA948FEE354F5A06DC03E4AD34324F3869DC
9E9ACE3292833025783BA1439C8FA1F995EB036B35A0581C80E5FE6184C0EB37
A6384BD6EA980ED092B713828A41CD0FE4F066184D8C33C567CCC6FA76E8782F
12E36B6CFDF07FAE4E9E73D8B03939B016FCD17E7D1BC2E308A5F53674AF5C27
FCD5E2900643A46FA7EDBF7ECE7F5C6BE3C559AD51E468FD4641E83727569203
85D57A54DEFB3F12A22E9C08E331D44B117AAAC3E76855C49644F75B4BBAE2FA
BEC511198747AE90B162400132614A4299CB4FB06850EC6688210E875CB4E071
EC81F5779B6CD1DC855C75A404EA6D76D83052D5E9AF380BADB2B4025A839BC1
6390D41B789D8773EDB79BE5EE55B4CACD77B59554F8A61461F15D6CBEFDC634
08946C54666A41E40DB39DAC0EC01543AE2C0F1D1C01ABEA97B44FBA094AE43C
EA8970ADC55E526E1C142EFCF9669B560E1F07D5ECFE74FC20A8C4758BBC549D
E9066C204E1E523AEE4186ADB8629759841F1AF6155A102C9B559C9C6A688E33
E3A019E15872FE11B602FC980BF244160608D200EA83197A291B6B7ECDF20054
594CDAE65D02F6B775C60AF260F059392A8ADAE1AA4D0B87F3B0B98431874353
3B5C8CB85B2F6350BFF5C065DFAE3F66A037FA31CCAD08702A1B7BC8DDE1389B
BBE918E9C40016BBCA22781A60B13B5170AB834E4DB140C89C6BF9305E1037F7
434FF51F673D7982DB8B61F2D19AB54CF19D43E3AD9ECE4B8D7847BAFF73EA37
50A1E977D9F8F815BD4F195EA6DF4202F6B9EAAD5B10B1DDD1FB34881810DB29
E4DFAE2A7C10A688D7F164BDCE6FFAF642A8FD9C8810A3F7D2D7021D30B2605E
5AFBC376E05BE821E5F8AE11DBFF3B711C5C16F63F579867B8844AF91BB0E1D0
6F359BAAD726B8F2F67A7FF22AEF7868829B88DFC867A74FD542B88982479EA6
D0619759ED0EE8D2ABCB9B4500CB89CB6B7A2436BA1AC38A00CD4303504EF1CD
FF218F8E85E542408374E8F77945F29D5D2B5DACC2A54FB5066559634C78D2AF
B278091CB27D1B55354D84C78B3F5D23096D00BA51B06CC844853926AF724AD5
8A07510B385F67E5B93F6AA36FC9908D89A17FCFB79CF6D2EC137291189F3BA8
7165BE07E4B23B3453C6D6A014A04AE1C934982481B6A8F8BB5A1083B450140B
02591EBC4DFB31D5C5329A2A83845EE50E2B8CB9B2055D6A217DE65E567F0952
4B19C52F5F97D2739EA5DA7827FD4705D5AE055AF191E3E382F694D88FEF1F73
6FFBFA1BCE0CD8E14F613A681A9BA22E8E5A7DFCB77DA388BDE77EFF9601034C
F2DFEE8E5AB039B431E76DEDEC90C2EE33D7CDCDFB9CADC22997954FEFFDBD93
E1025F882530DCE4920990185904CB49D96CC0AB7109AC61A7EDA784EA6E1672
9B387849F6EFBBFEBCDA66FC986682B79887EA5E1D16329FD824AFBC5D93C58F
FB7607B651D16907780EE9649E8687D7FD256A3AB9736F10AE9E79B15ED12A45
7530553CF246BD4A714FCF196BF0FF0B02F84E28D200A884C4BDEDA535C95E0B
DF03E8A7F479E195A357C3474F7AC93101EC9DD98B50B023CF9485099A705834
7BE6BD9753E5AB21E5146B68F2D9016406CE949BB417CE099ACECF7A80403770
496548A35D85325EE12E3EFF2F55428C06A8AC9EFA1694143A83A19256330CA1
44CEE6A7B810ED07EEFC238AEE407D222C16EE33A946282C27E389FD51E1E2E5
437B2FAA19E7801B79B4236A8277A0CDA1694702A8468E9CF4DBD49712B847B2
CDEFF9314F32EBDB87D0BE7AFAFC86670C9C2EA8D60F0EE98C64F452E2B8381E
114FE85D2A2A782A08B7CC942A1B6FF768DAA5F1B953C9F81273E5A033ABDC7A
F73186EDE643EED531A2D20E6F32805310F3B8063B371D767D9DC59D4FFDEBE8
B72C9DC8AA401B75B2131DE3A40D834DB2E5B7B8A3706D2671460DAA9D2343E0
1E3A1AF2EA23772B303716AC785A2DB276614AF27854BB6658B8946623938335
640B220BB920893394BF3BF1317541CB69A8F33130BF2C4691EE1C2B47F77EC3
AE3613D8EA11B2D6F70C51017D6C5C3637CC1BDDCD5D7C81C0FAEC1EE09E1207
4AE96D6CCF9B65CE56465BC22DBA277BF7AE805E78A7B390E1FD4CCAF453DA48
44EF8C1CABF51EBBB8AAD353AC8D4CCC22658D05E162B5CFDEFC8B5185A2FDAB
009173A3AC8F0CD9EC25016A8C2C0BAF101C6A5EADE4A529A0373485A2343868
45C785F4ED7DE7C0DF051BE098538ED077507D0705A24FFDF143867E37DA8E2F
868A32B8BCF7B67EA9C33318F180175D7B07B65D5C66AD0A0523DF63D7063AED
18A41E1B2F7722C975935917045AB14D3A13299E36B856711DD029568BF44757
5F9F8F584EEC66A10BF172679C3F22468AC49C4B97E42C831ED36BC9D51C7BC8
F854B970B8BAAC17BF31D746ED549D6644AF928B1B55800DE0B110576BCD3EF9
F1C08301B6E2BF32DCAB3E36E4A1825A5E54BB108A4F241E9969677BC2499289
0BF1C7AAE545688C188A65B2FDEE633B73261AC119244F74D2A6ED0950C1DF4E
68D2A90CDC45FE725B2F49332A1DF5DAE16C4F1D237E2222FA4DE540A733FBB7
6A0DEC8FD25DA3540353B0B4D5BE6D2FA449AE74356D9829D404507D21FE6243
CDD503C27BFF7F6AF2956AAAF55B37D21EB4A738D5BE4B46916C5A914610E549
779D211EF95A2440A11A9C9C347DF8B68445860BF62A3F3126D579ED6A9A042B
5969CAB4C6312981DBB40B36EDE5DA733E674858EB89302D4A3D2DD8D49E9CB2
649764EEBD31D3136C7B7EC6A00C1CB9FBB24E3B2285F6754EE6639068BDACCD
6845C17ABCE48C7838CB62A30149CB2A5C6B73BA0D892ACF7DC77F6523FD9481
638DAA341B756C0281BAD40D34AFC53FFB76ED5318C2ED3623E00E9F2F7D9ABD
8928BFAA2C020A27C2BD7F321F42F4E1954D3E52F4D7E9FA38DCBE23EA65E1D6
7F7BA12B66FFFE696EF9FE9FAF4061624CB79A2E2172C1BFA4AD09EB866F93EF
D7FEF026C6F2116B562F5168FBD92804F668163271043551E6A76519CA525702
9D54F1106C097B686AADECFF3F05A681B325D6F4897311CB93072108AA9E3C85
59DB27998E9B329A2D10AF70B6E7D98B2CB2AA478A28E24D36682447CFC3947C
36AF45C2695E8C9103A81A20EE1D0F4B272FA00F3B2ED139A43B2B0D78135D0F
D0F2047AF10B53D488E07C22C764D744AEB3D556A3261A69340031E2FB3890CA
CB93B06CAE974A46453B19C9F90B0CD2F531A4F7EBA31232147100CFDAEBB8E4
8E47C8C2C6AC0F3E1331A62B60F624F9C05705DFBD8B1F9D07F363438A85A3AC
22838825EFF1BB411B0D62D9ED58750211C0AF899BD80CAB6FF7F0E0F758755D
EEB5474796CF5F07DD3B40A416D03B45904A90ED027F93F8DCA5ED37AF554881
170A0FBDC6E318905FA4B3A568246772967F85963C6DE273E9C8E04C34E6A5DE
882C4C52322C21AB84F08EA9A0DCC05368FBF0F35593DDBE3B072F31435A64D8
F021D2DF9A4ECEA0EFB54BEA0D61B32264D680
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: rsfs10
%!PS-AdobeFont-1.0: rsfs10 001.000
%%CreationDate: Sat Mar 21 18:47:14 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Conversion from mf curves by Metafog (c) 1995 Richard Kinch) readonly def
/Notice (Copyright (c) Taco Hoekwater, 1998. All rights reserved.) readonly def
/FullName (rsfs10) readonly def
/FamilyName (rsfs10) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /rsfs10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-2 -300 1240 728} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
4AF1DC3456B9DA8108CE7F2380A151DBB59CBB616BB498185CD0D0DE28290A9C
1DB96124F5F796C7A2FC57B079E292DD1A2E5EBB88585421F81BBDC63FE33ABC
2DF705A2BE4F6BE21BED49C3E2FC3D528A348CBEF34339397282607E56471B4E
B78EA8C9F24AC14AB83068335F7974D7262C18BEC4AC5FB4CB5E0D7C410A3F08
57FAC1C117ED77399C1E264A853EDDA05A6117D3DFD28F96E44B1B8D3995E42A
E0B030F113EC027670E66FF845D9F93808284DC73F51F44B4C210997E261644C
59B3455D7C3D3AFBD65E28D1AA774273FB1B6E9AB4F56464B0D56911EE6CB802
F1C90982836A63EAACD2B2E9D07850C716F7D1291C59433A10F31CB9FB2F2512
1CE1F7F343CC06008D111D235C75DBEB8CE22E88E207F0ADDD18772276176BFC
F43EEE4F51613C545A2A49B34E4237BE57CEDEF63179B73879C2674AF40B79AE
024EF39D4D01AA6E8E83BC1D5F393AC1F78D133A004DE64C4AE52897C279CFA1
C87E605E5C1CFC2F4C72A0D0F9ED40A8B4F8E9EFEBDC1D60E353DE792A091B4C
39738379EBB7BDCE4D06844931D77A2BA45D857EC30ECCCB37F85274F283C27B
4C9BDB119847F4422B1FBB4059A5ADEAC44D234520322E2259CFDA894D6148CC
1E0EFAEF5666358F343AA0C6ACCEFCE6F3BFE30C43C85ED1FC565196555E51C1
0395BAF253393AAE179F635A2DC0AF3A9BD67D385A9A96A5009D09BE5AA164FE
8A48F5DFBC3C2C7244F57C91356ADF25AE852673C48C9C3D4A2D1F06BED56256
869E52850D83D2A78DA51010268631BCF5562B70ECF818A741398D63ECA44D23
567F5932BDFDA9520FEC5F94C434FC369F0BE91DFC66ADCCD21A6AD1434BDCDF
CAE93B9934C7E24FC7238B6D3A663ED5950C932E0D18A0604526630522F6FCA9
A6998225F6C71FD55A5490C891C2B4F6A8F9B9E454670D51D7F883D0E26253DD
07517660B58ED8E1FE64AC617DBF2FB8C7A3E4B0E9313749E436516518542AB9
2BC049832DCAA3F92F1F53388FFB0B20D278D82A20C029ADD4D9F0C023DA1D3F
876CECD064AAC79B20865677C0F6C6F123E97A46278E51F67A14B5B2C678FF58
35A253D3521F0D6769427993399D380FA3A3EB3BB7E6BABE9D8EE8F4CD2AABE5
3CF57BB6B2CD38516ACE47C604E6C51D6DDBC16F7F4F93CEB861517BD485E6CB
37CD4A245ADAD29370E6E4F79970C021D30B9739D646538ED6283BD390EEA9E1
9B9AF9ECBA8A9DD9DF83672C72D9D4813948668D07A824392AEA77B49B73EB7D
5518CE71D48E3C6057732D80B52C6282E6C964F1A79624A2606174B60BD7C683
CF9EC1A3BC4DB33CD5A34A130031327F3812684E5F262E9C3B7566FF2229E216
B8861601FBADA5010B7EDEE6A3FDCD624C4331DB1E16BFF655FB19CE5E1A2DDA
8B7ECD28388A8915A5D352C6EE5802EADBF694C79942BEE4CBC4DDD12449B7F9
1CF404C1A347BF09F7F859A6242E430D6AE665B45B6542967F3998888469DDDC
E0966B6468394DC125D7CEEB7B6AB57459BA6238E72D5622AB74F1BF440716EA
4D2BF7A175CECD4DADFF779CF22FDD3645A10F21359472A96709519E26B67E45
AC47236F9528DC21E7536CC33D8C61DA792DDE69FE2C929FEF7402E0BDD6807A
0B9EB6E89BF89B8795C694A081F3BD46D21B6D0B2ECD3EE5AD5C9DEBBE07877E
6E14ECFD284E2722F7DE17158A17E1FABF85E4FE7A88944795F9BFA7393CE77D
A9380C321BB9E395ABFA3A82410E23B2A0C5AE2F269CD89B83FC112D76BBA05C
520069DB1ED50309A2562F7EAF7EFC44206FAC9341D43AC601DF80A80EEC9007
AD0862186139B9F94BFEAD5B0A0457BB8D7B606DBC419225743817957AB44B56
91CD6EA83EBF879D237516
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /square put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DE90FFC8EC5E93415
CEE8039BB28A5D76F9F68D7637DF098278D8A99D797D4F0169E9946893AFD3E5
7973A009094890C94D3224E75B576439749E63B7B1D7D501B561D3E184A4788E
3893178EBCAE7FDECEE4C72436F44B4F3452249DA4FF5005A959C34ADF2D9D5A
EB2B1483938BB1554AF95F7E0B679C0D5FE02E0CF9AA45628844A54272ACD915
2362D162698BC6F7535E14CF202C75FD9B58F3876009CC5D804B153916371ADF
860312500155CCA40C37B251270944DB64EEE0EB5716FC088AD867E935B40F3F
EE29A68FBAF8F95762FD3FF5A5A560FD903432A3A9A54A710D942F8A6C4128F6
5482D34E2542A74A0B5C7FE79F79CDC16D3D574A2BA722EB0525A5EF81FAFD69
99AFDE5158AEBF878BFD7FA9BD8962186FAABF1E2593031D084359B02ECE352D
E5D3D4331ECE4C3BEFD80599441F6C28F8FFC6DDE8EF94BE83EB86DAF47CA940
706D4B043040AA2E719D767DBE0D853B0FA15A4D58DEF4812FDF9458012EC691
73C8EAEC809B80D04EC0A7F06E07EBDBC6F9BC7733DE3F7DD495DAEDFC651D4A
329919AB72B8EF795FC391D1F4B1B3CFB3AE8D5BF42610E48E18C515610AA977
88FADE52905B691435176F4BBE80618AE6B86D98E1F393E24CEE3074DF7C7544
76591F390E2395BD735ABF43B96CDAAB034405E456AFA4A45DE9C0D1C9F4657C
659E233E6930DAE802AFA849346EEF63528E67F739FD8C584BF5F2330AFC6861
6FD4EFBC7133DC0B71114BAB2F1E01799A57F82B0DC22D42426A9C3A2032D7E9
A167A02EF8CB8F8567D37C24D129F55C89C3D36D2742C651A69C2272740E7B26
42E0172537224B8B442A1756F8A44BF8123F9442C97B78FC23239C6DD31FB565
92515D5D450F37044F72829669A06855415A52C262C9F00D59438435E6D69181
3CEFE43FE80E8301B091A9B0051AE24D4B97337D621768
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DFE4D3F80627CFCD3E8BE1D7656C518666BA45A27055C773B16ECB6
511E2A60E0B185CFB488D118D74E8BF9637F0AC7E1C1D9184DACA06F816B12B6
478FC7ED76D24953253E0B2337E08EF79784F0204E1293F5E245E2A639E0BE14
4B6FCA0783A8D0377B11087373B6D4094FA159335DFF314AFA6117DE2564D95B
D8A43D0D6AAAB067235908259066D11DA94413CA311EA42E5D2E35ECC22BC5BD
0404FC21FFB7511DE223A090A7AAA99476382AA90F69ACCE6192E45DF1F389AF
BC623F91A309F7ABCCAD137EC3449FCE08F3DDE316796C192CF6CC91C45BFD28
131BBD91387BEBD327E67EEE2AA8879BB14C02A1C17A6E747D024BF19B4631F1
869F93CF571D4E1C1F8CC5DBE1FF1028AE971AAF5FD70FF4423F9DC9A0950A2B
0B48CB7824B855AAFFFC600B76A4E9DBCEE8170E3E5917A2FD8B73CE7080A142
BE0A1AACB91F3029E27BB62401142B171E1AE716B7F2260CCB88476E32DA4D54
4EF671B66930A084B63EDF20590A9C8CA124D1254734F24C422D8A98D5A956D6
95860B98050A8C614BF0BCF9866E9FAD1D8068339EA64E6392B51BA9F1730452
A8FF4ABD82A18D496878066CEE28B579D9636B62813D644C2A4351F69F9E0977
7C26C5587E05DDC8CCFAFA0C1D5E1D35C64C2AF35A3F992478D62CF47125D10F
B704BAC7D7F31682DA02DD3878C3BBE529B1E8318B4DE2EDB160D6EB534DAE38
D59111FC848C1F9EA3424019C6FD42BAAAAF50F3310B15BC25F73B34E36223D3
6412F89EAC607E38D9202D4E9909EC59F45EF050CF8B48FB70AC3BC3152B2787
5E87F8C5F58C101D404AF36706658418710D30E92B153B1D8F7F3F917CE1228F
992B09007C9AFBFFDFE056AA5389459054CD24F7A4E9FDA6D4C89400708253B1
6D2DCE71C432F043A459871A70037573782CBD30961BE3E44C93581CFDD643DE
7E553889BB3DE74DCECBDF7BD4B7FAED7B610DCDC65AE2ABDC58DC90B98034D3
BC6F03C3625D3FFB31B0EF2B5C83610797C28F341F06D8E372858CA3A619BAF5
F056528EBC2405B82004DB8D9E8A1DC9EFBA2B76B02F9B963C5C69D38CDE37A9
9775BE0BD506F7D93E44B9C9946C6E228FE28DB2DF163710FD88E772B3EAC210
2286DEA2A1E2F8AD4202ADF2649DBDBEDEF835FD5E92C9FCD9BACF833A9D6A2C
960C43534025A0C21779DE2D8E1E884D749325D57D1775AACA14B0C7EB57EAB9
13165B632D6D611704BC0AA1D3CF822F7C21F5F8BCA8559C58B4A4960FCE4C04
197A878D87A5950E75AE8646784B6A6A3EA918A1EEDBA435A780403A0BA41DD6
93AA607A9CF032A8B77D83794C5D22F88820F1237A889FD2AEDDA5AE910115BE
E908454750A5501018DB79AE4E6168C751B156EE58F548CBCC6A3B60E8979067
04E49C9537F617C5F2F5268E62063B7A15240E7E4F6A352AEDBEAAE575C9F6FC
773E35283DB5D48F91BF137077B2E46728D2D6ABE22B162DA9A7BECE3475109E
273127FB81C19973A7346B4A33C9A93EB94D553D524DC98C2B0434930F8A556A
4E24617AC2992F18563DAB02F2AD53077D8FEBFB0508A875B926098D79B7399A
3E6E3A0C16C8CDF868A3D9398DB3B6F50A654121EA64192E8B8D04524F26ECBB
D8688EF2D8E51AD6BBF2F3D93DB638689BBD7BE60AAE8C3A3A8807B6E8F1299A
075D37011E9640CFEED25B284AD147C10DFDE63A2B427E96FB10CE27570E544B
C74914B86E790A8E26F215CE47479C8CA4EB34586CAE7A1E7C98998A8B34E3E1
AE0B9F99909B9BF92A47E019631898AF3621AA02DBE09004EB24DE98385CE13B
21A2AA5B91F19B52FED657091F52D64E00464D792110E308A1B2129DA66A6D4B
7F29FC6E07FE17C1887349FC5543FB9BC84C761DA3E5CC9A256B1D44389CD3D8
4314D93947A762A93C50ED7B3EB33E395DF47799D2749A60F98EAAF0CB012535
8ED3BC4DC80E2E7AE5F15D8883F522414FDBE2F23394AC6A2EDB30AC479A4D3A
7956397E485D1A8DCDD766748F707851CC4D9DE95BD459C4924D8663F02596C9
ECBB9B499D9141B2D76988DC97B40D833343743003EB357DF3C02C143DA9EA39
A006AAD53C17F4BB21E958F4A959459540A4B6DC9C72C3A1E89E780EDF5B3E64
B1609C30D83314038B66C6CE38A9746AC6597FCB1EB08148A342D6F7BC605DFC
B41B0C7BD9E0EA3AED7A01EA4CBE81B17155CAFD5CF4842D7F6431FC5BAECA06
3DE74322EF4BA46D5A1E4B96A87F1402DDA9C28049F0809862225B0581483B6F
FA02537755ED32F1F0507C82A7B9326DBD621A93503EEC703246461EC9B0C10B
ADCD8A1F326C66CE46D1611E660A19A2FC39BC31FA63EA57071878618FF05462
4988E6BB58AD65327C76C368725A4CED509D0070EDE0C15C332F2470E7FE5F8D
3482201459531005660397C74BA4DC7551BDE0D66D79B090E0B93D4C6BCD6185
46A89FCA21161B0C97025B026B6833B252DE28BE361A383EEAF0BA65F27FF40D
BC1522745BD9D5685E33918BEF5C737A391515116E6563E3BC3E922CF965F690
ADE2F495E4357B95EC5DBE5B203087AF8E2DA2F894ED6AC5DB2C5FA1F56CE1AD
DA8C40FCBB955FB4F3CE0A164215818E553B240FBFDDFAC64C74D48856603C6C
228436F4ED786F4EF65C207A73AC1CFF969E04A87A6B74B910D2342C13A68A50
B3C8A36DFE9FF0F48D1832E80AF5CBBC32D381F0EFC15DF4A534AD17058B8E88
AA642D69A32FE000AF0FF574A8AC103CA1349A39B3F5907B66ED0334D8891764
6409737252E593570C6EC8D68BE2BE136F150DF2BAB4CD07924E9368A2B84C9E
A9D8BE9CEABA2C1AAB75E6B7A5F169561C704F60EAE1DCEDD19C2E1126466379
69F725635534EC6A529C8DC4940A7282FBCFE6BED36ECD3B2D68A2AAD8941F85
3CB8B89B7688156EA714660B66ACC9AE031C4DEC54BEE42E887A2E726A6E5489
BA3FD9B26E3550CFE91C54AA61D40A0E16A1FE7DC115879F492E4D13C3296EFC
860D2A57D5DC5373A60B2C6202E35F5FFEA1FB4027DD39AA60FBECB67E256306
4DA59723D8FD9CD40307F715DB71447ABFA980D1D8F6179607A73EEFC630F3F7
733A0621CCD57C7F60645B153E8EDD8BD7A5F43E7792DE58F419474B8C49B04D
212B1CD239F193ACC8580ABDA2F7BC72CEB25F422B9172F72959DBB9F44A9DE5
3E47A634D7AB874071EAC15E43BF7EC95C240E51A9730FB9EC2B59981992E5C1
5C7A56AC8707468BDE59944B07AD512B9C05355FAFC9B0045311714E59EF7169
8825A0C6F09AC76717487BB059DD7A3BE32BBE8A4A77DA9AB45E600F63672BF0
AA18CAB0C70B15B6FCCE554E9FBC1FC9601F6E87ECF6F5E76A1304EA68EA1B38
C661BC389FA71B09910979151A2DE3304F061141B6A01644A597FDF4F8916451
2C80D1C6DA82D4AA923DCB7230C45B720E807D60D24F43DB65C0D3E47B18B2A4
D1E538FD5CA5FA01E4F627816CFEE4760A9656E043F4F14EE43CA967395ABF21
E83E25A695E7D14DA39CE0DE5113D07A419FD5FBC0040B0D8AF60B505174A1DF
319C205C7F87E64013CCB6B421881D0EBC56994A3CD4727FB43859826EFE3D65
1E033303A2AD9E74B12A344C63AD9C7C083E38BD7E8696E1775D439D8A073A26
24B32B4CB779B3E25D0FCADD7E7DA222435015C0945375BBE9CD63AA3CF9B4F1
B0917B6509297916937873BF22E6B2271D67A94B587D813CE8818625DDA89950
7BC119CE0AF9131A1E73E0EEB35BCA1FF7E741B52AA3FB84C5EDE3D7BFFEF7E2
DC5FACEF493B08B8951DB7A1BF65D105C8A8E7861C7CA7BE430CF349219C9A8F
C9573243CCF1E496D5D556455F2EE0482F1335A76233EB1DE8B728E94E9984C3
E066B665ED57381FEBBF0DF560192FA198348A587B58694DF4BB1F37D23E56EF
994980B2E3DFE45A76E3D55078E9123A36F48EBB9D790BCD6D813D150A71ECBC
FF6620881041B399DBED2C855B20BB6045BFD5989D88365E7B787A9D0D0ABE48
EF41D0F7B8131D169CB6CDAA4440058D4C56B5283F6DA83360304FD417693CF1
F228BB2B473B508B39F5BFD4E1F7AB4D2E459BBC76D60B171AC0972F16722764
6FAE55DC2FEF6129102220A5E81305FE80E6900C4AAA1D431330C9AC9FD85376
7FE8A25800B15D2C3F727B560FAB7F0EB5C453C2DEA7E42967F4E73E4C292FBA
12809E9C4391FF5D3E5A083C3E8633118A583248260179470E8E84B5354DAF37
05C74A7DD275E29CBE07B409619E79F270BCA1DC271571C6B0E229F68541A65D
D2F8F5CE473C4D656F6B16DC1F7B7C59672102DAD81E2D2AABE0AF065890A926
7EFEC64D2F464233014D4C3BC05C7D6A59025CE2431E28C3293CC891959A234D
EC41C9E6F20D2EB2784860E5049235BDCC8F670F63D3EBFA4DE86C494BB5B7F4
36B455208E62796ADB79D56879A4D4FA6C6FC08D06E40C5807235EB05C30D081
27C87FB94D1E39427B7572E807F40207E515463FB717A6E7AE78D5DD8A0B3F8E
D374F4014C5C06EBC729280E8DF8D728E5F1CC96E65C46D205B07A3694641ABA
BD4CDC8831353AF93A55066C28FDC21D4583439A8F49219B38AA9C8A4EDB0707
BDDD11DB44246590CE71574F2DEA72D2ED8AFAE28D52214450D54F6FD2ACAD82
CB34C3726F72B84D03D1B8D8367985384DD5C02E319A37EB5CDD0D66BC78DB58
179BC2F45553673D166C13ADC94B320D5971206D76583FB16360DEA07552FAA9
7813EE12174C7CD696301F6B8FEAEC1144748A40418CD85FE1B7C3931096D7A7
A8BBBEC8D308A88228B1F44C73DA5FA01E47A504DCA06E297AF99A464D679D68
EF067CA9BC2708F019E6ACE7CF22BBFBB9B81E57DA1D71486EA9D2299BF3A7A2
58F508EC17C1FC8C4F065447C7EC19F3A13DDC1507BB52602C0A9E785A8113B0
04A530C9777AD0AF01E15367D375FC63B9F9044091F83F6E4DF93B37E66880FC
FC1E7D74B63D88B1632735AF8F3CCBDCFE6263DD35485FEE1A0E9E8A694F5AB2
2E0B576F5B789A0ED5B7D13CF0F489EAAF585B97EE386A097AAC9BD7B9E78B9D
160E3F5DDD22E105A1F49C93A2793D5533412ED762B13240B7495F715F800C1E
0E85CF476D0EB6DA3B451C8968C7790D7A3ABBB16887C65650CD39ACB2A8D896
4498335AEE2E3853710AD9B605F7DA45301A7F6310447319F2134FD1A34CB171
BD224EA8B5AED06ED4A6F7BB1BEEBFC973CFE311A9C1D285F15A7AE968C6C3D5
84921CFB6869949CFF09259D4A204E0AEBF76083D5F723F617D40D230999C906
F97AE33DD5468A3B1062E543E4D83E0EA1EE90C939A917387716CA21194573B6
1F7BE09A971CABD3CB32BAEAFF539184B8AE9EE009B34B0B08C970F3A9206A85
A4ADBD85C5C067E0FEBC84F27750EAEAE148E88902FDBCC61377F5DBA61A3E4D
CF24EEDD570C5FE2BCC93E5C207982FAA6DF87A48660394939C3219BE995D332
1EF81F6DF38A266597660830F40F5E27D408E890D1582BF9C39C38F2BDD4F500
26C2CE0EA171013CE6B3FDBEB1B901961C4B563AD1F6363E18CECA001D875718
B3737397CF876D4A602D2A8F76E13C908794666459CE0320846F5C96C78B5152
BE94C63C2D1436D9D5088BF22409C55686627D35BD9676F71B657195A0D094FF
2C0D425E91404CF5881E3AF035A95E34E6136DF336ECCA800282F5EA2AB04A72
4DED270994F122A48C57380F60A87A81207DF09674F324FA8A3CB9430A6E204A
07D81C1B0D4192669A1FF9ED3E0F9D4551FC9A87C49F2847483425DEC0F7D5FD
905C6B2935F85E54D07D53AE4C8E5BEABB98B011650B2A6F546025251CACD353
553FFA27E3E7E9E01F3713A95BAB5B1C5A25C905D35FD5EB0C930A4848457A42
151D42420673401121AF4B2BB78CC2A3C3CED6842C355AB4746F0788B7B4FE46
6DAAEEB8B2183AEDD09BDD1EAE2BCEF21BA7BBB9B9CCCA2FCB5E7566E858B2CC
7CEFD34C4EF0583C928EB2E541C0AB5B5A9B4EB45AA5F403D80BC3FE8FF54052
F0E0FDF9776FF9ABCE0BA71597EF3E3407BD79C10DA7949E3717FF25B09D1841
02341ECB3E833DD36C9E35EF64C65BE7017223DE8BB22089247B9C38956CDA5F
125924203536CB04FC9885E9A446A8E4C399134A284D32892DDAEF50284D1E7A
70393F396B4145219DDAF0AFE59325DF7370197082ABE700E55163698E5A3051
B80AE691524E1C6F80B4C9AC15C3F0E455B977A4E85AD53EC890318A5A43A1B2
2079BB361FEB1C421EA499C5C32CC0FA8AB3205FCF30F54156B6DFD309097E7D
F2F5C4FEA50AEE67EEC7772DCA11A481C851748399B8EE9BB2CDA45521B31BDF
8447E40F79EB0A5BB43EAE64852665BCA686B33A391820EDCC10A672D2BCA16F
5E769F84EED16A3FD6E80288BBC04B937B6C015FC8F1756E5F84C7FB6ABC924E
9C16EB98E24E46B5BCC5E4C5B9FC74353F6D72339F72EBAA92D4F22EFC34A521
692E4632A68631DF20496C6628A4E5BDC05844CF15097EDD26AE2A4DA72A6BCF
EC7C244F76C0158631A4E607ADD0349A89BC930E21D0F16CE955627282CD147D
FAD535AC8D30F14CB856264BB9FDF3458FB570FAC1A18CA28450A0E70CCED2D5
7F60900D3A5EB4E060AE4AD1A13AE5B45DD2E1F3B5E129B466EC642D080716B3
3541DFF07C19B92CEBD0F430D96DA295448ED0C5C99619348B8D76B2E8FBCD21
80113B69F264AA6D49FC678456404A37F83C32A8203FA21C8014CCC738BF6E7F
5368BFCA0540486682BAA73BD6C6DC1E9CD26F438E5382DAB6402A0DECCA0E88
2A0AF16A3D2CA4A4A92EB3BF673FAF4C3A14FE9A4EEB74C1D2F586E654E2678D
D9CE727EBA8D8D3AC0C852B12375BF2FA9B7DF79F24ACA285FB3AE83CC0BF48F
B4F9F4576B3C8808178CC56BF407F4DEEFF7DB3731D5858B46CBFCCEB1D48DC3
050220E54FE01AEA9875DFAA9AFAA3E9AE6CC9E122065BA462A5FBE2E3EEFC8D
2DCCE11857A9F3F02129EE8DF16E34882206C967113A88FDA3C2B1D648BF871A
13DB3214D658344D27CD3D0D87C1BBE3AA3E9EF090305CD0F57328B65DB24A70
752D83AF025004585BA213B3B3507B24BC46BBC06BFFE286F1445B84139549A3
D710ABAE9EE009B3FE476498D4F296B1223FE331D131E6B567E23778740B2AC0
6FC9730069C22691552BD49107507EDDEDED083AA73224257D546D8644926FAC
F0BF98465891F7204224DCA3A1F1883E077431E50BD17AC15149407E9EA94413
8C5412823DB134F510CEEE4D51C6277EA63125211BF3509B7FC22DCEC6A1378E
B1FC92EFA20E0702A0EE701F5F1095ECB175147EC141D5F9A215581886290CD8
BF97D8820045DE78A93E0CFCAED25BEB80B35C81E72E04427C505207259D8AE0
60FB6FA47D6FFBD78275C27AEA6C7105F891BA1BDF1ED89B6B462950D2CEB485
259EA076A2490615786004C79AE1D2AF03AD8DB6600190E9DB6D9BCFF3AE9636
538BFF70DC05BA00D4A0B6D09225A752B2F84B19050B57863D69E0854C605977
DD4555BA2F0335A698B9B77E213AB62F9A29A65908C9472D411DCB1572BFAC07
574BBFDD471C63C881E607F0DF1F005E1F96F80EDACF695FA9BCE3629942ECE3
7A55B1FFBA51791AEC6F46B67333323B5124B3F90FACD6568DD26363EE37F927
395CBD70AD47CAB559F25283A0C7FAF2CB6D69C1EE5B45982E58871CF84889A3
ABECDCBDDF409EE1DE02B57008DCDB0F31FBC482F41126290BAD0885D6FA2690
0FC33FABE2A72E3F3AFBC716A6CB22B80000F4C921D049DA82C752D4B15D9D8F
327ECF8A2415EE348AA0E73AB5014176A6EF8019979752F02EB03C158F083DB9
54988F0A64621C3400EAE8EC9299FFAB355347A24BAE217E4421D35B8BC31ACD
81B3E530D4D5EDF68AA6487109A330FC50AA0CDD892EA830769E89BF14838CC8
DBA971B1C33AA7E0FA86F6F0DE5D77F705C55A9EEC95463500F26ED3997967F1
A5AF3D82A983123A23FA0FB7D21E23B9F6CD8D7648E82D618F060D0A5FB17CED
3EA4EC3B8ABD2D510DF14A8FF8A95BC7F6E29E78938280CF35522B9C56193535
75F295EC55D9BB4C3FFA13CC9226EE21E3AF486BF30A60483928A333F828D2F9
BF42AAE98C22E8EC33C11F45CEB3884E80B8AE7B5CBD6242C1477BBD542757A1
47FE07D8FC8E95BDC869ACE86BB05948CC732DF7C2717D782B4ABDFB546BB343
3B72FFE6C36056E3BA5588B17DB288A25F8166A4D5358CFC02DFA5BB313854BA
1EA658F29EDD35B38ADEEC39258D89DBD93B021558B18A092649E855180E07C0
07A139514E9BF54973FF0C1F23E9FE686F56856D62B97C153C99FBFF34A01C6B
9BB2D3CCC501E20885FCB7E46854E96B7BC2F8E6693828CE5379D4E8BFF1463D
EF4DA314F6A3F4172F25A8BD4059376236C212619295D4555BE6678EB0B5C4A1
D00EA676BC80DB51B351EAE67459D92ACBD1402DB80936AA4000A0F81F7D4640
F595DE4DC41FE6CC3367037BDAA2AA3D423FFBC091CD99DF15DC2437CB5CFFA6
C6390E2411BAE54AE5425F130787D3AC8525FEC35F145E48DB310C97223EA01C
8864731BF387946C5DD89287FCA41C3594CFBCFAD9B6000EB53C9588F5EE57E8
0133521ED4F7F53A695FE28844336F8BF33FB94289E2A4770C5626227FAD9C47
B0218392F27E1EC9E8056810DA02F2C225AF51E12D4B388AC99035A264F805F9
E35F58BB088D1DC11A1E87E1123E880581046E3FEC0752CD49C6AFBB72EC7116
078069A129476A4B0D8C84002E01011F006B5C95A616F5F091810CD9936379C7
8061B83E035F9AE992310FAA0477B7A5001036A95DDF1AE09BB7717CF5BB7E73
4B8BD712C0C43F01E627E872C0E7863E7377706789DA8FB85B506F9E230AEAC6
F766AB7DC0AACFB127FEBA98DF7E58D1B815F1DB3424698B4D8FD7587C18B99B
9B7B3F93BC28AB48DED8C3241F0C71333A3E12FBC669B70251CD50E64134EDB7
6D653ED6882F18AE31F437838A6472C601F056552345D697A7BBA4EDE6975133
5DDC3C4FFB72E7B1E6CD32BC959578BF2CEFCCC139A0FB8D86666F4B7EA8705F
3A6BE56B993D1612CC105D1776F6842344F17E72D9E1A0CC6DE806EE1840BAD2
305ECFB83AE2AF651BF6DBCB2D3C2928ED6B7072CDADD3781195A1B1A57B6AA0
258AC63132EE23534ECAB117889F479A2D349EF02037F616AA5AA7FAE5DA8314
7959BF44AD3D5418A0FB78C562B56F3D23C51F916533B1424E3AE2330D387101
4EF824B1A059AA16DBE9722BB797C95C78234E6CA6A3054614C40EDAC04F0210
844FD0368F3589A9233BEE053575F30E3F12635F121B9572E2A90BF144345B27
D7316BD5B597C2A77894DADB13EDE5F3BE6A296AEC9657D18940FEF2AE579B72
40ED1B8DA3EED49EA834076F7038BCCE7D58C7D7E056FBABC946F3DCF14DA56A
EFB88C7193130259F6959F56D2ECB56BC5CEEE6AB540D80C104F40C73352455C
7DF2258C214E808AF004294591F8CB2F26138E50D65D7BBCCF05338640708231
4E4002307D820BEEA0D6539FFAB0733D9B5AE72C6E08D51EA1C088D7FE6F3C9C
9251303366C1E2FD06B884C2E710CA128E8B9F99A0A262364A8A9BB0939391BC
57F0D9B8D95A4F69093CF4F53554ADEA671962FB988F20CBA8C218EB838AF419
ED3CD8E27D61B558551F9B07B4448D520BC2387E1B6E77227F602BCE17407438
AC1C3A588B0007FEACCF97FF4576B8CE2A20F23C89E8E60731E9633113BDFE24
55FFDCC353B104B7ED5C31EC43C4F74DA06848203722073116CC1519AE9A23D5
18B07469F871F34C971641AC2DBD01A2E9324D5E6F3D503F3C9D965B4847BE47
FA25A4A579E86C88015F45AC21CF50E1444421D368C030ED6C59006D0F7029FC
1003960ED6BAF64639A430AA969D9CCBCAF5D7D83AB8D8EF473E751730C9B7FF
9146B04ADC5CC5897F7E73126357E0C25AE47AB464910832EA0FDBD8720BE4C0
22403E1E4B6C11B76FFD5EA293C895E9F5A7847651DC379C2B772B3765F330DA
E171ABF32B82AEA22DA52C049173757BC16CC50536AE225D5125A9E85960354A
0CB190633918F5A211FE1CE0B3C7A89D01F8E5E3FF32781DE10FE5FB70E0EFDF
9F8D82D9E97E57BB4BC016A793D98CC7E45148878682360202FEEF63E1D7E741
B37293A4E288D85897830C71E3167D80600B945A6F09B841408C83F71B31D841
95677038482909B802B22A3A23799130B7A4B741D98D6F026F664F2CAD5215AA
712F67BE5B2063242034681665C6320EFB421CE305DCD907D5F4A77846006303
A712ACBBEE0CAF07E902E99F044CB10D4F5E8E6C064C37B2C223E98F8884A6D3
1FF9F4A62118514F9C2D396281774E66DBD37618D207ACAFF4DCA56A2102C5C3
9174F5DF3E23DD994111A1E886DD01B10C294D475530E48A1DD6CAFD11161426
7B48C91C1B998EC75B4A30183D533ED76D2A6AA2C57034851D55A40390592BAB
CDC27C307EA1FEE81E0CA5D8E7F6D3F8E8A73CCC6B41CE82A4F3AED9A0475CA2
9DE790ABD8C5C4B35E149F7EB068D62DD8B4206191682EAF08B610D50BCB5EBE
1950DBC1A39D86F5BF23026783690E94D43B34901FC41704050BACEE78AA9413
3B0D68A83505F659E6E03B5143CB63168D570BF027C2F927B774C765DE40EB87
BB2F3AAFA3CE8303F1B4B7CF6D6AD94AB078C7083FA18E1D271FFDCCDD178A0C
CF922DE513B2D5706CF74830F4E981F02C7FF297B238AEFC6CE2A1DEEE42690A
84909F10FDA8E19C96C0FD39A687303EE7C248C1A7555AC98D1120ED17535900
92D2BBDA2389AAE8E0F80D4A3F0C3CE8A596C76B4E6338EEFB9B13ADA9AF7753
5C38BC63A66B21C14376C827664C51A1A39053EC3FDD18E99528808E4E7563CD
6CEFF0BFF537575BE2EBE9BEA07048475E99FA5C9C3776C40A35B6C72156C927
7E23B085FC0BC73674583037B616858877936840F7882171382C7E504355574C
4F20C66E1E7AFB4C6710523E20BFB289D605B5E7638B2557289C6B1726E4FE8C
09D4D34B30CA2D6A017224AD5E80F3135B5305A2A7BE3CF77376684C42070AB5
1E8A856D787D447500FFDBCC027F8376729B77B58C1B8B5FBA3E3191EE657EB9
9AB64ABD272128AC74B92A6AD7F6D7BD278E2C41544DC269518DCE232D1760DF
DA1BC112FD5E4662A50E37E4DD3EE72183F0F38A929E556034AFBD91323FB23B
5E04155B6FDB3FFFEC667DDD20D9C359BACB32F071D9D12ECA7A57C6B02E65BC
A5F63C79CC2777500C0F4B6E8B6A41A65C6C486E3BEB19D442A7CDDF484AF3A1
B834ACB84DD3310F0A2BFB1EE76ACABD40737E26F94B00DA83AF75C6FADB9B7E
019EE8FC129D15A0086A3AFD4E0C586B6B2348A7981219E201FDFB13D42D62C9
26BB6CB4A4CEB82958068A685ADFDBC70681EA95E2FEC3DC7B4B8770D3E61EEE
DA3DFF2E9E70D2FDC634EC1C90B6CCE0AE7D127D165BE6CB131A6FDCAF2DEBCD
13C0DE6516B649A4EEF62A61BB5B2E230BC44FF7B1C639A1B03ABCE524E4622C
AAC16E16BA0646E94DC087AA77EBF0B8A6166573A8A26A7ECD381D1B69777876
01A35079EF13F26AFB430F2EBC28D05FF36AC6455004C2BB54AEF57E8A5CAAD7
C14D26105696C3D460EDFBA5A2364192DF86CF1D741674DDAED8D00A3AE572A9
083CB9D8B296801A796E5BF8B881C47A4B494DC04C650EEA39978F1D7108E37A
58EF4A46782789C836EC3F0D096649BEC967925772C9303612C6199914528A8B
1A96ED08BD7AC3FB477E64790CF9807DE9225BE725AF9001B9158CBABDB643FA
E456C66308CD931DADF03DA48AC98EE0E7270BA2C1CCAFF5AB45071B494442A7
54EF416157BE2C9643CF98E27B7BFDA907B6B557EE09831B6C8A4DBEE1552E65
10FD62D88752EABF5B9CDBB5E0039FE7704BBF2D2CDF44BE35C3EB124580E9A6
DD4332ACE0A2F62A3849EBA672DCA346EB6F5D6ABD303D67876EF7D753AB18FA
A29BB12BB1011EE8D6C5AFF70E21C739A2ACC5396B1D62C7084531772FA8EEC4
8A442B71FC02E2FDEAD12F104F01CCCD114D834B2D485CAF3459EB0928F84166
B2BEA7252DD85F651BD504FC7BB2C671218C0ECFC7C15ED1763E825A167FD23E
1BFE1487EAF3CFA44B7F51D2F11D02EF7E4366CD0DF79C3AE111AF73D816CBDF
1B1D91319C68CC6BD67DB6AC54D4DD0637509D899C8268E3FCF67EA5E1606EB8
4813EE00BAC6A46A4A3A54E37AB9D0843D56221638F93B29D9CA893A15455DA1
67E695026D727B4807C588A2DC905F07ACFD7976D73A3713A8514105D9D55C48
56E6694D1346401F0700CFC39B790DD152D3C1E2DC6E7AEC30F880F99229AE11
FD8951C63BD836205B149DA99B1E32E7A7E0C1AC3F0D4D04334F4DB2C5ED13C7
02873CB950DED8E8F22B686F1F4AA94D669151F9E2431DA5486F6C7E238E82B7
B2AE2F58CF92E07EC8648BBAC57B97156C9B60364DD8A632D91846FE44396F8D
0137684B2F9CADE27F3BD9C3E9140AA54A5416AA298139B4943E3FD64FB71EC2
533258171E408408F057DEF460832254061A2F10F6100DBDB65203A7921BB9F8
5BA14C13C2C867424A411FC14D1706AFFC127145E87BC0C7A3598493B0DFEA69
FA4E100A31998BE9F1F5CD1DC896D355576B9F04F5C0C36E56E4B97C06ABE9D3
A95023F624C4E3F650D34380CB89C75891CFFFAAFCA1A18BB8278C409D5145D6
0A7F69E4933AE39EC90857397D295C31C49415E7A1D8575AF056ECE2E721F830
323D5EB5AAFF03C13B47B3AF9EB1854A7B2D48D15E8B466C68A5FE5FD5D37483
0D3F891C30C4BEA214D39EFD49C5CFA47692A35BF0D1535FB840BB2031438B54
EB0273B6F075387BB90B792412424DDD4B779F111E4FA3E96644BF2CC4357BCC
DEBA8CA31806C45EE8459F774B24699AAE8FBBB6DDF614266788C8C4102C0222
C86E728B53F93F1B863312D409A38CBCC7B980FAA57DE92FA89726A81DB569C9
BA824E5A763A6EB173FB21F6BA0A3AD9288228A72355F397AC7D57F44E270DEE
18ABF16E3EF9AA94815FC71756B907929808543E422A67A6FAB4050D322C0496
C5D61C21079071F7B223E814250D16DC4C58C0918F05977FB52EC878B35A2F4D
FE4320E31FC56B2DF2E67B9EE276227F53FD36915A3C1BD295997B73A50C33C6
3A041E4E6AA9A8302B1C52C1E467D1DBC987591A43D21126E1780EFA810EFFCC
F9DB6CFC7002D1CCBDC42DECAEE2EDDBE833D7A99301A1F98B7B1E709ED097D5
78AC31BB7FD54CEFF303E498B60F908DA0525BBBDF4832B409D1EC83E6863B9C
36E5923EB3109C7A04CF35FF60888B80D1F665530C961B8ABA7ED343D0804A33
943AC7313312DD88204085D301912CBA62AB40C16759FA5B93EE7318261297A0
2F8B03FBEA125C23B1C454CB9DC656D55DF7A85F0B91534B3C8CCE89ADC08780
BE312777DBCAF9E3B2661D4E121EAADCF883F93360800FD054FFDD0A31D05D1F
6F6C2955657D83733D632BE342B2574168F42319F846B8E0A51618458A1B560C
F69F7FCE0EA3C87302D89CCABF73F4FCA32F4503B71900FDB6ABE43C8F8955A0
03D67E642A06C8E6A6195742E1FF7E6872317B919DB8DA68C89D96E2AEFA3316
9D40CFCD18F201EC817EA7A20AE354AD2E75F1FB85B8E4F9419830FA476BF437
01542F91EEDE9B68546C0F86512D6F78AB12E2C8D114F4F5524B58AF16AD4D94
98788FC4303DF5CF252C4D229DB31CD1041E52E4E6CF6043930A3DCCB0416797
0B82D55B273333C136C7EF214A320A0673C2D77F98B97EFE56C7821CA7FCA8B0
5C4CB67364CE0EE7971A6D625A49B3D2E1D91278F517AE606065F25C27B5A5A7
47A250143C83E81F26F72926CA771D532A0F2AA22BFAAD4CE31FD8CBF8BE7FCF
B2C0C0C46CF4C611F0B55F94062B9E4FDFCEE6467A60EBEE79D7B9322AF4FDDA
A7767120D58A4F5010823AF8FF8191A8A63C07E7EB8C845090A5D18100D43AE9
92AA746ADC0ACBAEB228B65C03D07DE4BDF2F6375C1E73F8B4EF703871624F4B
F109B90CAF9606E1854AFCA51FD41A07DDE1E657AFAC39763C7C3477A124BE36
E66823063D7EA4895C16342E2DC57026DAC8A4E443BC3E9811576A8EDC381617
D1D6DD713B15EA75DB728E828C5F9D41E812274F86F8C1CB2F9C8A178C3ECA3F
7D3013CE9AD73469EAA7B7249B1846892301325566A53B4F556E330002D996FE
7C86DC5C4A36DB8B5381E569BBD0D062228E142BBA5301E54F00B561D991AE68
1FBE0A30A7CD4B771F3A6D06B530750A53F18FF839070713945469F7FF3245DF
F461ABF506EBC2CB98E9DD1922B6F3FCE9D37D65CAB77FC298795D69673B82F7
B9A1D026BCD1992C06CA33F00276405801BC67EF9B6B4B7A63B7FD42BE79210B
7C96705161A9115CB8C675ABD35E9428383E38F7751E4F59255346FC663047C7
A82DC1D4CA7C856FCFEA8A4B0B30C6CFCD31F25868ED46DB1D02D757F13644BF
5B1A82974E9D0CDA5346BA425AE1130A7D5A30FA165B9C9D5F63AAA047435BD2
F737274B8A050620750572419F8BA36452CC0C772D4072AFE10FA47979711EFC
EE73C7A3CB8EF0BBDDFEF0C0BF6CAF510DDFADDB4A7D4762B183FD0C30DBC104
2984DB030B0B5C9BDBB2475F66485A42F63E774649D5826807D9963960C51AA3
5B9FBA96B7CB8DC0D70E851FFBD608C397AB501A18F0074D66983D7511FEC411
3C604691111CAC5F1953D322FA5EC3726DAE133BE4E2341357D4AAC9A1A68425
A73D9E1A93896017A16BB9548021F481ED58DC5508A04157D1947FEB876907CD
655F441B2F7D9D72181E6D89139B8895E485D416178B0DF684BFB792D2203EC3
388CDDBF7576785B6EA4F52AB037145EB9C7642DD82FB833EE925A93B751DACC
D39F7B080AE7B8624F586ADC1D5E413B14EEB8CBB60BF8BE88DB4B00B9A8501C
BAE90E0978CC4ED6F5A2D765F74E30823B0E01693CCEA7E36E19872CDC67A43A
1D044EB04B2D996A6EE38C2DA5C1DC90357A256EA35CAEA263DC80047E7F9869
5C53F63B2D0CEC018C0F54EA9EA9D3BC95594275E6584FE5C700C824549922FE
EF03E14F6A1C5FE96E0D8DC456ABEFE2A7DA3561E122766B724BC09FE8984CA1
A5850A69351FE2106F668189616CB1EA015401B7F2D2A8CFFA97B4A42721586E
67D88C9AB78F8272984F748769F8920F616003EF05FCB0A2DD8AFEC072AE1519
86466FC575C698C5DD01BE5AD08FEB1A0A1F1158EC7BC3368EBFAE0EB72EB957
45DB33D47926D17B35DFCDBD5B4B858071A77EEF977A6DE04007010CD7B44C7E
57060E5A3DF6F7634AA65415E8D9483E69D77ECC39CEEEEFEA44C9F3C3DEF278
CD023A13120067D00945B147C81A96D0E10A65D02348D8C0C8CC089D792E4A3D
A27F9C805654D54E49F7EAD199E38B4EE302B0A4F6B3BAB494AFA93C48858882
551102C02217F162A1ED9BE382151D45F7730F650E35DF5B3A1F86DF7F3F26F5
4718F042361300F1C95A204D4034F0AA09650240F07D27D6C24EB3364B0F2490
54485AF4BC799790F425186AB5C80B8D7ABB9CE227BD63FEF6D877F9E7E0E855
4A57A89D82DC89B1A0E29F31A1CC0E7D8340CE07D037C0AB9845DEF40B09C093
8FF42C54CBF151F59DCE7B53918E31C57B9FDAF128FED6DAA8707CB3087C2684
17A9BD332A2BD504F0A156D5562C6C340D294B7F3A48AF4EA975C0944CF04403
5A77048B56329EC1CD3B34D19A9E5BDFFDD09A85F11C563D9513D60BE541BB8B
6FAA019ADEB087C096DCE3AE56ABD39670099500588683ED613AED96FEC8597D
7F2EB3CB71E0BB9AB1A3CAFB2FD9180FD0C0B21DBA865B4D4E5C4C41B197420A
6AD6FB007E7A18E807F607AEBA9D39314642CB87AEC964DD9519FE0FC01C6077
2B17974A994E8B259D08CC45538B9D60D0881C6FC0A27C5CFD5D5F6B85466924
ACAB986F0C5F26E5749531676915A0CAEFB10D9267E4093013DFEB9769CBF1B5
F23C3BE023F479AA60298C92102A11755B85F8BABB5197C1A0E8CF806208D84B
2B4EB51F936F44C41008A32FE56D68D73E05EFCF68DB44CE68EB520671BA9373
0BA83E19DFF79AF15A77529B3480A69F47AC312B35356EAF8298E2EBC7006A65
4CBCFB3DB26F8D78E7B7742E50E409E407F7C2AAA3872E8037B45DE275A9740F
4188ED58413E5706B12C9E87075D24BF2763975C571DF258ECA6F00066396CE1
3FBB3508200C05D3E21F0F608A849178A292A2A94C8FB21234B524C2D63F0CFB
A732DE319505216B34B72E9C1C63808154649029302A5D70912C16A846804DCA
FD0216412F5D4787D7A754762F42162AFBB1F9B7E9F0399E2C774755BADF00A7
CEF58325C3EA7BAE8D1B327D8C23A47350A71469712F3A7174E1B580E149793D
41DB2F3817BE1C48B87D717CD54ED76CC68F5EC487E2A7B5B689EB1EE528A96C
C8DD890F44D2A0EC63135751165EC793CE646D63683AB83392762E74F7CF692B
54F2F9EC1358B2EA5659C9238CCB42FDF63CF20744AA401E611D6F84FD49A698
2963F505D0F3933FD40D35DB13E26107507EAA0793034D749053383B052A82B8
E53A0F70C18C29F8FEFAD1603BA34D85C141CBFD15AFF46D440AE7894F0231D5
8477795BA572AA50B349DBEF5252F71B013B0673EAB863D73596FD4A8EB79E65
285E89243FD548E270EC5DC619F6D72ABBC621979F91519CB1A26DE3DFC05CB9
2BC9D387E8B0C9B88123C1E44B28AAC6B835B51D65E7DFDECF86C24D464CD574
3B4B8041553FD41091E1FE18E356FF8FBACD423629950CDFC0C0AB5BDCBC456C
10086CAD00C25213477A9C43B61CFA389EDCBCE2D7CE575F3095DD2E17D57047
B2D5D32214265D9F5BD6D3843530DA4C3591667B3205DFE309D50E6C2E72BDB0
3CEB6723D13CA0E846FA5C6BD314EF0286589C3ECF4E370F72E5FB5BF9514D09
173CC6F16F380A4E3086491202DCD89624B0C9059FC9F0B9E1F0E1051D88C465
51FCE5E8273901A72AFDA6E9744C0BE6AAD9B416A74C248509EBE1F3A9EB1EAB
03D9DAB99A9AEEFD1C8473758D8D8F27659CEDF7E1EAB3BDA30B462761F2059F
229E920CA33FE76D84E922BDF7A0CD0253F2A52953F067F6062D8FA09EC143FB
1547771A97EA8BB272372B3A8493D65BEAE51746B26960BF2CCD8687ABE6AFE1
E72DF94518BAB328FF3D20F3F4354FA73220A382EED204333DC88554C1998593
96F7E7A4690F84DADDECB353AEA688D9003E84C5358F715B603970BC529B55A2
87FA5A80B79761226CD7D4264B553F897CD7B2A813B3148D0AC34F324AEAA273
AF216C3307DF5C2F66F32A721DB47C035D3C00AD907E875B87D2EA6FEC85EA12
B91E832AF157635C61500B12962962841D50FBE41BF9C724378BCB6824
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (ficheExo.dvi)
@start /Fa 73[34 34 181[{}2 76.3801 /Fourier-Math-Extension
rf /Fb 57[55 34[55 1[55 161[{}3 76.3802 /Fourier-Math-Symbols
rf /Fc 153[16 102[{ TeXBase1Encoding ReEncodeFont }1
51.9385 /Utopia-Italic rf /Ff 203[32 32 32 32 32 1[16
46[{ TeXBase1Encoding ReEncodeFont }6 61.1042 /Utopia-Regular
rf /Fg 94[44 161[{}1 61.1042 /Fourier-Math-Symbols rf
/Fh 153[18 102[{ TeXBase1Encoding ReEncodeFont }1 58.049
/Utopia-Italic rf /Fi 205[31 50[{ TeXBase1Encoding ReEncodeFont }1
58.049 /Utopia-Regular rf /Fk 188[55 67[{}1 83.022 /rsfs10
rf /Fl 135[39 16[38 24 4[43 97[{ TeXBase1Encoding ReEncodeFont }4
76.3802 /Utopia-Italic rf /Fn 252[65 3[{}1 83.022 /MSAM10
rf /Fo 22[40 83[35 27[40 40 2[48 28 34 34 46 47 45 49
72 24 2[24 1[41 26 40 46 38 46 42 18[56 7[45 48 1[53
11[43 43 43 43 43 43 43 2[21 6[19 39[{ TeXBase1Encoding ReEncodeFont }
35 76.3802 /Utopia-Bold rf /Fp 17[22 3[39 39 39 38 4[40
1[40 29[49 1[49 4[34 15[34 14[67 33[37 39 37 1[38 46
26 33 30 45 46 44 47 70 21 1[21 22 46 40 24 39 46 38
46 40 10[48 2[41 49 58 46 58 60 72 43 1[27 2[56 44 1[60
52 49 49 1[30 1[44 1[20 20 40 40 40 40 40 40 40 40 40
40 35 20 30 20 2[27 27 21 36[47 2[{ TeXBase1Encoding ReEncodeFont }74
76.3802 /Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 -354 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 -354 a 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -976 a
SDict begin H.S end
 -136 -976 a -136 -976 a
SDict begin H.R end

-136 -976 a -136 -976 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136 -976 a Black 0 TeXcolorgray
Black 0 TeXcolorgray -128 -364 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -364 a -128 -364
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -364 a -128 -364 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -364 a -128 -364 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128
-364 a -128 -364 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -364 a -128 -364 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -364
a -128 -364 a
SDict begin H.S end
 -128 -364 a -128 -364 a
SDict begin 12 H.A end
 -128 -364 a -128
-364 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -364 a -128 387 a

 -128 387 a -128 387 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 41.12622 ] concat

 pgfs



 0 setgray
 -128
387 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 41.12622 ] concat

 pgfs



 0 setgray
 -128 387 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 332.83478 81.93497 ] concat

 pgfs



 0 setgray
 -128 387 a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.25198 82.25246 moveto

 166.20811 82.25244 332.41245 82.25244 494.3686 82.25246 curveto

 496.71695 82.25246 498.62059 80.3488 498.62059 78.00046 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 78.00046 lineto

 0.0 80.3488 1.90364 82.25246 4.25198 82.25246 curveto

 closepath

 pgffill

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 78.00047 lineto

 0.0 80.34882 1.90364 82.25247 4.25198 82.25247 curveto

 494.36862 82.25247 lineto

 496.71696 82.25247 498.6206 80.34882 498.6206 78.00047 curveto

 498.6206 4.25198 lineto

 498.6206 1.90364 496.71696 0.0 494.36862 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 78.00047 lineto

 1.41731 79.56604 2.68643 80.83514 4.25198 80.83514 curveto

 494.36862 80.83514 lineto

 495.93417 80.83514 497.2033 79.56604 497.2033 78.00047 curveto

 497.2033 4.25198 lineto

 497.2033 2.68643 495.93417 1.41731 494.36862 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 73.74843 ] concat

 pgfs



-128 387 a

 -128 387 a -128 387 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 77.7134 8.18654 ] concat

 pgfs



 0 setgray
 -128 387 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 77.7134 8.18654 ] concat

 pgfs



 0 setgray
 -128 387
a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 152.16693 16.3731 lineto

 153.96732 16.3731 155.42679 14.91362 155.42679 13.11324 curveto

 155.42679 3.25984 lineto

 155.42679 1.45946 153.96732 0.0 152.16693 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 152.16693 15.23923 lineto

 153.3411 15.23923 154.29292 14.2874 154.29292 13.11324 curveto

 154.29292 3.25984 lineto

 154.29292 2.08568 153.3411 1.13385 152.16693 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0.62 0.12 0.39 TeXcolorrgb
-110 387 a Fp(S\351ance)18 b(1.)91 b(N)n(otions)17 b(de)h(fonction)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -128 387
a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 387 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 35.00252 ] concat

 pgfs


 0 TeXcolorgray -128 193 a Fo(C)o(ompr)o(endr)o(e)c(et)i
(utiliser)f(la)g(notion)g(de)h(fonction)p 0 TeXcolorgray
-128 321 a Fn(\003)p 0 TeXcolorgray 42 w Fp(C)o(onnaitr)o(e)h(la)h
(notion)g(de)f(fonction)p 0 TeXcolorgray -128 450 a Fn(\003)p
0 TeXcolorgray 42 w Fp(D\351ter)q(miner)g(l)o('image)i(par)e(une)h
(fonction)p 0 TeXcolorgray -128 579 a Fn(\003)p 0 TeXcolorgray
42 w Fp(D\351ter)q(miner)f(un)h(ant\351c\351dent)g(par)g(une)g
(fonction)p 0 TeXcolorgray -128 387 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -72 574 a

 -72 574
a -72 574 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 574 a Fo(1)p 0 TeXcolorgray
-72 574 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.38 0.56 0.68 TeXcolorrgb 90 626 a Fo(Ex)o(er)o(cice)13
b(d)n('application)p 0 TeXcolorgray -128 730 a Fp(On)18
b(donne)g(la)h(fonction)27 b Fl(f)36 b Fp(d\351\002nie)18
b(par)g(le)h(progr)o(amme)f(de)g(calcul)g(suivant,)h(ainsi)g(que)g(sa)f
(r)o(epr\351sentation)h Fk(C)3218 744 y Fh(f)3273 730
y Fp(dans)f(un)g(r)o(ep\350r)o(e)g(or)q(tho-)-128 829
y(gonal)p 0 TeXcolorgray -128 968 a Fo(\225)p 0 TeXcolorgray
42 w Fp(Choisir)g(un)g(nombr)o(e)o(.)p 0 TeXcolorgray
-128 1103 a Fo(\225)p 0 TeXcolorgray 42 w Fp(L)-10 b('\351lever)19
b(au)e(cube)o(.)p 0 TeXcolorgray -128 1239 a Fo(\225)p
0 TeXcolorgray 42 w Fp(L)o(ui)h(soustr)o(air)o(e)g(le)g(double)f(du)h
(carr\351)e(du)h(nombr)o(e)h(de)f(d\351par)q(t.)p 0 TeXcolorgray
-128 1374 a Fo(\225)p 0 TeXcolorgray 42 w Fp(Ajouter)g(3.)p
0 TeXcolorgray -128 1509 a Fo(\225)p 0 TeXcolorgray 42
w Fp(Donner)g(le)h(r\351sultat.)p 0 TeXcolorgray 0 TeXcolorgray
1969 2632 a

 1969 2632 a 1969 2632 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 1 setlinecap

 1 setlinejoin

 save

 0.75294 0.75294 0.75294 setrgbcolor

 -96.37897 -20.97678 moveto

 -96.37897 0.0 moveto

 91.84381 0.0 lineto

 -96.37897 28.3468 moveto

 91.84381 28.3468 lineto

 -96.37897 56.69362 moveto

 91.84381 56.69362 lineto

 -96.37897 85.04042 moveto

 91.84381 85.04042 lineto

 -96.37897 113.38724 moveto

 91.84381 113.38724 lineto

 -85.04042 -20.97678 moveto

 -85.04042 121.3243 lineto

 -56.69362 -20.97678 moveto

 -56.69362 121.3243 lineto

 -28.3468 -20.97678 moveto

 -28.3468 121.3243 lineto

 0.0 -20.97678 moveto

 0.0 121.3243 lineto

 28.3468 -20.97678 moveto

 28.3468 121.3243 lineto

 56.69362 -20.97678 moveto

 56.69362 121.3243 lineto

 85.04042 -20.97678 moveto

 85.04042 121.3243 lineto

 pgfstr

 restore

 save

 0 setgray

 -96.37897 0.0 moveto

 91.03487 0.0 lineto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 91.03487 0.0 ] concat

 save [ ] 0.0 setdash 0 setlinejoin -5.20348 2.3356 moveto 0.29886
0.0 lineto -5.20348 -2.3356 lineto closepath gsave pgffc pgffill grestore
gsave pgfsc pgfstr grestore newpath restore

 restore

 restore

 save

 0 setgray

 -85.04042 1.99255 moveto

 -85.04042 -1.99255 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -90.59566 -10.02353 ] concat

 pgfs



 0 setgray
 1969 2632 a Fg(\241)p
Ff(3.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 -56.69362 1.99255 moveto

 -56.69362 -1.99255 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -62.24884 -10.02353 ] concat

 pgfs



 0 setgray
 1969 2632 a Fg(\241)p Ff(2.)1969 2632
y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 -28.3468 1.99255 moveto

 -28.3468 -1.99255 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -33.90202 -10.02353 ] concat

 pgfs



 0 setgray
 1969 2632 a Fg(\241)p Ff(1.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 28.3468 1.99255 moveto

 28.3468 -1.99255 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 25.4297 -10.02353 ] concat

 pgfs



 0 setgray
 1969 2632 a
Ff(1.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 56.69362 1.99255 moveto

 56.69362 -1.99255 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 53.77652 -10.02353 ] concat

 pgfs



 0 setgray
 1969 2632 a Ff(2.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 85.04042 1.99255 moveto

 85.04042 -1.99255 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 82.12334 -10.02353 ] concat

 pgfs



 0 setgray
 1969
2632 a Ff(3.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 0.0 -20.97678 moveto

 0.0 120.51535 lineto

 pgfstr

 save

 [0.0 1.0 -1.0 0.0 0.0 120.51535 ] concat

 save [ ] 0.0 setdash 0 setlinejoin -5.20348 2.3356 moveto 0.29886
0.0 lineto -5.20348 -2.3356 lineto closepath gsave pgffc pgffill grestore
gsave pgfsc pgfstr grestore newpath restore

 restore

 restore

 save

 0 setgray

 1.99255 28.3468 moveto

 -1.99255 28.3468 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -5.11389 28.3468 ] concat

 pgfs



 0 setgray
 1969 2632 a


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 1.99255 28.3468 moveto

 -1.99255 28.3468 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -10.94807 25.92386 ] concat

 pgfs



 0 setgray
 1969 2632 a Ff(1.)1969
2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 1.99255 56.69362 moveto

 -1.99255 56.69362 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -10.94807 54.27068 ] concat

 pgfs



 0 setgray
 1969 2632 a Ff(2.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 1.99255 85.04042 moveto

 -1.99255 85.04042 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -10.94807 82.61748 ] concat

 pgfs



 0 setgray
 1969 2632 a Ff(3.)1969
2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 1.99255 113.38724 moveto

 -1.99255 113.38724 lineto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -10.94807 110.9643 ] concat

 pgfs



 0 setgray
 1969 2632 a Ff(4.)1969 2632 y


 pgfr

 restore

 restore

 restore

 save

 0 setgray

 0.0 -9.96277 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 3.12134 -12.39766 ] concat

 pgfs



 0 setgray
 1969 2632 a Ff(0)1969
2632 y


 pgfr

 restore

 restore

 restore

 -96.37897 -20.97678 moveto

 -96.37897 -20.97678 moveto

 -96.37897 121.3243 lineto

 91.84381 121.3243 lineto

 91.84381 -20.97678 lineto

 closepath

 91.84381 121.3243 moveto

 clip

 newpath

 save

 1.99255 pgfw

 0 0.39215 0 setrgbcolor

 -96.37897 -1684.47119 moveto

 -96.37897 -1684.47119 -95.00548 -1618.8531 -94.47797 -1594.23814 curveto

 -93.95045 -1569.62317 -93.10446 -1530.83665 -92.57695 -1507.06357
curveto

 -92.04944 -1483.29047 -91.20346 -1445.84367 -90.67595 -1422.89816
curveto

 -90.14844 -1399.95265 -89.30244 -1363.82043 -88.77493 -1341.68828
curveto

 -88.24744 -1319.55614 -87.40146 -1284.718 -86.87395 -1263.38507 curveto

 -86.34644 -1242.05212 -85.50044 -1208.48332 -84.97295 -1187.9353 curveto

 -84.44543 -1167.3873 -83.59944 -1135.06662 -83.07193 -1115.28925 curveto

 -82.54442 -1095.51187 -81.69844 -1064.41492 -81.17093 -1045.3937 curveto

 -80.64342 -1026.37251 -79.79742 -996.47665 -79.26991 -978.19763 curveto

 -78.74242 -959.91862 -77.89644 -931.20203 -77.36893 -913.65128 curveto

 -76.84142 -896.10054 -75.99542 -868.54106 -75.46793 -851.70406 curveto

 -74.94041 -834.86707 -74.09442 -808.43942 -73.56691 -792.30188 curveto

 -73.0394 -776.16435 -72.1934 -750.84813 -71.66591 -735.39589 curveto

 -71.1384 -719.94366 -70.2924 -695.71426 -69.7649 -680.93286 curveto

 -69.23738 -666.15146 -68.39142 -642.9864 -67.8639 -628.86179 curveto

 -67.3364 -614.73717 -66.4904 -592.61456 -65.96289 -579.13246 curveto

 -65.4354 -565.65036 -64.5894 -544.54588 -64.06189 -531.69212 curveto

 -63.53438 -518.83836 -62.68839 -498.73087 -62.16089 -486.49147 curveto

 -61.63338 -474.25208 -60.78738 -455.11859 -60.25987 -443.47902 curveto

 -59.73236 -431.83946 -58.8864 -413.6557 -58.35889 -402.6016 curveto

 -57.83138 -391.54747 -56.98538 -374.29129 -56.45787 -363.80855 curveto

 -55.93036 -353.32582 -55.08438 -336.97495 -54.55687 -327.04932 curveto

 -54.02936 -317.12369 -53.18336 -301.6542 -52.65585 -292.27153 curveto

 -52.12836 -282.88885 -51.28236 -268.27948 -50.75485 -259.42546 curveto

 -50.22734 -250.57146 -49.38136 -236.79742 -48.85387 -228.4579 curveto

 -48.32635 -220.1184 -47.48036 -207.15929 -46.95285 -199.31999 curveto

 -46.42534 -191.4807 -45.57936 -179.31099 -45.05185 -171.95763 curveto

 -44.52434 -164.60426 -43.67834 -153.20357 -43.15083 -146.32198 curveto

 -42.62334 -139.44037 -41.77734 -128.78384 -41.24983 -122.35979 curveto

 -40.72232 -115.93573 -39.87633 -106.0026 -39.34883 -100.0218 curveto

 -38.82132 -94.04102 -37.97534 -84.80615 -37.44783 -79.25435 curveto

 -36.92032 -73.70255 -36.07433 -65.14508 -35.54683 -60.00815 curveto

 -35.01932 -54.87122 -34.17332 -46.96736 -33.64581 -42.23083 curveto

 -33.1183 -37.49431 -32.27232 -30.22073 -31.74481 -25.87053 curveto

 -31.2173 -21.52031 -30.3713 -14.8554 -29.8438 -10.87744 curveto

 -29.3163 -6.8995 -28.47032 -0.82028 -27.94281 2.7998 curveto

 -27.4153 6.41989 -26.5693 11.93701 -26.04181 15.21364 curveto

 -25.5143 18.49028 -24.6683 23.4683 -24.1408 26.41551 curveto

 -23.61328 29.36272 -22.7673 33.82326 -22.23979 36.45515 curveto

 -21.71228 39.08707 -20.86629 43.05347 -20.33878 45.38446 curveto

 -19.81126 47.71545 -18.9653 51.21094 -18.43779 53.25537 curveto

 -17.91028 55.29979 -17.06429 58.34735 -16.53677 60.11931 curveto

 -16.00928 61.89127 -15.16328 64.51276 -14.63577 66.02647 curveto

 -14.10826 67.54019 -13.26227 69.75952 -12.73477 71.02922 curveto

 -12.20726 72.29892 -11.36127 74.13771 -10.83376 75.17769 curveto

 -10.30624 76.21765 -9.46028 77.7002 -8.93277 78.52466 curveto

 -8.40526 79.34912 -7.55927 80.49684 -7.03175 81.11989 curveto

 -6.50426 81.74295 -5.65826 82.5791 -5.13075 83.01527 curveto

 -4.60324 83.45145 -3.75725 84.00024 -3.22974 84.26357 curveto

 -2.70224 84.5269 -1.85625 84.8086 -1.32874 84.91324 curveto

 -0.80122 85.0179 0.04472 85.05746 0.57222 85.01793 curveto

 1.09973 84.97838 1.94572 84.79791 2.47324 84.6282 curveto

 3.00075 84.4585 3.84673 84.0803 4.37424 83.79471 curveto

 4.90175 83.50911 5.74774 82.95695 6.27525 82.56975 curveto

 6.80275 82.18254 7.64874 81.47853 8.17625 81.00397 curveto

 8.70377 80.52939 9.54976 79.69693 10.07726 79.14925 curveto

 10.60477 78.60156 11.45074 77.66336 11.97826 77.05663 curveto

 12.50577 76.4499 13.35175 75.42773 13.87926 74.77629 curveto

 14.40677 74.12483 15.25276 73.04323 15.78027 72.36142 curveto

 16.30779 71.67961 17.15376 70.56029 17.68127 69.86221 curveto

 18.20879 69.16414 19.05478 68.03026 19.58229 67.33015 curveto

 20.10979 66.63004 20.95576 65.50406 21.48328 64.81624 curveto

 22.01079 64.12843 22.85678 63.03412 23.38428 62.37283 curveto

 23.91179 61.71155 24.75778 60.6707 25.2853 60.05011 curveto

 25.8128 59.42952 26.65878 58.46564 27.1863 57.89995 curveto

 27.7138 57.33427 28.5598 56.46953 29.08731 55.97299 curveto

 29.6148 55.47646 30.46078 54.73419 30.9883 54.32114 curveto

 31.51581 53.90807 32.3618 53.31126 32.88931 52.99583 curveto

 33.41681 52.6804 34.2628 52.25134 34.79031 52.04771 curveto

 35.31783 51.8441 36.16382 51.60571 36.69131 51.52824 curveto

 37.21883 51.45078 38.06482 51.42636 38.59233 51.4893 curveto

 39.11984 51.55226 39.9658 51.76443 40.49332 51.98196 curveto

 41.02083 52.19951 41.86682 52.67096 42.39433 53.05725 curveto

 42.92183 53.44356 43.76782 54.19687 44.29533 54.76622 curveto

 44.82285 55.33556 45.66884 56.39401 46.19633 57.16074 curveto

 46.72385 57.92746 47.56984 59.3141 48.09735 60.29231 curveto

 48.62486 61.27054 49.47084 63.00717 49.99834 64.2111 curveto

 50.52585 65.41505 51.37184 67.52548 51.89935 68.96947 curveto

 52.42686 70.41345 53.27284 72.92021 53.80035 74.61842 curveto

 54.32787 76.31662 55.17386 79.24234 55.70137 81.20898 curveto

 56.22887 83.17564 57.07486 86.5433 57.60237 88.79268 curveto

 58.12988 91.04205 58.97588 94.87463 59.50337 97.42094 curveto

 60.03088 99.96725 60.87686 104.28735 61.40437 107.14484 curveto

 61.93188 110.00233 62.77786 114.83293 63.30537 118.01581 curveto

 63.83289 121.1987 64.67888 126.56241 65.20639 130.08492 curveto

 65.73389 133.60742 66.57988 139.52722 67.10739 143.40363 curveto

 67.6349 147.28004 68.4809 153.77888 69.0084 158.02342 curveto

 69.5359 162.26794 70.38188 169.36844 70.9094 173.99532 curveto

 71.4369 178.6222 72.2829 186.34741 72.8104 191.3708 curveto

 73.3379 196.39418 74.1839 204.76622 74.71141 210.20047 curveto

 75.23892 215.63472 76.0849 224.67778 76.61241 230.53711 curveto

 77.13992 236.39644 77.98592 246.1319 78.51343 252.43045 curveto

 79.04092 258.72902 79.8869 269.18074 80.41441 275.93283 curveto

 80.94193 282.68494 81.78792 293.87503 82.31541 301.09488 curveto

 82.84293 308.31473 83.68892 320.26659 84.21643 327.96846 curveto

 84.74394 335.67033 85.58994 348.40659 86.11743 356.60464 curveto

 86.64494 364.8027 87.49094 378.3459 88.01845 387.05444 curveto

 88.54596 395.76299 89.39192 410.13655 89.91943 419.3698 curveto

 90.44695 428.60304 91.82045 453.60127 91.82045 453.60127 curveto

 pgfstr

 restore

 save

 0 0.39215 0 setrgbcolor

 -35.71681 -134.08028 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -37.79663 -135.64354 ] concat

 pgfs



 0 0.39215 0 setrgbcolor
 1975 2632 a Fc(f)1969 2632 y


 pgfr

 restore

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 2885 a
SDict begin H.S end
 -128
2885 a -128 2885 a
SDict begin 12 H.A end
 -128 2885 a -128 2885 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 2885
a 0 TeXcolorgray -26 3002 a Fo(1.)p 0 TeXcolorgray 42
w Fp(R)o(ecopie)g(et)g(compl\350te)h(le)f(tableau)f(suivant.)p
80 3049 1412 4 v 80 3208 4 160 v 187 3160 a Fl(x)p 334
3208 V 161 w Fb(\241)p Fp(3)p 532 3208 V 103 w Fb(\241)p
Fp(2)p 731 3208 V 104 w(0)p 874 3208 V 103 w(1)p 1018
3208 V 104 w(2)p 1161 3208 V 103 w(3)p 1304 3208 V 104
w(10)p 1488 3208 V 80 3211 1412 4 v 80 3371 4 160 v 141
3323 a Fl(f)i Fp(\()r Fl(x)5 b Fp(\))p 334 3371 V 130
w(0)p 532 3371 V 731 3371 V 874 3371 V 1018 3371 V 1161
3371 V 1304 3371 V 1488 3371 V 80 3374 1412 4 v -128
3392 a
SDict begin H.S end
 -128 3392 a -128 3392 a
SDict begin 12 H.A end
 -128 3392 a -128 3392
a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 3392 a 0 TeXcolorgray -26 3475 a Fo(2.)p 0 TeXcolorgray
42 w Fp(1)18 b(a-t-il)g(des)f(ant\351c\351dents)i(par)25
b Fl(f)i Fp(?)17 b(Lesquels)j(\351ventuellement)9 b(?)20
b(J)m(usti\002e)e(ta)g(r\351ponse)o(.)-128 3512 y
SDict begin H.S end
 -128
3512 a -128 3512 a
SDict begin 12 H.A end
 -128 3512 a -128 3512 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128 3512
a 0 TeXcolorgray -26 3610 a Fo(3.)p 0 TeXcolorgray 42
w Fp(Donner)f(l)o('expr)o(ession)j(alg\351br)q(ique)d(de)25
b Fl(f)19 b Fp(\()r Fl(x)5 b Fp(\).)-128 3647 y
SDict begin H.S end
 -128
3647 a -128 3647 a
SDict begin 12 H.A end
 -128 3647 a -128 3647 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -128 3647
a 0 TeXcolorgray -26 3746 a Fo(4.)p 0 TeXcolorgray 42
w Fp(Placer)17 b(dans)g(le)h(r)o(ep\350r)o(e)f(ci-dessus)h(le)g(point)g
(M\()f(0,5)9 b(;)18 b(2,5)h(\).)e(C)o(e)h(point)g(semble-t-il)i(appar)q
(tenir)d(\340)h(la)f(courbe)g Fk(C)3424 3760 y Fh(f)3470
3746 y Fp(?)-128 3792 y
SDict begin H.S end
 -128 3792 a -128 3792 a
SDict begin 12 H.A end
 -128
3792 a -128 3792 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 3792 a 0 TeXcolorgray -26 3931
a Fo(5.)p 0 TeXcolorgray 42 w Fp(C)o(alculer)26 b Fl(f)443
3821 y Fa(\265)487 3875 y Fp(1)p 487 3912 41 5 v 487
3988 a(2)538 3821 y Fa(\266)572 3931 y Fp(.)18 b(Que)f(peut-on)i
(conclur)o(e)e(quant)h(\340)f(la)h(question)h(pr\351c\351dente)9
b(?)-128 4019 y
SDict begin H.S end
 -128 4019 a -128 4019 a
SDict begin 12 H.A end
 -128 4019 a -128
4019 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 4019 a 0 TeXcolorgray -26 4102 a Fo(6.)p
0 TeXcolorgray 42 w Fp(D\351ter)q(miner)18 b(gr)o(aphiquement)i(un)d
(ant\351c\351dent)i(par)25 b Fl(f)36 b Fp(de)17 b(4)h(avec)f(la)h
(pr\351cision)g(per)q(mise)h(par)e(le)h(gr)o(aphique)o(.)-128
4139 y
SDict begin H.S end
 -128 4139 a -128 4139 a
SDict begin 12 H.A end
 -128 4139 a -128 4139
a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 4139 a 0 TeXcolorgray -26 4238 a Fo(7.)p 0 TeXcolorgray
42 w Fp(P)n(eut-on)g(r\351pondr)o(e)f(\340)g(la)g(question)i
(pr\351c\351dente)g(autr)o(ement)f(que)g(gr)o(aphiquement)9
b(?)-72 4468 y

 -72 4468 a -72 4468 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56
4468 a Fo(2)p 0 TeXcolorgray -72 4468 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.38 0.56 0.68
TeXcolorrgb 90 4520 a Fo(Ex)o(er)o(cice)k(d)n('application)p
0 TeXcolorgray -128 4624 a Fp(P)n(our)k(ses)h(32)h(ans)o(,)f(Denis)f(a)
g(achet\351)h(un)g(v\351lo)g(d)n('appar)q(tement)h(a\002n)e(de)g
(pouvoir)i(s)m('entr)o(a\356ner)f(pendant)g(l)o('hiver)-5
b(.)-128 4727 y(La)18 b(fr\351quence)h(car)o(diaque)d(\(FC\))i(est)g
(le)f(nombr)o(e)h(de)f(pulsations)i(\(ou)f(battements\))g(du)g(c\234ur)
f(par)g(minute)o(.)-128 4841 y
SDict begin H.S end
 -128 4841 a -128 4841
a
SDict begin 12 H.A end
 -128 4841 a -128 4841 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -128 4841 a 0 TeXcolorgray
-26 4941 a Fo(1.)p 0 TeXcolorgray 42 w Fp(Denis)g(veut)h(estimer)h(sa)f
(fr\351quence)g(car)o(diaque)f(:)g(en)h(quinze)g(secondes)o(,)g(il)g(a)
f(compt\351)i(18)f(pulsations)o(.)80 5058 y(\300)f(quelle)i
(fr\351quence)f(car)o(diaque)o(,)f(expr)q(im\351e)h(en)g(pulsations)i
(par)d(minute)o(,)i(cela)e(corr)o(espond-il)9 b(?)-128
5093 y
SDict begin H.S end
 -128 5093 a -128 5093 a
SDict begin 12 H.A end
 -128 5093 a -128 5093
a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -128 5093 a 0 TeXcolorgray -26 5194 a Fo(2.)p 0 TeXcolorgray
42 w Fp(S)o(on)22 b(v\351lo)g(est)g(\351quip\351)g(d)n('un)g(car)o
(diofr\351quencem\350tr)o(e)g(qui)f(lui)h(per)q(met)g(d)n('optimiser)h
(son)f(effor)q(t)f(en)g(enr)o(egistr)o(ant,)h(dans)g(ce)f(car)o(-)80
5293 y(diofr\351quencem\350tr)o(e)o(,)e(toutes)h(les)e(pulsations)j(de)
c(son)i(coeur)-5 b(.)18 b(\300)g(un)g(moment)i(donn\351,)e(le)g(car)o
(diofr\351quencem\350tr)o(e)h(a)f(mesur\351)h(un)80 5393
y(inter)q(valle)g(de)e(0,)8 b(8)19 b(seconde)f(entr)o(e)f(deux)h
(pulsations)o(.)80 5510 y(C)o(alculer)g(la)g(fr\351quence)g(car)o
(diaque)f(qui)h(ser)o(a)g(af\002ch\351e)f(par)h(le)g(car)o
(diofr\351quencem\350tr)o(e)o(.)-128 5545 y
SDict begin H.S end
 -128 5545
a -128 5545 a
SDict begin 12 H.A end
 -128 5545 a -128 5545 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -128 5545 a 0 TeXcolorgray
-26 5646 a Fo(3.)p 0 TeXcolorgray 42 w Fp(A)o(pr\350s)f(une)h
(s\351ance)g(d)n('entr)o(a\356nement,)i(le)e(car)o
(diofr\351quencem\350tr)o(e)g(lui)g(a)f(four)q(ni)h(les)g(r)o
(enseignements)i(suivants)e(:)p 0 TeXcolorgray 3987 5856
a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -976 a
SDict begin H.S end
 -136 -976 a -136 -976 a
SDict begin H.R end

-136 -976 a -136 -976 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -136 -976 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
80 -360 3948 4 v 80 -101 4 260 v 184 -249 a Fo(N)n(ombr)o(e)15
b(de)h(pulsations)358 -149 y(enr)o(egistr\351es)p 1066
-101 V 1192 -249 a(F)m(r\351quence)e(minimale)1361 -149
y(enr)o(egistr\351e)p 2052 -101 V 2185 -199 a(F)m(r\351quence)g(mo)n
(yenne)p 3038 -101 V 3160 -249 a(F)m(r\351quence)g(maximale)3333
-149 y(enr)o(egistr\351e)p 4024 -101 V 80 -98 3948 4
v 80 72 4 170 v 488 24 a Fp(3)e(640)p 1066 72 V 1188
23 a(65)18 b(pulsations/minute)p 2052 72 V 225 w(130)h
(pulsations/minute)p 3038 72 V 204 w(182)g(pulsations/minute)p
4024 72 V 80 75 3948 4 v -128 141 a
SDict begin H.S end
 -128 141 a -128 141
a
SDict begin 12 H.A end
 -128 141 a -128 141 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -128 141 a 0 TeXcolorgray 126
221 a Fp(\()p Fo(a)p Fp(\))p 0 TeXcolorgray 41 w(Quelle)f(est)g(l)o
('\351tendue)h(des)f(fr\351quences)h(car)o(diaques)e(enr)o
(egistr\351es)9 b(?)-128 255 y
SDict begin H.S end
 -128 255 a -128 255 a
SDict begin 12 H.A end

-128 255 a -128 255 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -128 255 a 0 TeXcolorgray 121 350
a Fp(\()p Fo(b)p Fp(\))p 0 TeXcolorgray 42 w(Denis)17
b(n)-6 b('a)17 b(pas)h(chronom\351tr\351)g(la)g(dur\351e)f(de)g(son)h
(entr)o(a\356nement.)i(Quelle)e(a)g(\351t\351)g(cette)g(dur\351e)9
b(?)-128 411 y
SDict begin H.S end
 -128 411 a -128 411 a
SDict begin 12 H.A end
 -128 411 a -128
411 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -128 411 a 0 TeXcolorgray -26 508 a Fo(4.)p 0 TeXcolorgray
42 w Fp(Denis)17 b(souhaite)h(conna\356tr)o(e)f(sa)g(fr\351quence)h
(car)o(diaque)e(maximale)i(conseill\351e)h(\(FCMC\))e(a\002n)f(de)h(ne)
g(pas)g(la)g(d\351passer)g(et)g(ainsi)h(de)80 608 y(m\351nager)i(son)h
(c\234ur)-5 b(.)21 b(La)f(FCMC)g(d)n('un)h(individu)g(d\351pend)f(de)g
(son)g(\342ge)i Fl(a)t Fp(,)e(expr)q(im\351)h(en)f(ann\351es)o(,)i
(elle)f(peut)g(s)m('obtenir)f(gr\342ce)g(\340)f(la)80
707 y(for)q(mule)f(suivante)h(\351tablie)f(par)f(Astr)o(and)g(et)h(R)o
(yhming)g(:)p 0 TeXcolorgray 0 TeXcolorgray 475 834 3159
4 v 475 1003 4 170 v 528 955 a(F)o(r\351quence)g(car)o(diaque)f
(maximale)i(conseill\351e)g(=)e(220)p Fb(\241)p Fp(\342ge)o(.)p
3629 1003 V 475 1007 3159 4 v 80 1168 a(On)g(note)26
b Fl(f)19 b Fp(\()r Fl(a)t Fp(\))e(la)g(FCMC)h(en)g(fonction)g(de)f(l)o
('\342ge)j Fl(a)t Fp(,)e(on)f(a)g(donc)25 b Fl(f)19 b
Fp(\()r Fl(a)t Fp(\))14 b Fb(\306)g Fp(220)c Fb(\241)i
Fl(a)t Fp(.)-128 1201 y
SDict begin H.S end
 -128 1201 a -128 1201 a
SDict begin 12 H.A end
 -128
1201 a -128 1201 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -128 1201 a 0 TeXcolorgray 126 1296
a Fp(\()p Fo(a)p Fp(\))p 0 TeXcolorgray 41 w(V\351r)q(i\002er)17
b(que)h(la)f(FCMC)h(de)f(Denis)g(est)h(\351gale)g(\340)f(188)i
(pulsations/minute)o(.)-128 1330 y
SDict begin H.S end
 -128 1330 a -128 1330
a
SDict begin 12 H.A end
 -128 1330 a -128 1330 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -128 1330 a 0 TeXcolorgray
121 1425 a Fp(\()p Fo(b)p Fp(\))p 0 TeXcolorgray 42 w(C)o(ompar)o(er)e
(la)h(FCMC)g(de)f(Denis)g(avec)g(la)h(FCMC)g(d)n('une)g(personne)h(de)e
(15)h(ans)o(.)-128 1457 y
SDict begin H.S end
 -128 1457 a -128 1457 a
SDict begin 12 H.A end
 -128
1457 a -128 1457 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -128 1457 a 0 TeXcolorgray -26 1554
a Fo(5.)p 0 TeXcolorgray 42 w Fp(A)o(pr\350s)e(quelques)j(r)o(echer)o
(ches)o(,)e(Denis)g(trouve)g(une)h(autr)o(e)e(for)q(mule)i(per)q
(mettant)g(d)n('obtenir)g(sa)f(FCMC)g(de)g(fa\347on)g(plus)h
(pr\351cise)o(.)f(S)o(i)82 1654 y Fl(a)k Fp(d\351signe)d(l)o('\342ge)g
(d)n('un)g(individu,)g(sa)g(FCMC)g(peut)g(\352tr)o(e)f(calcul\351e)i
(\340)e(l)o('aide)h(de)f(la)g(for)q(mule)i(de)e(Gellish)i(:)p
0 TeXcolorgray 0 TeXcolorgray 277 1780 3553 4 v 277 1969
4 189 v 331 1898 a(F)o(r\351quence)f(car)o(diaque)e(maximale)j
(conseill\351e)h(=)d(191,)8 b(5)i Fb(\241)g Fp(0,)e(007)i
Fb(\243)g Fp(\342ge)2508 1864 y Fi(2)p 3827 1969 V 277
1972 3553 4 v 80 2133 a Fp(On)17 b(note)j Fl(g)10 b Fp(\()r
Fl(a)t Fp(\))16 b(la)i(FCMC)g(en)f(fonction)i(de)e(l)o('\342ge)j
Fl(a)t Fp(,)d(on)h(a)f(donc)82 2247 y Fl(g)10 b Fp(\()r
Fl(a)t Fp(\))j Fb(\306)h Fp(191,)8 b(5)i Fb(\241)g Fp(0,)e(007)i
Fb(\243)i Fl(a)890 2213 y Fi(2)930 2247 y Fp(.)80 2362
y(Denis)17 b(utilise)i(un)f(tableur)g(pour)g(compar)o(er)f(les)h
(r\351sultats)h(obtenus)f(\340)f(l)o('aide)h(des)g(deux)f(for)q(mules)i
(:)p 0 TeXcolorgray 0 TeXcolorgray 80 2486 3948 4 v 80
2645 4 160 v 133 2598 a(B2)p 566 2645 V 397 w(=220-A2)p
2295 2645 V 4024 2645 V 80 2649 3948 4 v 80 2818 4 170
v 269 2818 V 395 2760 a(A)p 566 2818 V 1407 2770 a(B)p
2295 2818 V 1679 w(C)p 4024 2818 V 80 2822 3948 4 v 80
2992 4 170 v 156 2933 a(1)p 269 2992 V 127 w(\302ge)f
Fl(a)p 566 2992 V 860 2943 a Fp(FCMC)26 b Fl(f)19 b Fp(\()r
Fl(a)t Fp(\))e(\(Astr)o(and)f(et)i(R)o(yhming\))p 2295
2992 V 807 w(FCMC)i Fl(g)10 b Fp(\()r Fl(a)t Fp(\))16
b(\(Gellish\))p 4024 2992 V 80 2995 3948 4 v 80 3165
4 170 v 156 3106 a(2)p 269 3165 V 183 w(30)p 566 3165
V 1371 3116 a(190)p 2295 3165 V 1579 w(185,2)p 4024 3165
V 80 3168 3948 4 v 80 3338 4 170 v 156 3280 a(3)p 269
3338 V 183 w(31)p 566 3338 V 1371 3290 a(189)p 2295 3338
V 1539 w(184,773)p 4024 3338 V 80 3341 3948 4 v 80 3511
4 170 v 156 3453 a(4)p 269 3511 V 183 w(32)p 566 3511
V 1371 3463 a(188)p 2295 3511 V 1539 w(184,332)p 4024
3511 V 80 3514 3948 4 v 80 3684 4 170 v 156 3626 a(5)p
269 3684 V 183 w(33)p 566 3684 V 1371 3636 a(187)p 2295
3684 V 1539 w(183,877)p 4024 3684 V 80 3687 3948 4 v
80 3848 a(Quelle)g(for)q(mule)h(faut-il)f(ins\351r)o(er)g(dans)f(la)h
(cellule)h(C2)e(puis)i(r)o(ecopier)e(vers)h(le)g(bas)o(,)f(pour)h
(pouvoir)g(compl\351ter)h(la)e(colonne)i(\253)12 b(FCMC)82
3948 y Fl(g)e Fp(\()r Fl(a)t Fp(\))16 b(\(Gellish\))e(\273)9
b(?)p 0 TeXcolorgray -128 5856 a(2)p 0.5 0 0.5 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
