%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: ficheExoPS_cor.dvi
%%CreationDate: Thu Nov 16 21:01:12 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Utopia-Bold Fourier-Math-Symbols
%%+ Fourier-Math-Letters-Italic Utopia-Italic
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ficheExoPS_cor.ps
%+ ficheExoPS_cor.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.11.16:2101
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1346
A36409DDF1CB5F2717A856F22CFCA557C44344621F257B3F443020DC0D621F2A
B5E8377891A7FF97F1B6024C43D7F079AD9A0A6ADD85EF5710DF2876A1987D3E
76BC10458B15997449A6716022CB6A6BD8D8DF19889B0FE75B3D9BC2876E901F
351A2FD0CEC5FEF495D9F2B2A8F31FF0CED35FA777DAC152C3889C93213E92E5
5372C05E1C5D85F9DB99B3370FC6AF5840026DA6BF2414B32F4558E0B83246F3
E8A9827B3F9E9EC28346E30F68F8CF42065D3E0B2A22AFCE86CEE89AD1852FE7
B5746BDC64C1D3C98F98210C5DCBFFE8F2DB95AC2ADBB4C2422A3B90C01A3A17
39901EFA66F9A88930A0F1D6DD0F091E00982F4FEAE71D9931AB1344CC562C38
E22A5EDF409A3EEB65A549EA5111F5BD91147C96C42BAEC08237395F5217DF52
00D6818ED1977E359D00102E3952921284B77F91D514DC4D80396DF16652B07A
1D5F94336155A8FAFF09FD3941D9F43CEAE993F5295713F38BAEE47502E92CBC
A98256C02CD0A91EF121B26FB2D41C012CDEFE9BEE87EBEC852E6D4B219D0192
700ACAD8E57393AB68EC0E9196866C0504DCAE2E92BFBA593CE3498EE90CDDD2
81310B9F706A8642FF9A3DA75EB092A9E9B46C16B14A018B8109A42B37BDFF67
A1828B6BBA85A4BF6A3133DA1537C79ED4E2CA22AC03C23C48CCFA8245CCE484
8D2B051BBC7C5B7D4075351FCA265D917CA68175A65651441765E1238AC2B8EB
C76E45900A7418A8E967F6359FAC16B6E3061BB5D1D335AD5950D7BF0974F598
2479AA6AA248B85EC0E63DB3AECF662C4E1596794CC369C4183F6670B3CE539A
BA4B6E3E3C3E693659AB24DFF6BC7A326B9348059D5B3781A7A6A992B311E898
69BE321AC33F8762BA6ECCFBC849C7426B162C392D23E0CB5330D36CB06A0CF7
9EEA2545EA843F7FCB8DF5635F9B81C460C134D080C501D3EA1B5A6C6EF7F1CB
5FD9AB700B6CCDDFC28FB32AF401E54EC5ECE9D588361E23740B6BCA5C779442
0B43FC862C057D52FBD072627D022A81934CE5B9A5BED35DEE30BD495880B7A9
39433FE00D93528FDE8A0B8845A09E477A7E2E692C9416BC5E7F6CC3A816BA3F
BA00C5D1076D3C741F1377FA7A0B3BE55528267D5EBE398C0AAE1F746B4F1261
4E0DF155E5C3B91DF9A4D3129C2DFE42BB4DA5B13327538D63725ED7106CB266
20B0749DBFB0C1280BC971741D4685A1B6CAC7BC7B58E6E05E7A93C1493DBA2E
EAC14E0C831B2677C41218AF6D2550FAD7630471F65657F80704D8A4D1C54987
888026E3115CDBB72C73D7578BCE896382BB4085BFC3F64E52F280D228E2524B
171BBBBAA5CD32AA0E6BD57798F0A499F4FC6B3FFE84E62586D55D816D48E7BA
21E4A1F7035F77E8E58AF5B216890478691ABC869432C6AE0A488FA258BA94AD
A1DE64CD94A8D01276AE06E844D33992B77FD22A266E3C7AE3B1291EABC3419C
32166C61126E891DEFC1DC5492A3F4F68A8E892C0F37D102BDF46E3D3D9F1710
FA293947D17AC233BC18E0BDDFFC2F2B21D098DE740430A0400E3EDDFE0C86A1
B5EE8F714479DFA2D5D275EBDE15C327A697E1C3E59332D115F6E07D51CFF950
270DC1AB0922C46F888137F1D612B204BE8035D3D6878F70E5692E9E99F6AD40
5917758614C9A471A5504E98EF2D52D9EEC7DA689E6BEB64D096A0EF8E6B3A01
181604BF43CC70E24CC6B60E19A43C7D05ABFF690DC8AFCF5D4BA8859B058A8C
6BA92B95B480BCF317E49DBC2B8755E4840EEE18ABF176B819E13BEFA453CDCB
028B1E453B760999D6E058EC5BEC0EEC3AEC666651DB47426813AD7EA8C808D5
0EE3FB531946F5E38D81C97A59F48634BB897864E59CE6F45DE79A58BEF6E872
3AFD0DBE639D987B94B70D0A291AD3EE2DEB7F8A13EFAE8EE9C023C9E3386A3E
312892B18CC51F7B0C34B0A0DAE69C60E02FE96E8943A4B01D70A929296CC33A
0D91791B44B4BB9CA8B2F48FD7E2F9DF87D25A25842E6EB0F0EC43C906F7063F
245227004BC974F03B7C7D2452CE3A8EECD179D8120F9BC25CDE6862DE302E20
A88B91EAF093D7AC1107B5E8910CD441B2C4BD618B14E85CDE29B2BB843A36E1
EB43D4F7E8A49CCB78273C35B7FE199645598181CC2A1CBD0471A36FEECBB23E
4F55B32C486618008096354ED262B00B6792B06B1D58E6044EAFD7F6DB784011
16CFB57B9BF82A2F48A11C10C9CAA10C1B4E4DC6EEEEBA8BA073EE6DF4229DF2
08FEA5A468EC0E9196866C0504DCAE2E92BFBA593CE34FB688BB2FE7D0FB10CB
F589BCA0C6D98AF167692DC4F2005BC07CB78C50316C61B6CCCD39F92BCB784F
4DAE8979632308CE6072760DF478A7BD6CAB57C0F6A621710F2457EA58E510BA
998726FCFA82A5226557224A97DDF88F35E1F428E90B34C83623F21EDA81D0F7
EA29949F213EB8A9E163BF413466B5488A8CF6AAC93DF610C6F3EA9796A3707F
23BC013EC974B4451FFC13792BF85987B132609EF1C4AF14CF08D8FAB4C50A4F
C59C2F3F5D0FBA343D16C59194FFB229C405D11830F0D9F7BCA866DC63619D09
080ACE05144053B30A15AACBEE1178398C4DFC9A23DA45C25091EF2A7E3D6BBC
DA6525C35B175A6EE3E4C08FA189AFC62E894083654116773DE95367E9223097
5D13EB0DFA577FA49E5C06795D12B22C3CAEC24A9B9542360C638A4781E849DA
851246B1364E9B5A0ED07E89110A0E44FD03B20F96993766730D24A7EE8CEA7E
94661D3F020C57BC179F11317D2B1B5868F5CEF063234FDCC24EA63876BB3F3C
D0619DD716741E1EFF594D6D3BE7FE403F91F268ED4F0B293814C37CBD273486
3DD88244E4C5A3C392E36BE9AB6FDA5202AAA2DC4CF05EF8C526A1042B12A4FC
94B345621C7712C3A648AFA5C986E174F0E5AC114DBD8FD4AC71B32AC7974E2D
60B90138CAAE75F60D2EEA35928231B89AE390FB48D8B30E5B25C84E675EB996
72FAFC1F9407287397AF3300D4839679354CDA6C8CC50B162BA061AA153AEFA7
2AF8B90F0FFE55C2DC548E1F3AC157DC1B5C85825B7FA0086AA8FB60C7886874
5D4B75337CD5D84E9A18DAF29B8996EB94C76918ECFDACD0FF2FA9E7056F251C
78F3B6861BC85CEEC6729E3D9C4903ACBCBF0029B8C7B6CF7D2EAABC3FF06681
F1F3BFA3A6CB5818D72CDDA2331E185FF990530CE6880478B42E7C08210E5CA3
B7CA2508355C55F0FF29A003A56E3D4909081BBEA28CFE4BF80988B57C196497
0463138DBE85E4FFBD123A0C427D588B3ED9BB66C0D530ABE8C36492E99AED01
2E1D8F2129584CFA382CF1FEB2955A6054DC90136AAB81E636CD8B8E0A47751D
83A76428D10FB47BD315660918F5E58B6A2B3FB9242CC5B0357BB5233F3D3D40
09CDF5B0273D35883E4864F738BC3BDB4D669EB777FDA513DFA9DC7E607D2351
662379D4B42D8D19C8E1DB2ADED1774D7CF96FAAECF127B1ADC31A3AC95BCE14
83052A09809FEFE59FDA83BB487D799F17A2B583A9780ACB75A7BCC585BDEA19
30C0EA0DF460C5759F304384CB5E88D9E39C2AD455C316AABF662377B406F5A9
586A73B196B265535199A81F8BCEA1B152CEEF8AE58083E828465550837E57FC
54EFC06F76C5201139273FE87CE5ACE30B6F5C58D9FB6C2AC28C5BDAB3FC0438
504D9FA3DEEBE8AFEEDE9F80D4DDA43AADF7BCB30C2777E107A45C0E13EEB46C
DFB5424CADA9CB6DC92F990B1354B69718861FD9B633FD5C536A14CD27171877
7AE400E6F51E8EFD57588532474D9EA9152750B09EB1DAE1D7A8D30EA43FC289
7183D70591A91AF1E97E5A4836375DC27A9DADF9716441C3D988BCD8C424624B
278C50CE2CDA6A11083B89C86D819DF9554C1930B19C8C9A200FCF6882335875
E90BB3F842BD3D3909807FDD22D99004BB24AE6E3B639DDE0013AC5E8C97D02F
821F56F279FEEA83D4D635B30588C12A71DAE2B1AB51D11BAE3147D1DAC77D33
CA6043E7D20B08126739789CF8F0B37B972FF957469563E21679120CC4D643A5
0DB2CDF5D3AA968FD2BC7F2F168572F20EF1C3CDCA822F7C21F5F8BCA8559C58
B4A4960FCE4C041E658B5733890EC3E53B7ACE75E201A5360FED33DD9AF6ED75
A14E22E4FCD3AD966455599EA10799477D1CEE7FB6DC38FDFC9B638E677A4FC2
5D40D379822410DC600F67AA3986D0E5EB1244331BD3F3D0D13EE0E72851C174
C683199B7DB3ACF4427FF597DA5811CD456AD693295AE4BE5DB7725A36C427F7
A73A9BCF43682A5C0C83A57007B59FD003AE5E0B255203545C01B0BC3BE8D512
0B6C57DBD51637C51A6DE156D38BE5D68D55D992006C528F6A5D715DB8F3C692
932FD6EA76A24DE53B17731753936BF8271243C7E347570AD63E34BC3E951B60
BDCB4F5A32031AF9F51F34BDD076DFD270335F49F9F3C450FD2CC53E9D6F4DC4
A4E0C28AD48017AC45069AFDE6A9CEBCC633C1380701745BEDC652C62236800D
C214614FC182A83CA5F5C34F34E8D062223E096FEF8D05B296152A7BAAC65D3E
CCA2898CB299094BD4377D96A3F7CBBAAD241AD247BD97FF27763639E7EB3536
1A5F467481B84C3CFF4F4EA2A0FE9E810D3A46408FC6CCD3C850365138869D66
6EC3EC5F7E6C7B7362B3F57FFFB003F68F0697FB05CC80A5AF642FCA94CA69B9
FDDD26CFF7B660B41F65798D27DB7AF787198962196657C6B0CAB6C9CC5164A7
370B82B29C8C29BC9619EB4D84FEF021D5731F0E395A6874B67FDE582428ECD4
340FEC1FFFD1DB7157B218D45E9E8FC7D857981FF9642CBE066DEA5EB5A1FB85
4406E95574D0F6B731BBC4B3B42221FA90085DDE5E2458586EC7A926C8FEA77E
A7A810C6B426EF147ADFA05ABEFD24902F5F70BED7DA446A08AB6D7308997337
67E4740EF72E3B9E964F6762BDC096004C09C4DB56ED987D5C4CEAB19CA0C3B7
F332EF9665AADA2FE1099FBF65F0E90DCB8763834BA239CB826F40A532E3420E
F5A7A35C4F04DFDF783B55A6B06D7256EBE0DC9926D909F8CEB3598648D33202
0D2A20505014FF9321E4FE8706CD4D4C7937F67805071F29788FAF24F606417A
7E2E692C9416BC5E7F6CC3A816BA3FBA00C7B5F93139EA4AA2298FB39CD6BB24
9436A376E0D29BAC49A8758508AFC0B276424F50CB2AB40AE9F9B3577A2A625A
6362D91D90CBACD280884A54DD7AD6927461B8D578919880FC21FEC40F4059F0
DBBA440916201307DFB2F93B3ADFF008BD50F3A725777818CD73650DDD7BEB1A
C1693D1A305823F46DA72848745C4BAF998C4E46254FA97F8043CBFAD9A38836
40ABAF6B758E99CE7C9B4AFF1F406733E7B606C3C998E63FA1B386AEB29222A9
68110A03208A81CC1D242A501B1BBDCF21184D4CFF536C6555E53868C60A0E5E
523AFCCA6A027708E922700596E2853A992215C3A82BFDB44E5C5034B8046E69
C04ADD2B18096B90E6B0497E4A4F0E7E624BB8CD1C47E25F5FABE8881A2221E3
430AF364080BBE3DA967ECEAC8EE88C88339108F0636CB074DB3A8AB0DC9A6C9
F3BF0F340B3C46DFB046742F74443FA8F7274C6745132524C31BE634F1F770E2
089F5DA73EA906FB20E0221B84423F47BF7D3C14CA7699BD357A1EB557F58433
27B1F36013089D45A24617F38174287AAF17172DCF94A078C5ECD327514A4394
7F0EE6E8E1797D73117A591C138B433EC4619C3924D51A184471A81ED724A82E
DCEDCE50AF4F5216FAD0462B8EE6A098F35C5E253330B79F4B7217D38C76F5B3
11A69081F7DEC393791CC72A66E4253396F0E34A62E0EB8F847B0D8F056EA7E0
6D58853B97379AE23EAA6317BE98BF609C3221BD62CB3E992BC0308D173F64C1
6289D9CE39661221BA2D0ABEFD1910C5F90752F4434E61434F086F3824EE24E9
191A97E3E5F0B879947FEF20685F2141874EDFFD6835997B7BD8E0D6A709E01C
229EDC720460B9F702DADB5199D736F85D789B5DD452A743D563AF393FFAB924
6367A784AF0AFBC33F2E0A5C9A63E3118EEB9CB0BCE1EE6149F64F24054B3766
152E02C4A7825AF4865C8F885AD2998C6920FACFBB6FEF2A0BF60B0FB5375474
6815D55F0490CC20FE17747DF71821ED9831ABBD69502F7E922C5B60CC316862
866783419FDFECC803FBB73C1846FF96CA88502E7ED6D1E5BDAD28D36FCAADD3
CA5E7FC82E231C1CC5095F890209AFECA6DC80747A3F33124B63BFEB5B4C4F92
1FF32AE2039CE16E1FD5D6A3AA4917F260F264E859DF617C1AF6102197A1FA79
846885DFFE469CFAD0734700C79866BCD14C2CA05493E8FE4A654887A8C8F805
23FADF46DA47A779AA11E3607832D0ECA2AEBF9FA3C25714AFF9E5F5199F508E
B12237E1E50D66EB10DD032FAC47231E7B1001997555985B11FB12B6D381D8BF
8D37BE1992CEACED851E91B9C528E56FAD54442E1D1850B773B9AEE7ED4696AA
3E108E4FCA5C7FD734F2C668D4D0759AC9CA50B2FBCD9B1D860CAB13D79E7BE2
E21E4F330FF9EAB6BAACB3668621B874864CA384C3B805A60ED484CC7B2188A2
93F1A256F04E7149811100B29BD22F26E3C00A8F83339418B87F4D3D55A4C32E
81AE692C5AD241314FA52F00309168020D3E3FF5E12E9A87FF6EEA3DB2AFF09B
41F5D0E5EAF6C6D3C3CBB32CD8BF51E4F77D6F54DCB93027CFD435FDFED30C3B
8744042847EC3324EA98E9E9BB4B8AC82338EE843BD07D220998ADE9AF166C07
79662E0AC69D8AF4AECD6D198EBA14D63F5571429BFE369C8399D02004227B1F
17190B640F80EC4A178DA0E3155DBA2138EEF2627BAFE01691F7B90241CFD532
05BACD4A5E1E3F48263C27AF5E3FA927892557DA18CD3D942781EBE5D7C8FE54
C9A6DE178D997C4BA8B466DF0E62094F7BE87C9539654639A6BEF1CE581280B6
DBA5910D15EE572BDA14D8BDEDE3A421F0C5320E184B95713A424E5B5FD274BF
C4A5C7614DF95308A976BDCD49275E37647F60685A0D9C56CEFF1063C118D865
9BC3F1817D7FA008F7C2CD72FE83AB5351D68CC8C5EE6415608A59A7F2F17924
DF6AB9ED7C85249F15426B79FB10B4DAB8CAC5EBDC4D782A37A121F836BA389E
26118A78FA649D6626B18FFA40B336DE45DEB8BFD9AFE62E5270E90C727DB9D6
B04E19EBFAB8024234A31AA8E3D18DC081E29A4DE9D9EDD0C81B675E89DE74BE
49BBE17AA5F20F5078AFE556D1067F2D174A0BCDBF4B82DF69318790CC765CA3
463989ED52D22089B469B1D220EA384D74D11FA06760D9FEE55539EFE3CC6C99
2262C9467B96A3F53BA440784E4F5448CCC51E46EADAA4894925D73396C9254B
8BF11D28A3B653BEA4F32284D170419B1D9DB02DCC30A54D6DDABDB27CB553AD
3DFD01CAEBA561C26A8152A3119C6D09C32539B35D0CFDA57CEF6889D49A6986
A70B58F9E09C31FCBFF0FAF1D2CAA3E46738862E3A6292263F6B7C2D9B8ED5DD
6DF4D93778E6A5C24A65BD957868A707772889790F29C0EC1F76DA5EB1DB3B7E
E417975C485FC1C062359C4A0929163EBCB738B16CFB4D85F97996DB64771B0B
6E1EE0AD25220060FE23E1DC7C88352B01FA507B5B38750616F6E8DEBA45DD56
BCF84477CC5FC14D370DEBB9335B312667BB0E61D844E3FF68AC9F1A7CDD50F5
9FBC81AC819FCD5879179C6076921389F4BFD3C5CB53AAB37656B54DC757EB0E
B57D777342E80DCA6C6957C879318EA43B7CC317D83D257269593710DE3AD77F
1D2FD87A0501A4A39A2FAC64065C9D8C0C3B56FC7A0D00935B0E15BE2901A683
3827FEF83A6F9BB6A0C8F69CD92B3D78706987CA6A110C95C4B635956421EB00
D5E9C815EA54E08AF6BE24D3AE5E86B704A18665F01C9A56D562D87BB5F1EDF3
8B0B66F3DF8E9C6871F23DD7EC4B6B172972F9DE1CB371BA74F7066C2B9C5DF6
3FEED7BD0DDCE24CBB27AC19C9DA1DF9A19F120360F90CD02F460E2C2F258985
CA35A5C93CDA64C769B2B0240548802256FCD9BF6727442EDAB4BC704A74E60F
AB2B353613AF307D9B28FE67F2B77ED3BF52A65C42038E49E746ADEDF1E571F9
A7DC1CBADE14F9A7CE452BF004EF42F15B31A13AC4C915930E50B8F136B4D6DA
F664C359B0E18B8063648644B3DE1875094540AE7C478012AD0E9B55714ECA2A
04B37AC1A4593DCA50110C451EEE43BC28571A882ABD5EF4D6491F1687112246
57B9F70A467513AF9FD96722944E486E589CCC3282DC9ED643E5B8A20763AF65
9645AFDE41AD69C5DD67DB8D3F95B1C8BA081A13A9A2F745B2FABF020F329696
5A77C60EF7547F606EBB5A68A8E62C329542DE28A6B725F7586246F718DA43EA
F7150B277BA7E4368EFC66F4434C9471B5C94E217FD9F94D426BFF43326BEA22
52C98DB8BA013163841BD7549940FE0DA39E0B7252D682D46F636F6AFA91CBAD
6B782CD733433079208F890905F189EB8450BEB3B85A20209EEAFF0FE00E1815
1339B33BF9F6BC6EF907C65DC5B0F019645FCC18AB25C8729019347431D99C1D
56780299EDD00C19EC823CC779CDBF7EB48BF91863E0B398069545915ED66DBE
887273AEEDE2F9A244BA8AB2FBF832F98304D32B2B2B37E4E05CF6415076C1DF
126BB59146868A9B1B40B382357CCC30F90F786D59B7D4A341A16271E01D265C
F7F5717BADAB92EEC15EC54362218720C44547F1A7323A237BD795248E737BF2
DB6FE197016B1A052CCFF97C65DDAEE2935DDD19B8262822D3FDF874096FE41D
08AE1DAAA577047022FFC406E39B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
dup 54 /negationslash put
dup 55 /mapstochar put
dup 161 /minus put
dup 163 /multiply put
dup 164 /asteriskmath put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F90970716B059E19D81A
B8BEAA3A9BE8B55011CB6A8C2BBE60B08B624F91399F3A94475A343A381B1BE7
FDB135FF6D94A63AA323046A9CBC257E63193CA4581AB3731167C277560D3725
D7F8C5F43C7B2A4EE2F86296EE07827166C8E44498CC32BDB757691C9C227E84
0271DC674139C774010C4AC51CAE6ED1C9FC484D21E6531FF82516A6B0BD4CE8
F7F16525564E268BFE1FFCC59E90211C35FF633359003A4166028FF9BA2E282D
B371F9913EF9481EC4F1D5AA04B2740A01F0EB913A54396A72DEAA1C5263D0D9
F7A6962006F6E0781FC9F02DAD053BD28CB881E0B4EE1415781F8CA344C2A1CA
AA6E0081F642FD2A87FDCB8A4263B941DAC7D0B421355822629C58D013E996F3
7AFC7AEDEB09EE6E8E41757E0A8BFD32F5E81F3BA301B2526DB0478C7438CF3B
0CBFAFD61CBED72D4DFAAF5EC5F55F2AFFDC2E305E325E133FDF2E71CF8C0EEB
5B28E51D0F5E98EE2C7FC941C5B760F80483F9AD82FB5B2E1103AD075203EDB6
85A12C3EB9FCA7E371D901B0BB86CEFAADEBF6E0CB0B9F2966E1DD14288812A6
E8EEEE20B6739053E1988DB4851DAAFDDBC0B39BF9781649FD928AA686F9D016
878F227F88566C07BE14F3619B788C738E345E572C0BA08368FA9D0F92EDDE54
C5813962D57A30CC7DF44747937DA67587AA057ED8AA5427798DE26994FB08D9
AF1FA7D3BEE1AA46A748BE78AFBFBCFB8D03E8B9F388C70017F75AC981BACC9F
06F378959456A8EFE2B04ECAB0C2D225F96C2632122DA11A8B3E8BC5D2310383
1F4723248559BBD9913F652C309373B3848D7901CE879F024719EFAA69BB82CB
5858A93DC9AA19A3CEB7D482A5D0E6177B7B4CA1B6411C3C8978A8FBFC750E18
A97B687119CB21CB3400B935BD71C270BE479218140431A44404B04A6FE662BB
550E7BF5448CCB2AD008E536F41E5063DC84BB649E9EF0DD535265FFA8A47C33
0A7AB32337CFF14443DCBF88A434E2C2A34DCBCA5AF1D0AAE3582DC86D043DBE
3C6512FDB93C53380ED8514D47319B364628ADD7D29A28636BA95DFAC657A773
6954E1B92DA63ADDA3EE57E1D6FA49D9012DA093891385D59F7D4E5349DBB5BB
671C855260C856AA53EFD9E1774A6ED844A2B498A59C85EEA33D626FACA553F2
0C131FD95FE727AD96C66F252795C25C9DD1A50B0F3F16FD6C4A457AF0BC39B8
1373850A7E291842E8ED95147F6F1FB5B4F0461075D63B62ACB2407413C78133
B761A489FBC5682AD8130AF12A32D0C50179B51646FC8FA64057E67993C35D99
7AA16F4C9E62D416BBEC9E0F2D0E4343
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B2FC0611E1783B4008E87AF14709204F1F
89B9D7B4CDA3AB6D73C59F9482ABAF988D76005D0FBA343D16CC6B70A09514B4
ECF3830287F70A114EE3EC397AF9D0BAF96FCDF07DF4068BC6D37DA18433DB11
57390C4220A12DCD244B0AF7DEB42146446CE11979196DF6FB2F2DD2009DE250
50C8789E30CA65A134C5633F27D18FA3864E791EA66B2C531F66D1F0F8A3D997
58B704F5CA15C2FF5D2AB98C66063FBE084A2DECAA2BB203E72274964394508E
EDB8288CA707E7FA1EE5D115DDF587BAB7D33126388C77C8B304AA332DA8A555
6CF02FE0D3CF24F559C515EF85C7461E08A9B3D7A076AA838923AB3FC3EEC3A7
27857F176FC19609A1BA23D34FDC16F7CAFAF6ED7DE6AAE26AF1BD5E5F885A92
D9EF6D9F73B1DFBC1D2687F67ABEE3A6F5357D29234A96C1040C62837132C0C0
109861075C0BF8D42B0CD660A9D67E9BD70AB9C6BAF7DACADC27DD787F9187B6
94E813C375408BD04453B4590919873752B5B5B42C4E19F7190DE0D1A395E7BA
2F0748CE7EA16B5EC546A8CD9E1D6F2A5F3DC8E9097D010D44AD4A1395D02B04
2852568E80758353BB0793695467D217777DB7421D3CF74AF56B3B0737ABEC1D
2B5226E7ED8A11F7C8B663A93768636C184CFD0527FE2C6707A7432B8F438A4C
EAAB891B838A556A06CC4B9458B742A74542590ED2A8F4C9CB2F58243186F16B
2710643FE600A152C1B8FA3CB2C5C1CE3671917738A3563A50936F5EA8CB6531
E1ECB99AF420ED95E576C362147BE0934E71BB42FA21CD2B93CE78FF663FB0CB
FD3D5BE7A437F1C6D3BFE19784B1D38827E563FFC1F70466ADCA85FACD754DD2
66ACBAF7C155F3046ADA1A4B0CA7B701B384FE400181F268A192B133D39C1059
0C070EC1EB19849C76D040B050721300D164B017EC6A8CB5294CF8B3C82AB573
DF6352E118F32B465E201394BF94FF3C889FBB191A0280B7BBDB2AC67C7F62C0
F6741A23775E3A302E744F1351E0ABC6418B8E9E3162B9BA949C4F6CD5621A49
7C042921C72B8C5204D0DD6C2694170EAD78E296C833B0A62AC715B00432FF49
9FF856E05B2BE7BCD09872B6E7D98B2CBEB586D803DD486B17EA340003CEF66B
D17A1E3AB5F5AB0D1F647DB51F7CFA42C71977F7625CE8E6D73412ED3F91580C
96F22CE05248DE1C21DC7E1B7B64527D9095905AE89E3BAFD58A546228A0C28C
B5D0D48360698A45EC067DB5A1D6149A61B03B65677EC41B454037C7BB314B40
6AD33743D340B36E802A195D938C9E321279268D4E29B7FAAC3847E80DB35199
3A4094F490EF1FA79FE1E56B185A46B28B1E1C0E829C07F1B008E891CF1571EF
A1C72357B790FAC21F16F9071872E3EBBD5CA2346D201E8C2833958CAD4CCFE9
2F79331CA698A994B8563D2835A000BC8D05DABA56438244D93FB7A0D4CEF738
AB3EC8184211C879D1CF9073F795F8C1C59B21527FEED3A099CEFFDA4D1AF659
291A239C1BF93B8DF5416BE89DF89C13B30AB746D41A04EDBF4F4905C4FD583C
87526341706C95B5D8DE5E0B1A4B1F949C6874CB6A2039BC15B73FF3FD8F77D0
ABA0CDB492CD1B70E01F30A248410504A3D613BE2D4C454DEDAA29A28AE03BE5
3CEFAA42C4A5614E0394B4B655EEC6D0986C7633CF5D0C6D95098E2357A7F7D8
ECCB4710733325A804B43781C7FBDDC7ADE1E5E0C1338A1BB2335F97521602F9
BF4F03B5D2F33767166D8A4C2DDE40B22B8DEE967B95EFB9DD77E17607532E89
48D1A0DCF401728D99F4DFD3F842DC58C84DB072EBEAE417519DE31DE2644F05
8C0117D32A8C670EE246546996D58107F7698ACCACD7ACC32E4BF7C89D7D7960
2D65BBA320F0B4EB92433BFDF0DA75B6681ABDEAB9327E295586F4932783C2DD
D0ACDC2B705827AB10332BFA37ACF5C943B06542413C367DD80080300F0A05D2
57B035051254C7FE90F08E6C18F2447A53D159DDACD1B3F78C5A27B901CD60AF
C2EDB3667682F64196EFCA2D26256BAA5AC49C205686F969D73812276E4EEC72
1B1683A6EE929D7174D41D74BC87F8FB0417E361F92C4C164E76CFDEB4CC394C
FD3B7A671FD3DB732FF2616EEB7C73F5FC49CE3D9E2806604CCB18704C1D877E
16CA69EED9977A0496EECE4FC4FE47BBCF8D40E4E9757F3C67BD8530DC9CDE44
EE4CC83176CE2D12E3217EB888B6C5BDEEBB9554E155C14B95C1217DA7267C73
6158548EC62C2FBEE93BB42BFA61E660FD46A4FBB1B79C7283E29A3FD9D4AC55
BFB5307A2A1DE929B93AB238367A14F0DF0E29D2F08BB39E9C97BD47E8262364
25D096E87FDB6F3B56AFE0822A938F8BB4F5D76D071D3748F19909A74AD6958C
D885D63124B3B3A5B0A91C0FFF8ADCDD0BC65AD487D25A25842E6EB0F0EC43C9
06F7063F2452265EBCA5609FDE118D5435576BC9B5512F2CC36C7C211200CCDB
9D4A0DA59DF302B874BA6AB0F43F3A75913CFEEB2FFE3C89841584D58D86E035
2A9858E49573F347295D38B484207D8F425AB46052350B43AE07EEA53184777D
C32533D183E6492E434EA86C64852E4E3279D8AD67234A2CA17353FBAFA3030A
587CAE0F46A408F5CD55A6EB87FB5F43EFA9FA1418E5FCFD0A8D4D4CEA17E02B
9CADF4D5EF841405FF7780D2A5A63D302CBCBD8082B6CA3602A26A3B71DD10B1
88D697A6CC355BE2AFB4F3E713B1F25629F67FC4CDD60BD9C4958040E10C8D96
73FE2FD6DE63E1B256F898745860CC48D7CE22ABE468E134373E1420D8486798
49A829F4259E6596290A1033670982A545A7A93B760B3D6A5E8998532D70A9C5
39A7CE8DC905D2AF9B22A48768EF740B9C892393ABC7EE361DAE3BB9AE7D8947
31E425A8AF6BA84F14BC65F6A61B48EDCB3ECE7AA6688C4F78596CEEB1C7EA73
95380ED084016C256BA310F19C771BE8AF8ABC2A147D2F3AAD415B962D46E27E
3EB2B74D6CBEF2955209BAE5AF2334D5C5EEE5FD08FD4FCE4DF0633E307B11D6
868962C6A98981A99E244959BFD46DEAE2D3322D0A4BD69E83D73EC28FFBFEC2
3D942781EBE5D7C8FE54C9A6DE178D997C4BA3481C354D59DA9E699D9E44B7A6
DB8A0F7496601112AA8509E2073153FCAB3050CA47EAFA203ACF98171FB99BFC
F1423D966DED4F342FFF0851D4A533E1D22E41FA0BE520FF35ABD92E139F54C2
2FAF542BF202F5A3EC0E0FB4681B2FFF55822F722DF8F19F1F8738CDC8D762F1
ABFCD095A12C406D5AD8AAFD99A8331A6B68B72301B0A6615694D1A805B55A27
E737DF49521E1A04FF6943C0A3A3C217338AFF9EE7A2C46F5B7D45515C452610
0A036EF590EE3B0A08F68AD5FD7A80F1CBD72C726EE65D2DB6ABAEB3BE6FE358
C1B3E46C9C1C5E024AC613CCC6B7436C86F67B92282C5B04AF170473AEEA6643
9974A234EFFF56E05B2BE7BE4E23DBF622A4546A5258CA8ED3E7029BA2D96F52
7EA98575EBAB2C3C08F82D4C916BEDF3E36BEA6C0805CBA7981FA72292473759
440CB93D175E88ADD1EDDAE4F4C7955A8D468C95768AA8C3A4B6AE0959BE049E
D7D036DFD7D8FACE51E835850E61E38DF7FF7989E2126FD0505F2AD3CAF98097
861710E5A7DF298B8C26A0C8A542778AADA09C7B64F45856987A5DAC995C0F10
90BAF208429DC38E81F3C5AA93E06EFA0F579F8A1AFD5033DB95EDD034A76D32
DC847E0864E06191C8888A0B30F91237E72436B7BDC9E30DE6CE793715D43185
0A7DD9B316318B41923E8A0447E6F8BC46AD9F058798A66A73BFEAEF22D1E687
9E69008E8990705955AAE13D9AF2E10D21B62674F16AF71DFD8ABEE45AAAB859
187DAC77DAEE2BB53270870A401F96F39B1539E4376EE41141999598E57464E8
1FF45E02D31002904659440C99D41B57DDF194B61D767E3E92666F3C0C02A14F
2AC51205B8CCB2F612559D9B5036E5A40C51FD5C0CC62C7D2BC8A23D12AA1A1B
CEB919F48A57649A02409218636C0A7DEA2625697389C795931778A9D6E086CD
17A1AC0D70D2DAF5643535345EF4D1D5F8C6AE3C09692B6F691BE1541AE3D49D
4B6E892997DAE7ED9ECE853A1371EDC57DCD1857293975CE826EF8F2963344BD
A014EA29E0E37BB54127DD8B231EE7766BF1B9CDF899DC0ED7C058AD153E6462
97F9DBBF3DF4D49484F369E00806A73D03797F0FBDA87E66FD2290773DBDA7BC
ABECFC00B4212CED6271CCFE028FB9CF67BA4B92204969E1B81E56D05695FC1F
275B93C4BF612A93F754312058DEE9D48BC2778AB577C5B9F7960F2CFA9E324F
D1B16EE901CCF40FCB0D3A837C166207B39FF3B240723E39B7EC79C03800693D
F0F4D8B3A4EA49622BDA7375B4F00FB433DE11773B6435A86037E102F7D4812A
A8D94831944E7EDABFD4E30BF94BBBB7D22D9CDB15BDC026CABA8207DEC4257E
7FF520D60B7E6919CC18F997D4A44D9A429FB7EB712B6F709F46EDA62DCAD67E
A78AB7E8315784661CDD3F1BD5705D73BDFD4B051D830DEEE4AD8FC2CBB20435
D2955B8E6974BF3AE02D1A6A8F256F683EFBE41346FE6066D278A3E3BE987F6C
8EB5611F20F59478241B516ED38CD0A4B2BC73E686EEBC2C22B2729F2C58CEDA
22D816DB5D9C59E1A0206B7062468286D95693B9809CFF3B1E94B569132BB3CD
A70EEE8C7E7C399B85897CFFACCEB68940D7E73D6F6FD74CADC12D2B0A173AE8
C820AF51972702915B9949190D130EBD2AAC77692997AD9F1539B92C516F671C
BDAA32D63BC149DE8B733668A8A54DD701D5A0B2E94E4BB6081364D2B04016F6
9C66D09CDD99BEE72311C89E980F7FA9EDE1682E05C6E29EBC388354DDB4BAA9
EBC2669C1D758D8C883F59075FCCC38A2919ED5923656F6B5725CD2E2CD6662C
0AD8E24E01A4EC9F91A24DD05CD60BCC95E3FEA85D82D56A77B3F3F79C388182
26FE18BBF95DE7945F4F88A7D12E5F0DF8B41FD8FB187D1652A62D116F1742CF
2CC0185C67E0D613468676A224B845AB92F0C60F4A15C13C15C41457D8B9EC05
79C9B7D4980F2C2D1F3F6551E60DBDF78DC9DFEC342E157E1A500DB415915529
46C65C282F4ACA897F0502F76CEAFCD124689B95773C499F2E97B5BAA693295F
AA8A1AA52DAC7513772938BB2FDDFDC99AAA25AD6810541DC2C630A6742DBC4F
31DB3B445943EEBFD15E9E505C13751A60752CED23618E020ACAE6D25FAA0A04
3972604E3D5CA4706E812364C58A37EFDA8A3CCF644DF92D8B8F5B394DA71C51
BEF6E7FEDD7AF1AD89901A8391E60EAE461FCEF9415373B114A8EBEB5F61AB24
AC4352EBBD4FFF78B3A286078BC5E5831303444EA6AAA8137C42462886BB301E
03E84EAA60FF422B13493C27EFAED71AF559DC33D4AA8A3DFC72752ACAE2AD16
00AE40412842CB72327DDB532F63C155FB86F9B7FA9B5BD6774F8774F19CD46E
BA861357256AE8162DE2D0CA52013D17A9D2E37A56518316DD57708066BD5949
AE733BDC1962F245A6FC726C4B6FB6896D81D18E9C3289A30112C74156AE3635
B01F081084D91C7A71C06148C65EC3C43A4C2CAA86340C9F9ACF9B27CE563768
67A573DC1460364A3862C170FAAF086308F82C9C16873ED2FFF540C88A2E2CAB
60D3F6A21148A4AEE64F7F6E58C2EA5573CF074B77BB6F513F2D2E26C3C6F029
4AEE951C50B8FAD9E3FC91864C8AEA4B2563E40701A8196FD2A9E4859FF87E60
28A85529A05504416B1E26FD7DF9696E20D77165583B1AE09C0DFB0D8E059A9D
583170F8221BE30937949A564D44B5D92E1CA5018CEA6263A0B33C567549CA89
2D7D2D9B4BE22A80B3B4F8050DF4FC0BE4C5ABC5DF3CADC84251A2EBF3712013
A56A8B94FE6942A4F86E27E5BF6591E6FE5E557AE30747BC45254EDDDFF62CE1
50B83AEA53C0F4D0B4E61BD35A2BE843DB44B49BA599BF37185BDEC00A688704
921525A040AEFB73F686C21D8865A20F221152AAAA1ACEE17BE95E4C4EF88B36
5C378B1A9116D07D6E528B38919CB1B51E56065ABFDDB658A581597AB21209C9
16C5B3087A8608FF9C86DA1619E09C929FD3197B7EE0F532F491CE10C53D271C
136B8BBA284918E123CB9AADCDF96996456B524F481665CDC62F4AEB8F781AFE
5496CE73A0EDF0957CAEDB9EAA8CBF52827D6545BFBC19227674339C79F35469
A9DDF5A29AA51AE2CC6DFD3D12866382CA36DD53A75D32FE86387686D837A781
0C5A9FD75F123B9D6A7ED3C9E8221A812D955569CB6BD35D8400664F1F1CD296
17D1737C9A72CF77683FB60742B960442432FC2DB9F8C32D7427722A1CB5E581
24DCB6753DCD850699052A4D3A29CE480862D04AEDFC05D3BD77DA9095D5FE2E
C20FF29355CFCD0FF1692F8F045946921D6CC7768CB798092F3B31437DB73F89
82F2C051BFBCA0987DEC8B3BF918642AB6CF8070231CB4CD1A962879089AF3D9
5E3AD46A0968C2819FF6F958B74F4C18784F23A623FC9AEB240368C64556EC46
F131FCAD279E2442CCEB8402D8F0BD172927CEE87E3B4D75685B1C4242B5B5E3
909726C2A58985561890C856632FA4843CB86FC4DABAAC9C077963CA48675DBF
3F913F80AA3C43F7B4CC4B3598F7731BF48B73D417016817C6E0795C1B0CB2DC
DB38B7726DB7E79313DC12E0509238503E95BA711EB3D9A9ED3B3BCE538D1BB2
9418F25346B5F5665D88E75B88EDF2ACFA05A0A26BCB8C09B8B8C5CE3985B7B7
2B23527E77A8B60F0DB14D360256BAA74303D3F33378A9AB0CE55148ED4831B9
15B8D0C1572CDAA628814BFED61F5E7C9A21336079126C25CAA120DF414BFF3A
B49D0C59466AFAC179F40F6443E04D616815B73AA37A355266C0F579B59309F9
141D432524FF9BFD412D5CCB136AC5D90C8CEF6056EC575E1BFF8F5A239E9688
A2171CD1E8AEABC46E892F6EF8428E27DB4D54E39C34A5C019CF66FC22D249BD
824B78C06519243111D02F4C22873DF3F7795BDB6A1224E6698290BC3FA2095C
2217FAFACD923FB53CA7458653B6CA43CE2D01A6FBC1F58F17C37EEB19AEA0AA
894DFAE32A4D1D0D2D65F7AA10388428FB81B25B8C3BB45709BC7967BD58553A
0D59D54F87293D953BD70AF44BB32F9C2F750FC0A519E41958C626ED455E1B62
82D3DBD1EA637775BCC1B2CEF35385B9118614C05C78A57A642C94D976FD541D
162E099640A2F7EA4275852D75E95A635B69B7F64CAB7B158D94CF2BFAA35000
61C63B10E7EE181912E3FD13776180F7DF3CEC4F9083716CA7A2B57540F4BD81
0353F62786CCF555AFD5FB30944ED65DDB5810F109E95240702993C0247068EF
9B9B439BBD1F16D657C982E3A77F821C07A1F4F488081776C4E6A1C2F027C43C
52A7FB5A2D1B27FEA224A856E0850489ADD09149A10EFA5C8440F9DF5D27D2ED
7271C32F9B2355F42C065276D414879A24656F15133D61F36C5BD8BA61B92D01
69B70CEC157C32DD6A251141FA65EF7C6391C587F874F8209C014B7572311734
208342608C6E01E50941984BCF4BBDA4BE3175BB30F4DA53DD3CE1484168BE81
27237714BD14B91A86BF56DF268750D4CD6549633AF8ACB7C75D4C4A4D49D971
2A57A5A06B5544319B62B7902F55F5FF4898D970694F966A8D146AC58C4F9489
86B1F83CCE1C184163D338DE5C080E07DB2EA6B940596E02170EEA1D0323ECA0
138437E10A6C56A0293797A1BD2D4E912B80B49351B0E1CB6EC42AE09406550B
33754A414ED5F0DD2BCF20A37CA88285007585F713257FB5873BB8F91463BDAC
57DB870A586B1A37FA7FAFC841D41DC6D0150EC09FC1DDC72D91ECCA5AD9D5EA
67279A7C95AD201800513FB77E17362E36CF049A6AE2EE6077FF7E3411B6959D
6C214ED3E4E3293C34300FC82698C98756A87F48F166EEE017907293E39008CC
48F36EA83264201C49B4CD66EEAAA6D7AD103D689830CF0A01A263E089EB58F6
051F23E90FA0685AFE9470851066FB6E138FD0BF4DD5990BB524171AAFC6AD4A
78F551EEC021D067FF0B60A6BC87B8E5E649DBDCECAB34930F90A9C8FAF9254D
E334F73683CED56F42C04BEDF925FBDA0D34BFFD968C21AF8F0818F07F57ADC2
691E6494C55CF3565284494F3C24E9BC936AA61BC5F07E420A7E18DFDEDF0B4F
00C638209434018B8A1582CD11DDBB914104AB9C024996A074D41113796ED89F
984EB5F1FAA0BA0ACA51F257FB2784CC8F54A5EC566863EB5703EE0CDA738751
908ACA6489433FE0BDA33FCCCC4AC2003DFE39C26D03D9CBD78CF055C77F4A5C
066A84DCBC8C59A162869C96FCA78117061EBD4C83EEFFB479EF991164B08B8C
F86711A9189914E7BE15A7FF51B0D1D07C6619BA4CC1F4547D6E0D7BBD280FAA
4711ACF915612F510647943BF7228052D90F0F15E0EDA7D1F37C216ED21E5927
D4524FCBC8DFD5645313C81AB049BAF3FCE9D365CA8F3F1A05AA076DA15AF383
76118796317478DB7BFD00B4DC5CD1EB52363762FD7E65AFDF021C299FDDB6C7
098134EBE94D13D9E8F3A9DFC379F974392157E885ECE99C6DC9A7FA5FAE294C
B803480889C782BE314681410AE5BB3AEBC348B7211DD1F4F170EEB827A8DB1F
C3465FAF9982B447F6295FB75D9B46B798FC3D68A453F48F50F6787ABC2DE89C
65730AACBDF1D6CD62BE018F95CE63EDFDFBF21B70037AC53D70489119B0E761
42DFFF1DB2A0437C400E81E203A8A2647812E4FCB17CAF848B3DBEB0295E6D67
F558D29C0B10DA02AAFED53C1E1A5A92128C8B6E960E07D48E52A869F6A5CE25
911214663ACD9895B9977E21A589ECF73EB80F08464405D899E7AE9D5DC082F3
40B62D5AC2E973A03F642F5DE67E660876A6D1B23807DF83B40761E6286953C8
34366D352CC20E6AB050CB8BAC79F1E11A2A048A0327E4A474B2A144319FBA90
47ED654186EA89EB37FEC7836AB3E30525A4C86135D0EB1E18B7A41F0008B53C
8C835D5F08A5373C30B5E3C6DF508FE345C71AB3A57FF8783F4921321AB0C93B
193B9407D4C74DFFC0A4F280FBC375EDD95FA8FD8B2EA49B2BD963B040D078B7
2C99DA5446B8B09626C22ADE09AF890ECB3B9A1FA8B971AF90FFF22EE0F1AABD
F27F37873249128C13D8DF7AD5697D5F91BC7BD5BFE84A4333374BD99B2CEACC
5F0A8448221C2D45B2BD4799C38DC963AEC004137C706B0CC3EF0F8CB130AA0F
94ABA3B9F49AE3FD274604BE61099EAB11D9E2C62A9EA1A66E87168E8D7BD54B
E090857E5592EE14D6BEAD21C6ADA3552D37BD2AD9D78C60357DFBEE2E8E79B2
FB10F8E08C2D63976CD9BC35D9B79C95BAD850469078502B3AE08F32375EB8FE
20E18B8A33CCE59F73BAD96B899AB12739CE5C055C757B6E33EA03A2D051574E
F27EE7C5C53886BEB2B3166F933FA2EA699C5AB42D5A3419F73ABC121D8DB40B
53E3A579E44708769540C4140BC67F1ADE0BF892C57001EA90FE516351A355CB
1012CA6EE48DB37652B299BD66CEDB62E1517E987B493370A1C01DA79EDF104D
90311A638B0D0A6780309CA80AC3927343186B5CB73106FB95FE50103F01070F
360724228D72FDB7509A1975685774FA41F9558D394B0D1BDE42023CAE652858
FC87E280295A6BAE3D5843F7B0D0EA5778BB6AC81DE8098D917A296C2BA33286
4B416CF2AD1F771CC656327D23E2F105BBCE99A252558E6D3876304C4610FA7C
CCC2E344BAFC620A07A8F532B9E2854A63D583CE7227DEFC72D04C39332BD12B
143D9802173A98507B84A19E5289872538ACFAB1651B2638DE722104D834D413
DA588F47FF9720D4CCF129CB58A32A6CB46FB7C564E803770CBB667D47C22D45
9F45A2032C863869EE7CA637C53CA51FB2F662CBA3E7DF0012C9388C4C9B1B0B
9AD968635FBC387D06AE5D07915EA0190CB416F2EB78D09F35EF64C6D8E2DB39
4DFDACF9601D061E56479357F5F38B219ACA33AC832006629198B1F660EE8ACB
EA1CB8112A4CFEA2F9A914D8FC3486FE126B9F6C0D4A3F0C3CE8A596C6B234C4
CA78765D1F69A9FA48670A2D553D7CB134FCECA247EE6920D25E2B36FC86BDD2
778893A3E5DBB41AA23B0B357A611F8C77BFABC934517539796D8DBCB30E9164
2208DB40939D2ED8069FB7C25682DF5CC2FF321BF3AC819375B9240A6E17F35E
24AE9666FDEEAB259254CC4305A9FE81079C1EF280410004E5A4D6F6C66A50A9
349FB38370AAB831F5C12089F7932F6489BEEA937AA835B42D710DFDCF6F09EA
A81E2977977BD27694EF450413993AB598BBC481A31600CB5D81CF1F1FB04763
1B58C3C672A971FD6350F351A817CA6B414A8BD53F66B5AC68D2CC353B610481
386B41BBF4DD3453644077D0C5888144686AFE62D9048B7CD2428C818086E372
2B2857228C685E1633119C875B23E8A3169655B8435E943445066B2139F4B77A
D10123270A05BD17AABFB9D89DFBF4C4C26AD9BF195163944C18CA526FF4A8F3
58E42B7FE909AEE06B525C424DEF92008CE0AC08ADC3137FAA0B7567E025B379
15D1688D0B971B67D7364D3A3B13DE7AD5B63F45788200D26EBF753D3FAE3229
AEAC457ED02A56C9274E1DEA0870980FE8C493D2251812DEEDF52D86964B7DF3
0D83513DB6A923CEEA1FAA9AEB3D6142723FB85355020A7E4CB947879C5C27F6
C902A66A36EB13B7F1E8A1683843F1A6D6B173C2B58CEB91B40C3A76CBB82A5C
9BCA9EA7CD06BFBB0E0D2491D41A1CE80014F807A50BF421F5E272BA9F01453D
6714E41E2F712B465B46883D9F6F1C8B4A258ACAD2C5FC933401CFE6A390C5D5
BFA5DBD78BDAB590709BAF7008D91093F42EB05579C5D6087F1FE79AF69D2126
5C7E06ED14D2FEDB45E9A645B02AD6BA9F6D426AC49479C96C875A97A3B85C94
F94B6432853EE6FCF4F9AC6B6124145A51588168B5E308291EEF7475D233AD6E
8AFEBB52D9FB138400165772126134C854EABA0F0F0470AB6C55FD63A4DFA959
8CE7155C393E4B6992E995B8A4F3BDCAF1794C18EA054B1AFC9058F35442A206
74F5253F728AB67AA3AEA8D2C842C4FD7C185B6C203E80151055EDD2AF03A31F
B8B1FFB686D3D6D73EAACF67A26D8FD1C5ADA269CDFAFE770FD2E54115B48A27
1DD85046D84930F320191246AD0959F44BAA57A0ED6EEE4BBE6DF6105F276A1E
E1B63CD8334E92407673B4C92F80865940DEEFC4E06D7DC83F1C67B8012BCCAF
89CBDE74B5725153A83809446DD6995451D8FE9BCA95A1B21BA0C60A0A51BA7D
3E82FBC4139B0F7AAD04388F7E5D4EABCD7E9EFBDCFDB925E469B37CE1EB1D12
A4A5DF9DDA07E4B55736A343D4F9DE9F5128D4644B4EBBDC6FD1AC402660484D
F278A2808A80B7AF6405790FACA5C5765B61ED2C379A528B9A0906330212944F
3FA8F3FF03B9C4871B643998A2DEBA3CFEB8D35A479974517228E3E6CBC3D888
153F0EF069C3B10D4313560026C7929C8228957CB51990692B77C07F3E69515D
C773741DF533D3113879797D0B0D808D9043AA863071A7B855CBAB764EE2CC82
92C58044E417AFE31266C2CB603C9F708BB748EDB73EA5E7FDC66C9A9D225505
734F02167E4F1573A2637257E929C0FED8502433ABBA63468D175D44E71939E0
7A8FE6C9745AAE4166B724652F0CB43C18222459EAE75302776B4EF6C936DF6E
D74C506506EDE0ADE318EF931EC487D624575BBD8F1B968AB37B5C35DA60C835
E387A0D3E0E82A93C1D6CA6C0DE548B6276C34973F21B290749E8778ADBD0376
C4FAA5C21234E2F73BBC31957CA2DC07603F5628EAC710E57006D906009367F6
238EB16D50587E0F28669EA908B653A25D87C9FF45EEB4CF6790198201014EF6
5492A874D3C051B1EC7A88CD2384526DF318C7BDAD160402FBAFC3F343EFC060
60AA7660C88C28AC7B601557DEB2E8704EDD586C655EBD4E8FB43EE5E2E1FEB1
137300F23AAA6B1B31DD45C04F73342206ECDCA85CF0F44AA57C1BF22B9E8B58
9AED552442379EF85E30005C6F977BBAA241B413927DAACCE55E0D1147F2440C
3E125AB3A3E9CCA47090292A37C74B62025175D2146C24B289FFBA4D5028AD6A
F7086A0FE2500FBB3A4BBDFC9EDE1B2AAD6DA59A708DA89484DC23E00497937B
F78BF71A359E543FD08000D2A90600281B696B9B904ADECB168F518EA7AE396A
36467CBBB183BDDBEBA324A6605374F4526D25D4CEB3735BB16F2CB905866906
CDAA9EFEE0341CA1DD279777275CE471970A1A04245A2D8BC9B21E3215189165
B33DC122A43320F50D0748E02FBB2BB579BB713F07E9BC2435374EBB8BCC9317
F33B7B59F99EA9192DC81B6851A97C76E6EA7C489265AE805080A078B2FD6D6C
B2BF21E6D1506144D6D91A64863878B0C24C97F0C509DE2867D292D2F8AB9220
2D1203D7918446B7D51F7A0ACDEACD178A0840E498725FC2FFBA003E5073D733
682F43DCFFA9B7E79114B0FEFD1E834C0D3BD205423356854CB3CA29E5E06970
A3F374C78F7B0FDC03EBDBF8423E90CF918DFD0808C9FC2EA8086E1C260A96B5
85A82DEF16D7113CA5870EBDA97F9D85833766AAB90283C6DF2342E9188BAD3E
B9CB36FF27311D82A200ACA1543F94B2BD1CD826D66FC62237C73C8E39385DAD
A93E49760E290283AF3F64F193B070BA67FF1CA77218EB006C248A3E22A11441
BEFD81C1FA2BD40E85990EA7BF4D2B3CC55CCB01E9558DA2317A35612C142291
8EC122A7F7361843AF997B28AB30C66B543AC04B44527E40A7C55904FA94A824
F05D731F8FD763BF62CB7949EA1F36F4EBEC35F2C030C2BF66E3E616E9DD3276
1822E6EFD5C6E8984D81998CDE2B7221C1F93FF803AF645591B14991E288D012
769FA2B57E0852D96E1865D46DDDB837E1597255123555DF929C2250F18B96D3
7976A0A1C95F88297B472602C227BA035C976BB3E0A16B00BA8E12ADF552FB03
3E46A2B0E1659FF2E2203F9137C71D0178CD17070CDBD1C10CC8C85470674CA3
8BF44CFEB78E03A774F396F0BBA2E0DE77854442B2C2F1470CEB9D465C43CC46
60B10332554FB702055578817A575884DF3573500D77665F4D784F4083A01403
267A7F99EB42F41F642B75094C6604E951C6C1D4201D094EB60BD024E5E69C57
350A044ABD3BAF2350F7C5075E5A44884A8BAA61E02868F06E201894BA3BCD93
038717B9F22931170C82BD28D02D271364C9551697D71A6AC943A5F4E4D3A296
319CA96CC1F3199092D7D500A3A0236F0C0E77E3DAD4862C49BEA8401FA93D1A
734A5EBBBCF34C6528B87F4CA5DB348237313C03B0697B9A1049B71DC5A8282C
1587E71A86F6A31576251686C94307FD701A5A15FF8D417A3F19C8C714B146E8
936E7E89BB970B8F18B550555AC8C84B46EED46EE665A8C9E074CE0A5F18D9D6
98C14F081EA93C97A4FDA000AF38522CF8EC89908696607538201AEC12BCB778
1EB03A103278CF7D243530BF2C4691E7E47FD9D484BD7EC602E03110911C7131
F64A00E2FFF7A73AA97DA24E49F3B3EC8EE7F66F6AC35817C4B77F83B98A3B43
069771946E22173D7C8F50C7BFF79416A28F3056E874E1788393E13FF94757B3
F83FCB7ACF90AED1E68C6E0BC55BF3CFC1437C7784B2A04468D09A27215C2694
81B1E590A336E5EFD7F001174357D4A61E500AE5E2CEBA5FDC09144BEC6CAA3D
3E47DE5BEE7942D4FECCD63DA87192EE0BF4111E99B5CE65468427A6EE0EAD70
CE078305224CAA26992E006C6773F07D9CE6C4DF0260D9D59FCBF1320B1F52A1
6DE0D151DD38DD5D789B3C2FF7FEE15CC88784D1D7079D5667F016E10925F5ED
EC1F31C39EA2888B8CC386DCC11B982E1E890CFFDFE783155610ADD05ED337A0
C83F009562165C9737A70DD15D1CCF86B8CF0734132766E74570BB7C31664E7B
A41B4443EF949D526848CEAE978A6FC15E685DDA7D719EC67FE19C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D12BCF5E67293A1F71DF87589FD22D5F72B9C91CCF4019F97356DEBC9B82C93
BD0040BBCEB10CF8F607E0F7863C43D7F6A91917EBD66730DBD642DAB8769849
47384FFFB4994ECF216FFA8140397695EE5AD63F1156720A01BBFB15AA24FDB8
2F2A8F541C7FC860E03F5E4DE80BCF6891263C142159D5879CA0A1883A9B6C50
CBDA9CF0C97E761E354C39527F070E680B42E6732896B10E6A7600184B156ACF
57BD9A98F613FC166F47C3D1C4E5E02BAB648D74B078EE3F0D8148D981451BD3
918C71284E6154BEDF8D66BA1261A7459F64F133445F9BE19A2C48B1FE1D06B1
845AB18E2E5C17B77C48FBAE7AA98424BA0F90F689216F31EFABC25D4EC37767
C5A4BD9210AB9F0D3385717E8980C7F6C021061CC213ECEDD34548605F3FF29F
B92FEF1C849AFF8E3B73CD51770C28070FC7CE19270F71F6DC653B75064E2B26
689E007EF544F07060235145CD241843E18E2BE093228678586D274EC67FA6EC
A20C4F32E8C8FA66E8D4367454CA97DEC6FE4167AEA86695173D98B7F045A8E4
75159D341F0602E2CD7E80F2615580BF3F88571D558A48AA484A4DC0DF2987C7
14D11F6F8431D4F954DC327898AFDDA452041D8C1A0AF1FBEB07EAFEE4951735
7EEA58BA230869D5263C8514B7F2D3C52E56F379BEB0058C7135F2D3BCBBF763
F875D2F89511044FFCED24209ABB944E953CF1953E0251EE138C0213688E67AB
213E4B4E24654BEDBD69792383CD8DD40A2914B23518324D1FC4B15473101138
882D4CCFE9D57A1FBD19924662D16D4509F94D0FE8BBB7B66E0005BF53F5DCA4
6EDA28BF0C2AB7113EB95FB5054CA86D03051D77FBAF0B49785B14BFEF5DDFF4
007FFF20157DBAAF8174A0FE7BE8E2A3C0D3726BBA2AAC092C20244E9AEFFD63
5F5548A1E61CA45D557F075B0F11E2D7051CF99C4FA2C26B5C6BC21B0A8E8A55
5D989CFD5A645EE57CBE03C44D9A9104CD4B6361931EAB44C243B705921A0162
FB3C9241FAB68CA39F0575B401A1E45AC780A40ED51B3E4D85ABC12FA24EBD7C
347CA3E03B5CE7FFDE739E46899064BB3315EFCB63906BDD3246F2E2963B15D5
BD4E8663C3D79F4B3A28FB5753B36BE150DDFCBB31C4B98B35DCC808C609417D
280353B7A15C0663A852293E0C19C61188EC3823631698765C5A2D094CB71987
1E91AACB5A85AE42DBCE1A8AB7784A38A53B52FF442A4879CF6AD7F14CB416CC
A7BB72495C099F1B9F5D3F79E60F7BBB3FAEB89D41D493031D1A5B56C3F6D9E5
6167549F665E4D31C88D8F355B2BD99C9A5C4068081DCDDC1D965F29B641208C
3A1AC68C1E371C456FF009916BAB4773B5F64A29FDD35933D21C39E21C7A69E7
282A7DEFC27FDCB4F97CA5B834DC8B7CF0428E55B69822E00FF7BA4162C5200D
4A37296A7D81158569083D3ACB37967B4B9A6A86D4C7398FF9688BAB99DB1198
DFA9B5CA7A40F614C879BA75EC513607A65E0EF0CFB3418038277FD263AB7D12
B3B5F1AFAE99B2399045A6B562089E84CFE1011574D9EBBE781DA16CD6316DF7
FE6D02A67C93CEBAB9D68013931ED62A786A12F5FA899E9A05CB50300FC3C1E6
92BB32476CC1D18E3165111D7D81ECA5810EDD1497F0E2E7428A23D08D478025
8E8B692125DC02C19B85F0390ABFACBF6AA6F5304274B026E365EA2E5831D4A4
22F2E0E9E16E0400625B07BD16469AB8F2B0976A9C5FFF29E37DED40CC9C5846
DC94B5017D455C59552906D8A3B80945B9B205E9DB8F7D59C89433805C0DA1E1
23DA185149F5A42640A60C37BF6F6232AFF7EEA4DD17CE2ACD25BDEFC8DE44D6
7D06B271BD7FE5E52377103B26732548018A4D4D2B0BC0D8B6047621EF033273
D8A9C8235965AEDBF2AA8438449C729EDD013CC134EC6FD749EFCA6B86343A0B
EC9FA8BABCCBFCD7E2123E3BF60EC48ED7A32D37D712DDA34E67D08D5360FCB7
D232328E72542923370614897E97F4746B167693BA49B478E9B8EF43415A1A47
9C9CC6243685DB3CFA8BD007C8EE17EA56B73B3F2FB3DB7F7E8C8304688DDF78
315A8E4582E555D73680EB25E423C8624DF45C6F038A6C4128F653DB3DCBC064
6CE883CDBCEB4C1A82412E8CE1DFE12C4C065E5EDBF698916B8B55A50BDF572C
18A605EE0635096BF26769BDE7DEEC6D717B3EB072FE0186123B2457B2BAA5AC
10E09294A449C5EB890D82B694F653410486D8FF4096CD6B44B56635592C3BC3
DB96196652FBBD242643FEF8FCFF86F1B316C0E451E4F217C803AD483D87164E
EEAFADBF3F60720ED8E955908BBB0DEF747D5D88FDC30894BA64FA6112490E0E
DDF48A5182F9D7DF8FE3B717655CE7D27D9F49ED1538DA2634F10D6DBC65BBCC
CE92270D872F45AB05F9383AFCF74B41089FDBFB4D140728B2D35B566105F533
828CFF77C0C88500E590FAC4544DC8807DF5F6C1053EDCE4112DB7B1C4700D42
EDAA91E65EF53D8833D5099C6A2A40A6D6505B6615C2477EFB73DB1386FEEA79
FEC8CAAF585F8B481CC225D2BFDBADE23512B36AB543E93DBA4C40BD4EA59194
239FAC40675FA751426043E16579FCA480609F15551C08E35EA2C7E7BA4D5421
A829FE10B6D9710BBA1EAECB29D755AD060F6D1BB42CF50DE12DFDDC54827C90
C0C2ECA5DAF9BF64878A013CE91309DE3C956752AA1FE7013DF0AE2BFEDD4DF5
C07208173F0CB93776C30EEF6F72947AA228D09B6DF22D7500DC7F5B35FFEFA9
8017E92786E221EB7B3AF2A5AD03576ED86A909AC903B2E36C97942EF158C0B8
D71FB46D37FB588CB7E83498DE6759A4C167AFFE299677A11F1CAD63972DFB02
E334C241D1B4AE6563FAB21D5E4457478CE2E9F4295FA4D1A70A60DBB16C9920
3C9403A633E1EDFAD4B523B1DD05C889D0133123530617449AA701C4AD68138E
ECD08C67F351CC0D93D513EABA3DE2F42A5B5DD8C6FD508F212BEF4ABC1A7FFA
FB9105DE403BB1D4A9906F3EAC6F3CF2D7A37A832961668F00BEBE2C21FF7BB3
47E68236BDEECC2A84DE7603ECC022CBAED2657A1921F7380AF3BB163DD15842
49AC14F42037B4DBB3BA5E853736E4F0BD6243EB685931427EEE0E098670FFDE
30A426DB7710FBA126BFA889A70F371DB13780CDF68AA7B528E70D1A201745C3
6FD67DC0B430E3D8959DDC30047038A61232435130296CE187576C90DADF9613
DD66EA9EA97F1DA2401BB753A54549359CF4686B930D51A76E70981D0DFA6815
A409FC751B19B070E435D5120CA3BE020D41CFA0A54391CCEE99D0FAB54AA582
1C7E381B561B1DFA91B1D3D20C28687CCBA357EC5C2EA0707CEABD8D4CC60753
666F37E5BFE1A7FCCE35E848C5480CA1D2A370B6D9C13FD76EC557C8B6642D93
DB9BE58DD249F981B298628C865315C4B7009E54DD50A8E7026A6D363D619D46
DD42291FE4C18F6335C9AA3D95BB4CA684B3AFCC1E4FE82C36E94ED84C9A65A8
A0F7D3AEA7DBD1C15004BF88B72E990A1D848320BAB75084B1CF47BC6A841BD8
D840A2AEFCBE4AC81FBF3D4D3ED20E2920A82A3B52599EB0636EF92E5D7C13FB
08C67369747F700CF2DF3F4CD3F88A8F20675B3C8AD0A81070F38B86884E5FEF
2C36E94ED84C9A65A8A0F7D3AEA7DA25B6BECBB2437EE68288BF3DE110833F2E
36C29276030C7D8A871C870365A38AA8C5DC03E895AA051827DC2E2B527D6BE2
5D96514DE0886FE5FB6F899C39B23605BE4E4FD9695F8958AE4D69D7079040BB
1131B6270A39F3807AD7ECAF59DDCCB47516FA152620B4BFA10C5C4C05A2BBB2
1273D4C40A12D46C2DBA5CB6DFC1C8F8C4831A0481175FBF5284F734FB454F1F
D7546D51C42FC612033464895E2FAB7A48089AEAB650BB1D9B35B4D1566B4C09
07C5366EF59A31D6E8675CC4AA6057252501C2721920D20C6358EC29D71C5F84
FE6EB3678A24AA268FB19A5038B91AC60A8C9DCE51FF33CBFE3E741DDB3B6D67
96FCCE15B7FC1A6DA06712CCAF101CA11E072445B8EB6B441DADD217940B2406
5CA3889AEB90356C867794DC13D70E9E49038148FCD8F2EF4BFA382D6AEBC8E4
F899683525D02165FFA4D9B4C564BD5AC7D433B2ABE29DA4F5B51C2D9CEA95B0
0DEE7E0EDB339EC4685617622793C79F90D61F45C8457FCD4720D28BF9E906D9
59216060DB63D1280097BED6F364260C4E8875110E2F94ED9D6F1DE7D8DDF14B
4862F0911B74EC159DA81A158226AF3FBCB81AE290174272375D6B84A0C17F76
9B508388DD936D11F74A56C71FE1D42E2637E891885516C7B7569E6262DAE5BB
E7B326CF5A229D2B16EF45A81F2D36111B4AC1BEAE9A3CF3741FCC90E115F94B
379DE46AB4329FFE37CB337C0EABF690B6551DE8029ACFC032BA9992DA634047
D16BDC3E9A25C9DAB9FB9D1D00AA769D738ABF9C76B66FB1122DB4B1B36ECF44
C196954CAF9E4172E43558D34A1D46683E515B154BCF99217F8B0F7A5EDFE800
B60F6CFE3C91EDB428CEE7220A24C4F0445E92D642AC8665E1E90F4DF9569C88
3103BD3AE49D972D0FBEAD55C9B7126CB5664632B6E41849E7922FAEF4903856
73C4C3C500CD79BC707725C13B839C505E958B168CFA121305A1AE54EFB79F9A
6C1DCB70AF42BC851377AFC0C3726112DAEA784423AB9BD63981B7B198FCF2EB
4AB5767307DC5ABFF950438DC37E9700A7BCD93B469068A5BD2017E1A9D2C72D
F5C9DA5A684044713B170DB43BA10C761AA5923D3E6DA44D1CDC0C2DE209B250
C3F352B68B08C9813C036CEED08DC0DFC9A62B4A886C645E9E282B98F5C481E2
D947C76C5154DD94108CA1FF9400A3ECCC59ED40A9725BF333A123BEC12B7E4F
5DC3A1AFE6E66913D3A895BEA414A7D5D629905814E0EEB53E4E498DEB47B3DC
A9FABA48742E7972433CC652E9B263B405B4722D3E3F3B179A26C0F9F8ECE526
BBD51C4686FAAB794EB8231057E26869724B898478E82A3DE3D951BF6DD21F4C
B95825DDB1EA6EDA54268F065EFCA24DDC0866ADF1E055BDA0085CB9C7888D2D
783DABC24B5910F267D3020350FD30B3CAB081F0DFD79AEDAB6A1C69E80E318B
7FEE4E042019BC85159520ADF4EBAB73776E79466A8CB826A8EC58D0ED266D44
E6E99FEF1AB1D3E69C80F77651B6B1FA8B4FFCBCD6D247848CEE1E28349AF1DD
B32F309C937CFC9E9ACC235E63005CD5709ABD4706473F2D3D644840865AE2A6
E40D31BAEBDBAAC5E96BA06150284E45B02002887340AC83605B885C21FB6AF8
738218BF249A218DE01BB9D34A687C0E28D8B0DA432602C227A2F0C3A8BE6E7E
34A8AC19BFD5351A120B3C7C63721D4F7B49FF9B87EEFB1ABC2BFBF9D4D94ADD
373FA34CCA87A8722E8283EA4BACEEF5163D8911570988EB6973E8BA5BB704B8
BCDBC1AC8A5F60791246E70C119DA89FCC5D525A259E25860A372DA2C61D4304
CC6882944B7D444BAE278DE0CA379261810E9342182BD317665645A9F6CB1641
369CCCED89789DDE94CB4FBF335721FFFB559634A7CF4256290A98C3E8767015
1CE638FD0D280D8FDAF03E40529BF5E6EA9D19EE8175E878DD5C996A3367E529
4D3C6373FF354CA4A8C4DEE42A9546DE5E9F7C97284940D5A03C042ADBEDF764
60DADCF9A3434528F9867BDE8B2DFFEAC9E4E66EA8327BB7FA5CC1D7E5AA32CE
2A35E89E582269E107408C905FD4677D302CD728BC91BE43A4C22DB19C8236E2
A6FA8745C2B3700B3B3780CDA37D652B12CFBAA0F0627B5C2BF0E063EB23D7C8
34901F8E6B50AB6BF0A83D7BC91AD4D4A2E9F96F4F81D173E565A2C717D7DF40
01ABAF7511DD852CE7E525AE2BFD33E81E19B1D95224B78BA3C7E6A7D0067E32
D30AC44C52EE7432850236BB28D5CA0FA6E763176BFA27BAA32F5501405E9B7A
B69DC74D62C0BA1320D304F0ED6510962A8DB67D6F73FE5929D306960B844B00
D92B4A7778ABA7590E27B34C2E1CCDF1CF6FEF7BBB5C40707656E6C1EE34F30E
77F7F1544A34124181B5725019110E3B58E40044BA7B828CA0967703105E1B00
54D784B5A595E52890888F7030C370B51C17E16F6AD8BA755599AA8473D05724
95D95688A154C0879FD158B0EE2D502C4552ABBBFADE70C0ED8D059CD530730F
C3D251C31AF853AA3AF3CA21ED4C8E79078E3F4443A5EF391EDBCD26D2EC9638
DA93DE407D800FEDB48A5D35754A69C1904CB0CD0152F3EAC944D97713262388
B4BCC6C0890A4296F3E982670824824E026462E92D1CCF0E9F968009CF30276C
CACFB36B9EC5E5934B4D5C5EC0190B6D9FD1922CBF0E6741D8BCCC535D0622A2
014C48EB7FE9D1349EA274B0C86C0D39B4AF230A1B06F80BB53DC0400730CE7D
9AC63400136AAC6E4C62F20EE09A46B054E37910667A3F47EF61EDEFDFF69266
54FC5506C7C15F6BAF9808711285E883BAEF53EF9F5845A0369FF7916EC434D7
135E30F135242029B25014F7CB11FC105735BD2617C174C73C8AC1D2483719BC
E7BFB0E3068B9C4F379F634CC448B694513E889AFB6F9AC3EBCB65C21B0B5ACB
813FE8EEFAF54380235678BC4E979023692279AEA3845BB357B66D37DE769E86
DF87BCB59F4C0BFCD17A869E73540DFD381AD2C68CBB25636F48E6960FB51396
40599BF71EAAB28FBB0FDBEF494B64F6FC61B7C9EE6277C704489EEE9ED8D42A
628E9CEC9E392B7E9F7C4C3148C2F2EDC7802390B73079E26AA30D3828EB29E0
B083F4A0D5EA283F58E6FB302FDB872B7AD1F27EA24D0A1BD48A9CD1A095B6CF
391CAB3B3D41B290CA0CFCE438F9D9DF32C7ECC694D26D54D21E4C29664A425A
730CE32B2CD7EE57B3AA5C942ED0F288057173C032BF89A17B1BFE968F1F598B
619C5EE22DF07A30F745B84E47CE7EF4D761C49DE74E56FF11A0A9B677C363DB
428BE03F0CC9DE5355F557210D938DCCC03323FE47A279D457566E2767827AC3
F7D1FD673623DE6A58A7094B39E24EACA6F771594ABEAFE02DE2F3BB4ECFE53C
F03448207F39DDFFE291724B504AD66BB73423493543F102D25C60862F5D05BF
23AF66A034D21E7E02975081A9E9B8D0735EB2E9AFFEA03735DDC9EBA72A1A51
18997A447F50E08FC88C5C670AA0B84EE2007695468D5E4F311FEBDA6F4A432B
FA5970C469A76410D821014AF05AFA5C1BBBFF90B35E09E59D5BF45F4597C125
F826DCF07D75C9611E1AAA1E11144BF346175F6D83E823CE988F934FE89A0A02
004E2B52AFF8D0DF867028BD8DBF6CFE7216C906C67563DCF0251F67C9B49CE0
4E157911668351932BAD12C34F541202FF7DB6E71B95C93E24D9F877BA12DCDA
92A8468EC5CC0903781A64DAA6A6890252808F6AED25E1A7A937BCFD7687E739
F5591241DCAC7A14D0E40E29FD075D483CDF957146D4D3404CB20AEE4326857D
335C9EE571F0C7BCD44A60F2BC0D4C6CB97A0F8C91EC315A76F8325473EC0ABC
BE7D487ABD80493894E7480D8C744E9A5ACC588110BFA316F8F1592D0A05AEA7
716B084D2F8DA8CF1CD60FE15B2BE074C40CC39F2BD976D01FBA4AD07802547F
4C271129635941D9D5FDC93191A5201CC8D47C331E5966C4649A364F20CC4C06
7BAAB48347CF805E7209A74C1A7C52B1621098DF167E5EF3BEFBB359613D38BD
570645C4E643F4B500E78C3B438B97FA108E3470449D48CC3E21A78FF952264E
67A48F30AE04C7E8E32C70EAC5DB72057CD5A47841A898964AF845E577B63AB6
011A6690E582A10AF5A77094130C7A4AFF9CBD291EB7ADEBF0BB7425562AF872
2C20E453232C722979CBA1255A99B2DDFCF5B87931D5DFEF629DF4CAF62DD382
D7048C2D2021B12DD340B4B329FB463D8DB97F3D524536EE0D954F44AB46FFB5
A573D38449690615F053374FD4877123BB72F8C64F173A76D220DE7174CCDD27
320777E09104B5A1BD65D8D4E2A0CAC755A7F47553C51FBD334AEBE7C94AED09
D4F3BA8FBF79F5205F9E9A2CEBA09A2C556CB351BB4C79F08B23A49CDAE98497
C698D6B7F1EE7D0F4756E83497BDDE5C420158E61E20A1E6EB2B6817243EE372
A34933D896AF5BD9DC213338E450EA33C4FC19540D9719D98B3C68EBCE469792
111821E9663F64CD75DE16B781A028C74C1254638660E68275C48C413165900C
EB9A26F5E0DE684B84CD3F3123AC6A372900CF348A72E80466D908162DE8D1DA
CA45F94EFC91E7B6E9915297755CB9216A95E6CA82EF53958976A0AFAA3A3689
003BBC7A5C6DC85517CD9D9EE65C8253A55F2364C011C37760136BA6CA06D972
D098030B9FBB427F058A30146066DA961E33C4F153BEE2BB1923CA8B2DB949DF
CBB10859C20131AEB844E699F2B507B21718B14D4B544CD42AC0F35999C57F26
4E10D50CCF4586CF1ABFB5DDD867CD52C2606F5711AA0AC2EA497E7CA61E2DCF
787236F3F60841575DABBE32EE80A4EDB79F6948BA8CE6ACB7A98A8B4C3FDCCD
65865D0A211BA1A71D6EEDE27BE8728A7C50620FE7D73BAD514F7A3BBAFB3CB1
5C65F9D3987C7A6A225E056EE6192BBDBFA5AE3E482FC5A3EBFBE9116A755A00
0BC9DB34240FDA80B98951672E161C9EC59305D14DF59790FA709A709D09E1C8
1AD5C09BC5AED2C485397C0EA529687D80AB1D61D072510D59093F38B0AC1727
A5FDE37C6401CDDFC6777D78CCD9ED2EE3A215A95005B3D5AC1213A2A11D1EF5
7F96E4B091CFF1F4C97714871F3D2FADF0209098477C20E21B4AB7F1BC9E9DDF
573262EFB799C87BC1829A825CB76EFB3BD446501A78A35D015EA4F7D1868211
9E8EEFA69536D5F6E1865F2E6B992CC1FDBA8B94DB9305DEFCD411ABA5012D78
81C8E343085F63C7F89565EEE0ECC9ECDC536B1A6CFBD3FB4D0CA39E60FA0C37
2F3AF6D81E74FA9BE5780C771128A8C05D4EF79771F5DDB909B8CFA3B7FBF5EE
A0D75C70732886EFC69175F47280A02A155EEA9BBAE2C208D1B93A0737713649
519A904A4D4ABD6DA2F59B1591F88E3F12B0CF6FD8C43A408FFA77CA6D543A4A
7F2BC287EFD547C81C9DA4F0912AFBCBDAF9DC4E51AFAF54187560F53C8AF8B6
15FA8F77245B97DF00EEC465A32E9A19487E12618F1C85B4CBC95CA1896798CF
C2C3879B8AD2044134D63CF46DACB82EE3F46656FAE61528C19E50AB90745EDA
5A90CB41C0D78D14A7135D63DB186A39D7297C726CE0D6E8572FA120A9297F31
A90771E2F3F55410E26902FB565176F51C190EE48F2ABDEF35C137E1F5A9F2BB
9BF99945C1D5A004C97ABEEC99D19107DACA54641DB31683037456063B774746
77911C92C467EFF7A0570D25A631B9C86E40D4F347C512C3A36F75C0D798E340
805CAB95E10E7C3BB7AA676021CDA7DC003B4D152E97AA68C090ECA117E8E770
C48D913B27C8437DE57D9852BD0DF59BD5A83F4B69C0ACE19F3B60BEA3D4E10D
331EF26AE282146A7AF8C5D2AF2FF88BD619F1A79AC9B99CC98944F6D8828C75
0D260748CD74FA13470EFF4EE531A3BC935226253E1AA57754C4CD66CA5AF862
9B529917AE8552C571ADC7C212B7F1BEDEDDC56C29BF76E1A7D08A8ED6857D7C
042F5F4B35844DEC3008ADFE8880211E92DACDFDCDA10FF6AF9E2AAB8A6DAA2C
AA1EDEC7A11DB8744BE8D4F2D7B12E777D115DAE9D5BEC73ECAB818EE6E75DBD
EA70ABDD2EDADC05F0BFDEA1B49EF666991EAB9BB8BF1CDE1EBEA1C9B8FB0832
9FD6ECD8E5D90EFB3D449014BE11B118B8174CFA895684C3E1ED54A0934D7B3B
8A575312929DC8EC878DE7E17F82BFF82267E2DE86DF8660274AC63E4A4FBA85
6FC008861DAAF59BE7B9084694552A0E606C56510DE2B6E7092E0E5E3A8DBA9B
B8C5D47F5A594AFB132AF95D1EC17FFB56DB5C1F14F50E194F779DAB25FDCD1B
5E575CA9B575F10EE91AAFE178054E0A296D75D8928FACA96791E39BD831F3C8
D0DEBB63013D8E09405D34EB07D98F10940616008BFEB0036DADD01DEABC1154
3405C80E146BB118497BD332F0DE43E89FC167CC64BE96B46C89337A716B7D68
78EC89C4573726113ACEAE5A69A69A6113FEE12346C7972BDAE3C07608CA2A24
5C3F8AED8C27B1983AFC5A2F90391299706BAE09E9DE0F9C2CA51864747FEB70
D951D03955EF5C9E841C73EAF76F8B7FF4CF1BD625F73960871E85F79D705A25
323E6AEF65262B5B6459672DCC2F09CBE650CC48A7D6C29F69A9C5F63DAAADC2
E4C11086C53F2516DA55BCC9E997B92063EB4E957EC059AB78D155C571B8D486
FDCA72AACA909CBC8D70FC407039F14D206BE0873B0BED9D035D9B29C470CE73
F5EB817B001E41887ABA4AA06BF9896CAF4885720B34587EA15C339342CA0C89
B992FD6C5D6CDBFCC261B0BC775560FCF20F2A5FC98DAE7EF4E89DD3027B4459
C6B74411586A2ABEFE6DB00B8EEB7D1DE0677D70AEF27AF272A494E4406E8419
0A480666524CC3CCA4447646B292CFFFEC11153F57119AFB5029388300E35FE2
6E1AFF0DBDBBC5CEE16D9773557255BB2C2E70DE0521FBF91659A3547FF3CC5A
FE5EB3AF97E72594F7936595259DA4A6CCF73B6465DA8ADE72E1F7E45D671420
BBB25F1EA21FBE682F2A98D2322C8B3CBFDFEF4894DBCA3F28E8C441BDEB6920
878A04A7BB615F74F5A26A4B5AF99808AE1402042FD64F17D568A234E481DEFE
4AFA5A82C559CA47B04A126CA7D8E15E1D4CBF098641B74FC678598F2021956D
1F413D11D4FD471F6B6F27BC4A273B8EDEC2EDA252119950277E7F1E5AF32E5F
DC89DB183F4A5132F44D9C44A316A77E6B4C15D3822CF627E3444B5C07CF1B6E
A97982C0D9C930A1508B0EDD5A5708A42286F3BAF0E079F1C7200D926691B79C
E6954369093BBCC304F5FD4695D1086B2AF5050CEB3F341BF87D597732F69720
D1B94FBA695C17BCA32CD209A1D0E18E773DDDA71E03BADF3ED0B70C7E735D57
AA8CE13E94B2C37DD07BC861AC1B4150F41C5DA34E3EC1A3EC9960B1F33D5DC3
178D03C46C741DA1C5277072846F1570C055BCCBAAECFD14BC816B173B0104B9
DAE508C15C03D6C91F2C8F04746D82E48972DFBB2C7AE5C6B3EF40DB36CE3B9D
DBFD6C574117146FE5772AF7224C82C5E92797BB16CF1296D929E3E3E5249626
D5E607D21C4C6B5E4238967342D7714172F78E8239A43DCFD1238DB52BDB2DC6
3FEDC4DAC441FC5946ECA353B7BDEA986F82B16C715C2B122AD9F4B18AF151E0
7FB9BC5878676C89ED303C5E4AD345A411E33E17013D4E3A243E1498FAC8A36B
0679373FACD83286BA99E658BA28961BE703278B20205D57749B1F9F8C264912
189A99FFD97BFEFA0FBA567C801ABFDA08EB1D345CCA3ECFFCDE99A053213ED0
B0E4021C669F306B9286980ECE3FE8C7D1F167DA219E15F2E917C2BB08F48046
C864E28D36587B1D27CC97040606B12B26FFECBC96846B8E71D290F35E9B5A8A
E20055CCA473FD7BD10AE64DBCCA66C5D873DD414896010FA22C09596BBD1008
CCD083EB1202EFBB23922C1ACD3769DC64763F75808765486CB7455E7C83DC10
E58B38A64CFECA4BE6D620E0FD997B82D0E20B2DC4557630CF5A74F5D7E63DD1
8F5019F4E1CE7A20B69A9DDEF26B348830EB9523E34A36EF53B74CB7F3212B38
F174642CB032622CACA1743E1CE33E0FCB0013764D7343E64610220D39EFA55D
C4328BC9A2499AF5C78794A249C6AE9AC0B7C07968C154F4E058567B8ED40B8C
8CE2EE052B95F98A2F28E48BD3E0A0E0E69428F0E66BC9A210AAA2747C89C2CC
A8E8A7D5EE53DE35ADBAF5A5C3E80F334C1DED26052A298CBA439D8C5B76E4FE
775A3FF937C6CB1880A0BB73C1F3DCF6191B0F1897F45E55B036AC8106A85B31
E72A5582CBA55E8DD354224F9ACE062C2B0B179D0C8CB7A1B3B9AA9D407AA705
18FDF8D3469944DB37CC1D11F062EBF80D988B018FD6F821628D9B03C90749B8
4AAAE5FE90F415BFF0C6F1ECBDAB5C05A61D3AACCA9DA523ABFF4B6007C4364C
4718C4F14748234CF92C09C7BAEE328C4438EE0E5810CEE95692196630C80946
6DFF71E974100875FA0E2E702A5DB1DF627537F7161DA73A09AEE8AE80902B9B
5A88CCCF21A55CB96FC5C783D83353B4368D1F582B0517534A4DD4AE7AC129F0
C64747160A696373C45CDA4CAC669810557018BD899050BB884EB4C25C728462
92E543F60FE3D7C34A4893F8DDC5DFEB0582FED1D5819E5C3E839DDC16CD428F
6271331D3D4ED68C941D0F9A1C9260B8F51DFF25252A65CDB71E714D455D8CBF
BD36D310863978F6998D688DFBA93BDECC857D0EBFFF8BFCAAA08B1B8733F491
D8CEB62DE37FD5E19C8340CDE4F19288B3D43A7C107E735E2459F5C3113323FC
09362F20F481B6363822C4B0C987DAB386C9B13FC9ABB2E9415DC4E2C85BD7F9
E134B12226C150F1A6D06910BD9D6B538846641932351205AFFE92B269028430
F616870104719B9BC635EF0D8B449721CCEEE24F96DF43A8DFA183EC48CB671B
E180754B6C7DA1493DBD6F88E5CF9625E9ED9522C463BF44C7E3BCE5971E23C5
922371E9C0DE569497BBB8198EB009807C4426210A65E4D49C7720B5870131BF
27C38C2D897E2260ADD935695E17C4F4DEDC842040EAF94CF4BA21510D0D2587
3B9DC4409CBDC7F285F48712E8E61539E351613F23E810E64D322631446E4983
492E38BB431AC48BEEA5E8A40C6B7F67DEFD26575A917C9E78381138EF619AD8
B71DA44AD4FFB0D31C971B6C339E92B10C41378B048A811626E7AC217DF24CB4
9A890FB3B6009E0669221987A70CB539CB6BAC9D9F64ABAFCB69898E3B8814BB
10FACF680E360364C763099933DED33ACF9BE1D74BD6AC492A64951B61206C2F
A853C74CCE6B72E422BAF74436BB74DA1438C36E34527CF8EF35E0B112A7362C
5E81BF78DA7EB7F59A40C1B4681B061371500AC7C82EE1FE5CD1124B24432C35
A427A797BCC94B6EFA20A50117474CAF882A81B6F70E9136351C7C911CC986C7
44C0262A722397867DF26221DE565CD629A448AF5A36BC63A6E829AA5645B959
3F2A9E3692FC0483F3EC878060648F7AA16BD905BE8EEBEBDB8DAF6BD3475AD0
364A588C5FCB5638657C88AAF5BDE70911B4EDF4614F9C6C5429552BC7659AEB
2B491FF847669C6A3FC5B939447951BB76963306DDFF3B452B70B741D99D738B
DC9444B8D744622AC5A347938BA38411ECCB0F5EBB04BB53E1D7BBD15EE853A5
DFAFABFD25487D6E7767494DD9DDAE7DAC822D7B1F3E295D737AE5457E9D44CB
A7361EB24F6A36497F55D5F95EA054B8C095AF26E9BB0BFCFE20836CBE91C9FE
97E9A339B02800D22BCAC7F87A24D97C966DCDF2E5B45C4B17124D893924BA89
586711C656C4F97CC53A3157CEB3813BAEF9736B4F5708CCBD40BAC33405EEEA
F0EF679E5545000266885D20B4857A7BC2227F95E3772163F60AB26FC896684D
0BB9BDA5975D0AAA508BF87697E08E8345764F6D7AC4736CBD162ECE03DA4E58
EB75D4E7080A7A083AB75D97F9564F223E0F1211195340BEA06DF93A31100DB0
081DCEE06796DEFCEF38581CB954594A1F9719796A9B6781C4518853D961ACBA
F7C1B35B907F5C25594D9F00C2C9FF0F31A188B17553198AF41C6D4A5B791184
9539C9CF93176FA39331DDE53C4B56AF7D5ED91D244386844FA4FB54B79753E7
170BC543BCB734F5528A13979E564E7178499FB5F3583FD65FCF751CF72DC603
F1534FB37DD1AE9CA5F130DF83CB8DE6FA61E63142CC9D5DB01B3CAC111A53CA
9077655DC7D7D554BFD93CD8E4E1F6DDAD37B351D52F34F7043B31D75F622DE1
55FA8C988F48BEE08EDEF455FF25F5E0A525794E90376635CD7B27AB23E44EE9
D809F919A8D5D665032F5FE879AA3F43CF0FD13C9839BDB5BB2975CFFEFEB1FC
BF8C8B79AD1E2CC48F55C139FF3A8FB31DA85DD65F295CC7B3E13B832558F6E6
C7EBF32F4FB5EDC86B2ED79C909B899C353625F3FC767402657798E265502519
8486EDA6FA7A48C50C545EE9C1CB6BDF59CA534DA6343010FAACE99694695DCA
29A905BE75E13AC93000AAFB9A3C0D44BC3961E4D75CFB9BADEB11D0C94C95B3
1862AC7D147BEFBD6BD0998BCACA4D451F53C6057D5739CE260741A2253B53B7
C179EA64F790241574644E00435F23C6F53E187FC88FFD03F4C247ABF69CE274
B05DAA2E572FF4D023B8C237471E05B27E2031A91BBE614E29E7FB95E0F728EC
62B65AA686E397A7CC2CC26D4711E6CAAF0BFDBC406651E41D62E33BEC90F83B
255B518423ED13185B45025BF7465739643AA74FD18F4B1AD855D77FA83D224C
07E3BF18461289D8D51DD3E02E49FE081ABD768EF935556A89B46651B24A01FC
90F6A1CD2AECC8516ECA10007DDA9CD5A6C1AB78F193B6C2DDA5F1E3953633FD
D6EFB808AF186A8AB69819C175E23A61F051BF759F60E5E7377257B29FC2F3B9
73533F15285CF312E3D9B59BB4BECAA0EE5C4A89EF952426FDB5365315F34EEF
0524FC20D5F658C52E868A38BAA867FFC116DFCDD02BE5C704D134DB0790D33F
33AD63254FB54223FB59EB8BB1A68A19F3B01BD31D531FFA54E19E90C777CECE
59B1355EE63AA507C074383D0984D113F0EE172428DF90445D20A92614865076
B75F418135ACF8B08CE8CA1142EACF666A51CFFAB42EA60955EB540E99E69653
514EFC0F801E64FEFE5C35AD60FB9BE8225B851EE8E15961A2D0EF532B023678
7DBF8DBD95F67ECD5E7966EA6FCBFA1D8662EB13DC1D6CB46C9996B0CF69E374
10A70311FBC4E5A8E5130504AFDB41384CD0321E6B0253AD033F831138ADE357
5B521521ED9BB439AB63594F0EDF8F2A2F323C253C4740E7C85D7F5ECBDCB566
1BA44AB7B993721DF5824B8E6D34793106B67C033AE1C1E10C82444A8F699BBC
A11A1C8B57653E2EED5B3FD745CDB933952D00772DF7682D553118E4870E84CD
984B974D70D0B07DAF3AC3DECABADF94E6A9D01B97569EECDBDE42B0AFEDFCE2
DAF90A45DF0A634C3356EB0A240E8109C06BA4B807914713CA22EBC5EB7D6E91
EB30B47032F904D1AB9C7DAA74EAD45C7E46A0D26E76ADDEB66D5AE432EFD183
79787353CF0BCDFE4CAA4BD85417D74825FDEEA708D30B3129B418784C59829A
6C05E1C582F1B494C39E0FCA88CE85CCC35E29097E625002EC577E58CB46EB32
BFBBCA0CADA4336DD78C26ABD7DA3500D5AF02EB86701F9716A13B303EDE3A4F
5EC7089870C5EFFE55A91E9E48371588C1C92631CFF2E5BF9871FCA4769EC603
C732CE00E62D781D26BB3F93702AADA465F9555C64AA2AB9585D5D1DF3EF7299
799A6AFE5AE9EBC53234BF41EC2C93AB4D3F0710BFEAA5395DEF97AF80BA586D
D56186361D8161AE78A0A8FD6CDD407ED1B1CD67B51DBB59E29E390381E7EA20
F1BC6A68662822E4BB7D255CCC661F0A95B57702CC34CF7EF3445B8AF8818EDB
73C4F2E9ACA4BAABEC593A54D5E91635109EF19FB96DDFC357AE40BF18F8A4C0
8C0A5C1C815976F5DB98ED98F9E041DCFA30A8BA38F041DBFC5B96CBD14043AE
CE1DC61614FFFB7F647530B7FF361CD95D7F102EB361F69BCD8BD005CE5398F5
A13B22A278449C821027ED4E6E382A03807D75516608E886FACDEF151C6C2F91
96C552B7323951DB1132C77F230131D75D516EE97F509092675221F4A80A2FAF
471C2286C87E943484E705EE203AA44DEB8DA4B9751E4D87F7C7AD6A8E9F4E17
E11545541EA7483D4C637D0C1341A4A3C7CB6E76635CF134830BEAB1E47CBECF
452D2F0E8F96D004E1146FEBE1777BFE924F4205B70138CEE68277106EDEF321
E146ED6A92627D893221B7F92843CCF6B5250A4AF835590447C7FADE004DAC1A
E37407E26C303B8EE8C9598924CF9E8DDA2BB5AF3E6751B7ED07CBE414254DC5
979F32A2631B5531E1F615EB1333DF17648A38871F0FA21362D16E2961AA2385
A789F085C2551AA54191E5D5F21533BD0920443F330A339D5EE17366045D66D8
DB6819954B1DC8536410E53650B1E160AEE1EB5B058E309507C54A31346A7335
BA1EF57681AE664355282A4E83C17FFE325760330646414FBA09BBCCF448EFDF
EA80C1C0E50016A2750D039BDB88976EB7237283D049459A4673C16611EFDD11
885478D08712A93D24F2AF748923B82D12B92D72976916D05E1AB7B3EF678283
2878FB6868D5CA006DBEEDC962B8024E4A4D3083FBFFF7967D5D7FA2F644E316
98A5ABCC807162F1D5B39C12EFDC5D25D81B7E037645E67E4E3C16C933A7E776
2DDC55E39B6B2C0EBB6BA293FC37DEC05BD0881D86C76F89E67BEB692DDC34FD
F1F8050A601D6592CEB682F387407B849F9210159A58E2253C40CB33C87271F8
FCD332D0BCF1EB1767584872521FE7549D06812509AD1AC8540AEAF598A84FF8
CD2D18D52BA1B1BBCD1EF8998F33EEF62A7B3B2C168A2E9D2AAA19E7A86D826B
BBC7C88E1772195A4B4A99DD44CB03DA1D06B6C946986D8A4FBDF4B2937F3FD6
6C3B3BFF07771A50A687C098515DBB2FD3E61A5A7BE14CF8B7F79ED982CC6930
841EFE22BD0B535E73C65ABA53518D472CAF6D828CCE483588347640CBFAD77D
D96029573E1B6090F029F765B4C730458EB6766CC46AA2057040AEF4DC397AAA
6A4F8D734D7F3793E1AF6E26916A8D38D692949537064BC9B039D51E4D4BD480
F26E565144F12ACCB2078D18118CCBEB25A29475B00927E8FE5AB621AB111CC6
B90B8C3FAB60E87F2DD94A378F09A671594B58B4D6624F289EAA67EFD8F7F0DF
CBE073A14516A131570DD073A74E522CF49ECF27405134D96D626E74FE3C94CD
8BC5A3848141397F879C3977BE55F731CD000D6F411CBA8AEBF7C2D402FA5DC4
EEEE391F361A8A292BF825688048EF21D4C14701CBBAE3A72055A27E8D32E4C7
BBCBFBD691B6E979F7B5612A8DC960F7622FC813B36F1E2D742EB62C53BB6622
97642B140E84BDC7C1174A5F8E7356F2158380B643B60D1B30775EEBB182E482
E7DB0AD43E4839B0300CB7533E08D244FE34F393A06E9B5C520FBAAE13F48B07
EC8370CDA6E140D99F78BCE13ED91E5DFD6F2B15B962A7BCF23D157C4A35E3F6
50D5BDA0BDB5D7F202231D3E7D50CE82B43F973789C5C1E5E4FD5B1ED47BDFF8
E67FF5D45EA2EDE672DE956ADE0E9C7884EAE52C8FC1F1DE202F79B5DAD5C8BB
52800843FD67CA277BA8CD2EEA89F16741CBC7AB67872487CED95115CEF0F738
7D280F463071C53346076997AFB041178A81E42D325AA3CBF4050B8B4AA7F786
55C1CB601D39B89A5085C63531403A3687B94E219B694B1FA9BD3E745AE2CD08
FEDC9E25BC8163C9AD8DE62658B574BCB5E42AE833A8A9384AB52BFC3DA1DBEF
538E8E7B2850A7097CCE0E1A8609A8B31EBEE636910AABB2C99F749D786BD321
1631AE150B9A3EA8F84A49C2195148653C44245A0C50E07B4122DC7989017981
EA1FDF93327650D197D6B758BF1A974410C027365028C9968357D0E55E3FC196
C90244C3D2E632BE02BADAC9DFFE7FB2F9A6C5A285C095DC9FD14121067C3A4E
A48A028433FD1EBFE6F7AF40920113C3A52ADE1248A541ACDCAEE512D8DF90BC
D374A70C08C41403DA9604333879EAEE036477E3682DD683DF3961CF183A2DC2
EC345F0E35621D09318ED007977F49033D3AEBBC5230F2049820919807635257
1D46772F79F5A7A761F67C6ADA3E9176CAEA0079D0935919B0632D4845C5AC9C
D371A3264D5CF1DF7D2DE3408496A09379B78E364BA57AE0EFA64C09B8B8B2E4
137FB6BD29121B6E51BA7943F0DF8ED21506E259F18F960F20C483D2A75C60B6
17221F0DF283BE1178D60A2FC965C8E5F4186D0F4DB5F7A6182C1F7F61B6C6D4
C07FD47EFD40A38C92B88B0D0812639CE580CC6C1B2EB7BE8688ABA96276CC12
385E1F0A293CB194E4E73787543EAC69C74355BCAAB1B50C35D1206FE4D44577
87A5B7226A42989CE098F3272140729DD891C01DF5B78CA8EE8090B7743E1D94
4854C12419A19C3BB49B897C45CCDF4A355A98E9739AD3A1AC3BC31A17CF59AA
07EE23FF43582BF6B44F18412CD45122167AAABD1E5BA15422A103B41F465AA5
D63D1A24A781D0925AB5300A11B5BCFC93888429735EE99B6024132686418E3A
2FB57F7D50EDF1F131CCAA8A410ED9FB59DAE22A4EE2C48DE9E890F0BEFFB7FA
C5EF52B63C152D6273F5D76ADCCF2DB642A368C8F5A01DAFC56F5F556D801493
380D9091960B725C001BF9099EB25EC8C074C7C1265777C462BBA860F3E51565
8EA01357A515AABDDF55745091D43137E7AEA27E6EA41937133B6C59F3DFC370
199BA2B79B31E76A552A1741D37541E06A09D88C70D6DEC1204ED80CCFF302A2
93E85E30609F4C45A58B65AEB3993FBF01648424ED455E1B79D52BE3E76F6C3A
0D87377E0929E47CE1126478180CF998709F4AA8882BD0F534ECF30CE1122AED
EBBF2A1E8C32A0292C1693ADB08A4D03B6EBBF6726522F4291AD04AC07B84FB2
F5A8087E16E2C8226F3DBBA8719AD4CA300D55C397081439B99CF9EA579202F8
7438BB35764507DAECF712830ECDB1ED309C125C5CCC3F2B9525C3730C5E1DA3
B65F82F2F7D262E448E1384B7828C5FB463D1211FE0F1B48BBCA4ED20D4999E9
A97E966829289A68D8CCA315AEFBD7458CED46FAFA1CCE12AC2CD2767DBBBB1A
61840F59FCEBF260D542962B1FD6DE2732D4247D7594989ECCD0FA7BA3964F9C
BD4DAE93111DC4D7B713437BF0ECFCFB8D4037564CB9364066FB680BF1A3D493
B417592F479D8DB1EBD7CDB53C30AD1CCB13F3EF9E15E3070AB27FA9DE2A348C
2D0B8628788CEC16EC0908BD618D526F8E7E136B906AB7328115368DB7A93943
D5488260F83B03F7CAD378D1CAA3F839A2E89CDA9A4996FA35D620C1653ABF10
BF8B73296214880723C78102FD6DA453744170A834D9149D4B0B8A143CFEDAD2
8BF9B51D03B884D30BE5217E57E5EE588719AF0824192FB99217C969909C8BC9
4453FAD67EEA74B97D4AF3D2AB01D29BC16656A38CA369B065C03A0108EA9335
1E26E05E229F1529DB734807622412B5AE698FBADB95337D3631EC4D885CA538
35CAE1E21520F883DF083E5A514C22B4BE3A639A130F6CD1FD2AA19C9F1CED3C
E5CC88DB39C56B84A306BC474B9B02DABC6D0C44CB0BCAC899AAA1564C87C9D5
252A4B6A88A14FF5F4D3EDFB743B4E77DE52EC3054E020E5AD538896FD0FC941
95598A514CCACF7F020E217C5D9E6DB043B552DED3C662C1644C6FF3B77BA894
544FDD12F609ED2F5878FC3AEE4FEE83AB979A0E826EF176119B355F164B0150
ACA14FEBBE4D28164070E6B18516FD32E16CCBD52EEE4310C76EC8C374ACB340
E6DF898E7040A7E021FC49DD64E144F430030BCE10EAAD400894B300BE39E5A8
439E8E633D54E29DB0E8658C3257CD02C0FC3A5A440F51912189AD2AD092F697
BD1D1CA5E5FD2CE0C39249CFE27CAF5B7AB5D4D7AE49BAABD23F4404DD72E049
F168911D4789A85194DB5EED83149703256589B0A4ABB1522A2D90C739D2BA13
2D5F117EECCC661BBF597447163AF1EE3968D7078BD4352CF6EF5F6A7B797234
B221C7281B3B22E7B42BDA68686FE16786F802F0C264C1CF82079B9E55FFBE54
499BDA32ABA87A56AE57DB902B6067330FD8BBD4E495F08899078AB2CA1569A0
30E6BAA66965655072293695FC59584F9040C1F501C39C0AAC9EA94CB38D614B
2CBCA03F62D0C5A3CB4F111DAB6F1A8432352C0E1495763EB2F67B39E5D2D884
C10578EA726E07002BD0741579442BEC0836A544E31267D3293BF0652D987656
007FFF8F05607CB0178689A384319AA5FF049DCE73525DCD06FD518ECBFCA302
FE5A4BAE1B860AF6A0FBC7123397AEB322D61F15468942C17543C9F9EF390B84
C092FCED1422415CA44C1E84515D38883D3A4B4A231C7A4D8173AB1D82CC2447
15B7D50DE63E508FF8C49B8AD5E2D7D55635A5CB78425550B85FEB33B3595564
FBD5AE5B9D3A22FD0701488315A3DE6C8E44A8F7B133F38736EB44ACB2AC9709
A4AE2E91CB24E7A129222B04E9107368DF6FB6A53413C3EF691717D407431A1A
E6B102E6D3B66498C099F697291AD1A77AC522B1CA497F7ED69389F00F0B149D
6D0BC3E20A1CAA7121AFFA04A89CBD4FD5B866B792050A29B41B9C95D2489E82
F1692DF5641E9C371397A40ABD686457D69C191B723A648DE74004DE965EAED8
86488DDC464B9E0070C23691799DF28FF0951C4591132083C1046A4C094D7119
8385F15D2474119CE58077C747FC640870B549D1BB0111EADA76726E12C3E4F2
DE6C0C05134182030E2FD78D062602B5E33613ECC0D3CC2CCE41AB02CBA0CB2E
18C22DF9969D62EA2989FD71F5898F1A98032145E6AC3195FFD6C944574BFF33
D23A0930F272793A262656BE08483B9078C5E8B7B5C07B5F6CB48635808492E0
8AFE4E8609029ED76DBBAADB87E07F145B79418B829801C31C4C42A3EAF3E5E5
9ACE218D14A74E06AC4BEC6C760AAE400A9F39D6F94FDED9795981A7639C02D8
4B33B69448F6A9563A0564CD1F7055437B8DB33CF140DC88C3B4861070AF5E94
8BFE69C9FACD9D9C18D2234FAA1651AFEF31DE873201EA5C862601318D861DC5
33EAFA34ED292F43FA777BB6BDEB55CA800F50AEF38483AEBE9D97291D5226BC
05861EE3E5021BEFDCBA01F3ADA6DC07AC1367095AD11A0A8755CD518365C384
25C2353919816F59E47BF698D16AB95E22D119E2E4A8DF7D49DDEF60F435FE61
7F1AEF355E0E1949F5D2E5BB7C88AF9EF3C2825188AE59B300915FD301C2DB3C
590B716A5E17713C071B0799BB9529C74B198167F8514C9666B1960A5943D27B
694B524ACE4B20480BD520EDABB066686F036DC33890AFF57274C2153E9C03F1
FC3F537C40F3994C52F6B9B38F092DE1CF5A970377D306F0F062F92E5CBCC0CC
402AC1350173E2A05471D5C4F2DD07C240F72A5A07AADFB1AD55B449186FE5C0
B060F60720BC7FE9910C92D296C7FE6EAE644DD0370E1B81BF640676E929BBCF
77F1F726F7379703
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (ficheExoPS_cor.dvi)
@start /Fa 135[39 17[24 102[{ TeXBase1Encoding ReEncodeFont }2
76.3802 /Utopia-Italic rf /Fc 57[55 33[49 55 1[55 105[0
0 20[76 33[{}7 76.3802 /Fourier-Math-Symbols rf /Fd 24[38
81[35 37[45 49 10[38 46 42 26[45 11[21 4[43 43 43 43
43 2[21 46[{ TeXBase1Encoding ReEncodeFont }15 76.3802
/Utopia-Bold rf /Fe 22[98 118[74 1[116 110 2[53 2[55
1[99 1[98 3[99 16[114 1[148 9[148 130 123 66[{
 TeXBase1Encoding ReEncodeFont }14 190.034 /Utopia-Regular
rf /Ff 6[46 15[39 39 38 6[40 102[39 2[38 46 26 33 30
45 46 44 47 70 21 2[22 46 40 24 39 46 38 46 40 11[60
1[41 2[46 58 60 72 43 2[27 2[44 46 60 52 1[49 6[20 40
40 40 40 40 40 40 40 40 40 35 20 1[20 2[27 27 21 39[{
 TeXBase1Encoding ReEncodeFont }56 76.3802 /Utopia-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 -354 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 -354 a 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1330 a
SDict begin H.S end
 -136 -1330 a -136 -1330
a
SDict begin H.R end
 -136 -1330 a -136 -1330 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136 -1330 a Black 0 TeXcolorgray
Black 0 TeXcolorgray -128 -718 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -718 a -128 -718
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -718 a -128 -718 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -718 a -128 -718 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128
-718 a -128 -718 a
SDict begin [/Count -0/Dest (section.0.1) cvn/Title (Pr\351parer le DNB)
/OUT pdfmark end
 -128 -718 a -128 -718 a
SDict begin [/Count -0/Dest (section.0.2) cvn/Title (Corrig\351) /OUT
pdfmark end
 -128 -718
a -128 -718 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -718 a -128 -718 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -718 a -128
-718 a
SDict begin H.S end
 -128 -718 a -128 -718 a
SDict begin 12 H.A end
 -128 -718 a -128 -718
a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -718 a -128 -85 a

 -128 -85 a -128 -85 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 -85
a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 334.05025 67.83875 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 4.25198 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 494.3686 68.15623 curveto

 496.71695 68.15623 498.62059 66.25258 498.62059 63.90425 curveto

 498.62059 4.25198 lineto

 498.62059 1.90364 496.71695 0.0 494.3686 0.0 curveto

 332.41245 0.0 166.20811 0.0 4.25198 0.0 curveto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 closepath

 pgffill

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 4.25198 moveto

 0.0 63.90425 lineto

 0.0 66.25258 1.90364 68.15623 4.25198 68.15623 curveto

 494.36862 68.15623 lineto

 496.71696 68.15623 498.6206 66.25258 498.6206 63.90425 curveto

 498.6206 4.25198 lineto

 498.6206 1.90364 496.71696 0.0 494.36862 0.0 curveto

 4.25198 0.0 lineto

 1.90364 0.0 0.0 1.90364 0.0 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 4.25198 moveto

 1.41731 63.90425 lineto

 1.41731 65.4698 2.68643 66.7389 4.25198 66.7389 curveto

 494.36862 66.7389 lineto

 495.93417 66.7389 497.2033 65.4698 497.2033 63.90425 curveto

 497.2033 4.25198 lineto

 497.2033 2.68643 495.93417 1.41731 494.36862 1.41731 curveto

 4.25198 1.41731 lineto

 2.68643 1.41731 1.41731 2.68643 1.41731 4.25198 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 59.6522 ] concat

 pgfs



-128 -85 a

 -128 -85 a -128 -85 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 78.92885 8.18654 ] concat

 pgfs



 0 setgray
 -128 -85 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 78.92885 8.18654 ] concat

 pgfs



 0 setgray
 -128 -85
a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 154.59785 16.3731 lineto

 156.39824 16.3731 157.8577 14.91362 157.8577 13.11324 curveto

 157.8577 3.25984 lineto

 157.8577 1.45946 156.39824 0.0 154.59785 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 154.59785 15.23923 lineto

 155.77202 15.23923 156.72385 14.2874 156.72385 13.11324 curveto

 156.72385 3.25984 lineto

 156.72385 2.08568 155.77202 1.13385 154.59785 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0.62 0.12 0.39 TeXcolorrgb
-110 -85 a Ff(S\351ance)18 b(1.)91 b(N)n(otions)17 b(de)h(fonction.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -128 -85
a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 -85 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 27.9544 ] concat

 pgfs


 0 TeXcolorgray -128 -278 a
SDict begin H.S end
 -128 -278 a -128
-278 a
SDict begin 12 H.A end
 -128 -278 a -128 -278 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.1) cvn /DEST pdfmark
end
 -128 -278 a 0.62 0.12 0.39
TeXcolorrgb 0.62 0.12 0.39 TeXcolorrgb 0.62 0.12 0.39
TeXcolorrgb 269 x Fe(P)n(r\351par)l(er)42 b(le)h(DNB)p
0 TeXcolorgray 0 TeXcolorgray -128 -85 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 35 a
SDict begin H.S end
 -128
35 a -128 35 a
SDict begin 12 H.A end
 -128 35 a -128 35 a
SDict begin [/View [/XYZ H.V]/Dest (section.0.2) cvn /DEST pdfmark
end
 -128 35 a 0.62 0.12 0.39
TeXcolorrgb 0.62 0.12 0.39 TeXcolorrgb 0.62 0.12 0.39
TeXcolorrgb 343 x Fe(C)n(orr)q(ig\351)p 0 TeXcolorgray
-128 533 a
SDict begin H.S end
 -128 533 a -128 533 a
SDict begin 12 H.A end
 -128 533 a -128 533
a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 533 a 0 TeXcolorgray -26 663 a Fd(1.)p 0 TeXcolorgray
90 607 a Ff(18)p 90 644 82 5 v 90 720 a(15)195 663 y
Fc(\306)294 607 y Fa(x)p 274 644 V 274 720 a Ff(60)365
663 y(.)18 b(S)o(a)f(fr\351quence)h(car)o(diaque)f(est)h(donc)1545
607 y(18)10 b Fc(\243)g Ff(60)p 1545 644 238 5 v 1623
720 a(15)1807 663 y Fc(\306)k Ff(72)k(pulsations)i(par)d(minute)o(.)80
800 y(Ou)g(en)h(supposant)h(les)f(pulsations)i(r\351guli\350r)o(es)e
(sur)f(60)i(secondes)f(:)80 915 y(18)g(en)g(15)g(\(s\))f(donnent)h(36)g
(en)g(30)g(\(s\))f(et)h(72)g(en)g(60)g(\(s\).)-128 939
y
SDict begin H.S end
 -128 939 a -128 939 a
SDict begin 12 H.A end
 -128 939 a -128 939 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 939
a 0 TeXcolorgray -26 1069 a Fd(2.)p 0 TeXcolorgray 42
w Ff(Il)f(y)g(a)282 1013 y(60)p 268 1050 110 5 v 268
1126 a(0,)8 b(8)401 1069 y Fc(\306)480 1013 y Ff(600)p
480 1050 122 5 v 521 1126 a(8)626 1069 y Fc(\306)705
1013 y Ff(8)i Fc(\243)g Ff(75)p 705 1050 197 5 v 725
1126 a(8)g Fc(\243)g Ff(1)926 1069 y Fc(\306)k Ff(75)19
b(inter)q(valles)g(donc)e(76)h(pulsations/min.)-128 1152
y
SDict begin H.S end
 -128 1152 a -128 1152 a
SDict begin 12 H.A end
 -128 1152 a -128 1152 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128
1152 a -128 1152 a
SDict begin H.S end
 -128 1152 a -128 1152 a
SDict begin 12 H.A end
 -128 1152
a -128 1152 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -128 1152 a 0 TeXcolorgray -26 1231 a Fd(3.)p
0 TeXcolorgray 0 TeXcolorgray 88 w Ff(\()p Fd(a)p Ff(\))p
0 TeXcolorgray 41 w(L)-10 b('\351tendue)19 b(est)f(la)f(diff\351r)o
(ence)h(entr)o(e)g(la)f(plus)i(haute)f(et)g(la)f(plus)i(basse)e
(fr\351quence)i(:)e(E)h Fc(\306)c Ff(182)c Fc(\241)g
Ff(65)17 b Fc(\306)d Ff(117)19 b(pulsations)g(/min.)-128
1263 y
SDict begin H.S end
 -128 1263 a -128 1263 a
SDict begin 12 H.A end
 -128 1263 a -128 1263
a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 1263 a 0 TeXcolorgray 121 1360 a Ff(\()p Fd(b)p
Ff(\))p 0 TeXcolorgray 42 w(On)e(divise)h(le)g(nombr)o(e)f(total)h(de)f
(pulsation)j(par)d(la)g(fr\351quence)i(mo)n(yenne)o(,)e(d)n('o\371)273
1453 y(3)8 b(640)p 273 1490 171 5 v 297 1566 a(130)467
1509 y Fc(\306)14 b Ff(28)k(minutes)o(.)263 1647 y(L)-10
b('entr)o(ainement)20 b(a)d(dur\351)g(environ)h(28)h(minutes)o(.)-128
1662 y
SDict begin H.S end
 -128 1662 a -128 1662 a
SDict begin 12 H.A end
 -128 1662 a -128 1662
a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 1662 a -128 1662 a
SDict begin H.S end
 -128 1662 a -128 1662 a
SDict begin 12 H.A end
 -128
1662 a -128 1662 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 1662 a 0 TeXcolorgray -26 1775
a Fd(4.)p 0 TeXcolorgray 0 TeXcolorgray 88 w Ff(\()p
Fd(a)p Ff(\))p 0 TeXcolorgray 41 w(Denis)e(a)g(32)h(ans)o(,)g(donc)f
(sa)h(FCMC)g(est)26 b Fa(f)19 b Ff(\(32\))c Fc(\306)f
Ff(220)c Fc(\241)g Ff(32)17 b Fc(\306)d Ff(188)19 b(pulsations/minute)o
(.)-128 1809 y
SDict begin H.S end
 -128 1809 a -128 1809 a
SDict begin 12 H.A end
 -128 1809 a -128
1809 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -128 1809 a 0 TeXcolorgray 121 1904 a Ff(\()p
Fd(b)p Ff(\))p 0 TeXcolorgray 42 w(P)n(our)d(une)i(personne)h(de)e(15)i
(ans)o(,)f(la)f(FCMC)h(est)26 b Fa(f)19 b Ff(\(15\))c
Fc(\306)f Ff(220)c Fc(\241)g Ff(15)17 b Fc(\306)d Ff(205)19
b(pulsations/minute)o(.)263 2019 y(La)e(FCMC)h(de)f(Denis)h(est)g
(inf\351r)q(ieur)o(e)f(\340)h(la)f(FCMC)h(d)n('une)g(personne)h(de)e
(15)h(ans)o(.)-128 2050 y
SDict begin H.S end
 -128 2050 a -128 2050 a
SDict begin 12 H.A end
 -128
2050 a -128 2050 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -128 2050 a 0 TeXcolorgray 130 2147
a Ff(\()p Fd(c)p Ff(\))p 0 TeXcolorgray 41 w(D)o('apr\350s)f(les)h
(questions)h(pr\351c\351dentes)o(,)g(on)f(peut)g(\351cr)q(ir)o(e)f(:)p
0 TeXcolorgray 263 2276 a Fd(\225)p 0 TeXcolorgray 49
w Fa(f)33 b Ff(:)15 b(15)g Fc(7!)f Ff(205)p 0 TeXcolorgray
263 2405 a Fd(\225)p 0 TeXcolorgray 49 w Fa(f)33 b Ff(:)15
b(32)g Fc(7!)f Ff(188)263 2534 y(Plusieurs)k(fa\347ons)g(sont)g
(possibles)o(.)h(U)m(ne)f(seule)h(est)e(demand\351e)h(:)p
0 TeXcolorgray 263 2696 a Fd(F)l(a\347on)d(1)h(:)p 0
TeXcolorgray 625 2640 a Ff(188)p 625 2677 122 5 v 645
2753 a(32)770 2696 y Fc(6\306)849 2640 y Ff(205)p 849
2677 V 870 2753 a(15)p 0 TeXcolorgray 263 2898 a Fd(F)l(a\347on)f(2)h
(:)p 0 TeXcolorgray 625 2842 a Ff(205)p 625 2879 V 625
2955 a(188)770 2898 y Fc(6\306)849 2842 y Ff(15)p 849
2879 82 5 v 849 2955 a(32)p 0 TeXcolorgray 263 3046 a
Fd(F)l(a\347on)f(3)h(:)p 0 TeXcolorgray 42 w Ff(15)10
b Fc(\243)g Ff(188)17 b Fc(6\306)d Ff(32)c Fc(\243)g
Ff(205)263 3175 y(donc)17 b(la)g(FCMC)h(n)-6 b('est)18
b(pas)g(propor)q(tionnelle)h(\340)e(l)o('age)o(.)-128
3209 y
SDict begin H.S end
 -128 3209 a -128 3209 a
SDict begin 12 H.A end
 -128 3209 a -128 3209
a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -128 3209 a 0 TeXcolorgray -26 3304 a Fd(5.)p 0 TeXcolorgray
42 w Fc(\306)d Ff(191,)8 b(5)i Fc(\241)g Ff(0,)e(007)i
Fc(\244)g Ff(A)5 b(2)10 b Fc(\244)g Ff(A)o(2.)p 0 TeXcolorgray
3987 5856 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
