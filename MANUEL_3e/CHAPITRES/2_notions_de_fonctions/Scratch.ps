%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: Scratch.dvi
%%CreationDate: Tue Oct  6 18:35:18 2020
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Bold Utopia-Regular Fourier-Math-Letters-Italic
%%+ Utopia-Italic Fourier-Math-Symbols NimbusSanL-Bold NimbusSanL-Regu
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o Scratch.ps Scratch.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.10.06:1935
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D16E2C6BECBDFF50C5FB1D6720AF2384F0DBD21AB6E390C9325D57D1775AACD
A56B4A76920B952DAF192932BB5E3326ED43239F03A8B73FF0FE5D93569516DA
8E9C1DFD7B3D3A4C3176F7F6FA9B8EDB0E7F7F3A47AFB4F0AC5C7CF849975C13
315C3951A65D1A4750A73024B3FED34DE657F9BDBA049D054AEA5883AB816A12
0E708826E752C197FB8DFE9CD002A96BF0AD0D43A4C7880EC0BEC0A02CDCF664
C304A63322BBB47C88FBB7CAC0ABE7CEFF5C1B6B9A203EDA6F2FF5FFE4F72967
3CB52E9B41DA56E73354C27AE2CB7BCF068E5BF05D259809AB4CBD8E54BC79E9
4A589818B539338A66DA6620138BEB2D0F666C1AFA99783A4C690EA45CE592F7
8054187154EA5218BD3AF89EB00690BD41CBE548847AC42F9BED75F513A511C7
7689DE1EAE73C0712445907BDAE13D65C95A3DCD7C99D3DC79AEB9C37A0691D6
A228C81FE186A3F7EE975F7941B7E0250B5195817FBE0C431CCA3176AB14F488
14332AF14A0CC7A43C24128E9CCABB963DAA808A204830CF8A38E6F13E977E18
8C575A83EB1B1D925D32AE6CD2829494E60851B8058E98F8936F88CE48AAA932
B7891A472735116FC53BB1E720C31AE31F8C52A968F9383F51063F0B9163F629
0CBFC16050E33497DBE63B067D83108E0FC735A9A8BB5DD6ADA7A7CA16646B05
811A947FC3B69E75AC18595CAA6C23D8D1956D39096AC72270EB7F406D1CBEDC
EB6FF59FF5EF33AC0A21C2F715143C53C7834A17CA0F8BE0054AD3430F259C89
D875D49D295AE1EA875F44B01CF5B7A6F28A6A63C3AE562161091B4EB20014BE
6F87159F387A9069CF2AD8050FC9A135B9919D52D56DF58C2B84154AB1FE053C
D1BC4E240BAB92A57FEC2441894B216C36166B4C976712D7FCFFEFFE7DB36F0C
937626DFEECAF8FEDE64452000A3D2AF5A07D595B0768DAD40F1CC2557889FC0
8A35266315EBCFBBD8437DAA23C4E4EE39DE3AE8B7F5A3E0322BED2A4E3A9C42
BAFC3A4B93E2EB1C8B0CAA38BD13E4D466059C88DD4B88DBB4682C2081463250
BA0D58A8E4B1E0F6C9E10E5C11459E27271435B0BA85CB12E0B4A7B4B4FA273B
FD8F5E7B0972D177FB26D168E25ECDF79A10FE415076C16267CF8592208FBA39
7BE15BFF928E0A767E0CD131259BF2411A99405564453B8C906B79531090CE66
81FC40733FC7489A0AE275A41FBE70FFB31F73FD9C5FEFA85E7E106BAFB3EBDE
7A91E01F89E41AE813CFC3B611AA4C584BE6A9BA58DCCD0D7756ACB4718DF283
522BF3FD082C7C276A617844071CA1862056F9D6E48BA527A6BB5A78898AF066
727EC2EE226C1C1F3B65A27391F218BDBCEB92700ACAD8E57396CBC5E8145119
9B86D7D4EF16E113B410DA5D8248CA26CF6FA509AD7F79BFAB5DD4E4DEB8DE95
40581D19A90D1FC581849C040C7EE78C570A583C2F98E6F9011962355B048CED
83183E76070E83EC4AAF9B121FA612B45FB815CEE53DC0F2A475170EF7F21B9D
F720234AF00E1D1EED73B68826B1599AD236908D5DB66CFD856BBD443F55AF8D
6952E9976A1CBC07E35E48BEF6FD0693D041FFFB50ADCB4592039E8080C221F2
A6A6F60AFD877301EA1615EA54C536C5149BD8D0106A25382A28319378A514FB
185EF252AD10E16FE5C7A714897CA1F692BA0B9E9EB22D0C60BED2DD1BC98172
D7D2565B25CEC28A05E736BD6FC6E69EB67D88EE8597DDA0BDB3E27F88944AB6
09F75D8C124AD38C44B734177754CC732367AF3FFCFABE5A7881D7EED273B50B
C27AF8E7C4C376ABE0C62BFA892BB3AEA801E53D4C82C178843A38F89654C583
F64763EBAB8112D2F1DAFBFA7146C86D32E95426FD888FE66E2F9B5D2F3B260D
211888CE8101A7CAF81DBFDDD489B4A16C9842696217F7BFB68DA7DDE01BDE6B
23E3479EFE73BE1C676D2D2074B09E1248B9A96482D08216DF610DBA35BE10A0
B04D7D44D6A85227DA1EB25BCAF1600662AA1242AB6CA3667EC576E6303E404F
670FF0BE39AE8EA0CC0117C095F7B73108C947F12CDEAF40D860BE6534E44DD0
30545CBB3680CD89BFA3E8112B67C5D52DDA62AFC53FE03A45ECE9D9FF44EB6C
23A2082DD17998160D3CFFFF38E09A1337C9582217693A51AD642FCA94CA69B9
FDDD26CFF7B660B41F65798A924459D45604DADCE2FE6D5B7E64CD49837AB3BA
780EB73F3D70D739D75B5AFC814C6C480898235F31CF54ABF46DD83D1BAA71B5
AFA16C3C57DB5B39F8B1E4B0F1F95D911919104B4C2E24998E2891CECF6C514D
4E92328E6DDC7897ABE6F28E8E7ADE474B4FD7049EB6D3223E42DCFB923C5149
770C46B27AC11FCA263A395014DC92073B0FCA30A2197E0D544ADE8ED62FB7E9
F6E91D11216D2CC9C6D206DBC2057C38915C8F87F0770506D1F80555529218AD
AA02E86AB84E73C8BDCD084D83BA3323E729C6D5D4AD7A723EC103C4F516206A
1B7BB967F752543E0C5E4BBF11953E9E743074F651F4A3453C935C948F885728
01114225B827562C343868ED4C07905AAC5A0569868C1976D563BEF1659B3EB9
E30AA4B45940A947816317603FA67145B9636C76FD6BE21011D35116C17A0C0E
59D96F1CC3DFB021E8799387339382111AB8A1AE3D214AFF3496C2CD9648EC46
59466370AFBFBE31EC203B60FC7829C93CCC6AAF2F1D90204FE3908AB3F675FC
673BBD46755CAFD744E33C5D1E9CB3F8720A71D78DAC0209FBFFEC1920D75FF3
4831EDB69A6011754CF1E5057926A18BBC645A5D8C4F8A74CDA53DDDC0CA6563
B5CB8FA8994A4F96A2DD9E0C37262A7EB39DFDD73515FCECDBAC7B9D0CE1F47B
C4CC6648140CAF922E310AB1D1AA357AED93FDD870CF36728745B97F4B6387F3
A2FFC1A0D4F6CDD0C6528F5D1FC235536D4FB4DEEE7EFB1A1E77BC4E14A60CE4
EF44A718BCE67ECC50AE49B2BC85430C502B760709827CE6AB3682F3C84D4961
FB5B3ED7F34DAFF62C3764FC213C0B9C88373C7F9CE34ADDF255E79C656D0F60
69AD50C8D489BE282A9F6BE3A7E29F3FEE47CE302C71DE5E804F37050B6AB050
CB86E4C7757E95C6C050761A9A93C339A5140CA842BB0A7FEAC3394E9DC71189
2BB626457C8866FA3260EBA129D7849BB02EADCA01531FB810A9FF25D8A3A2A4
A7C4DA9560134AF22DC778B71F64D0C50AD1FC68CA9FB21CFF20F3379F85056D
F0ED391AA517D591C58552FA90B55181711AB819B07306CD836710DC3E232EFD
BAE102CE4A58456CA891D11C29E810033F9A49059E2427219B706394A12447E8
C9BD0312AE7E5C85CD96D6298B50490875A766A8D1CC297EF16AD523C06678F9
316B3D508E292DEA4D91079A0F0B5902F5ABF89B7F5EB67F527B69129F43D0E7
FC2811DB45A62293A38700327E55EA8AD158F294B19AC0ED843317EC7F36A367
8F407247F4B26E479DA8C817645EBE9ADA88EB80DE419F93B1D49BF5BEB99050
956E5AD8A5128AE2D8D5A85688257A0ACAE2A510ED79634C3E3C1CB6D013DE78
8DD70A36B6A52FE5D8521206E27F4E0680D685B6508639FC3EA69A7098A9417C
9F19BE418B41F6A9D00F5DA548025CB335C2AA1CD2897D849A1D2BAE001B0789
5F089A053F70BDD5A02406539FD83FC11C6D2C11583E4F5B7A0EB34D64F45802
13BEB59D15E1AF4CFA20F1D1689EE07DFCD1EE08BEDBED9AB15A562F78DE222F
6AEDB9911105A22078ACADC8AB6FAC7EF349CC39D39A29AC33078556CC2E739B
6485473B737B0D57E5EE9980ECDEC23217EC8C58442527FD1B11DADB2DC08CCE
CC0882B3C8624D195A086DA3B9B3315A4FCD68E100AE154BC738E6A47CB1687A
DFFB0BB105C3D897C3AB2E2DEC7EAA48461C863719C70EF2FA30838F6E008AAC
1AE2CC6DFD3D12866382CA36DD53A75D32FE863B80A6A40C5A2D1C366F678F4A
E8D9EB590A6D77AB7C00FC03767B2A55ED087DF4FBD194FC6D1802AC1A0A3B72
785A1539DFF318B9DEDB5BBB7D14F38566BF3ACF6DC8B916D3C3B969DD821155
C587442351AA9F029300C9E75A27D7A893731B17E192095AB417F783C297B193
5A3A5DDBDE5CE57978C7703191AE331D06468014DA1E2925FB6CF525A89980FF
23AE262A3AAA90301CECA641508668FBE3D77457A3FA50306352ABBC00646EFA
0A9665AF3510245860808758F60B3FB9E4AEA88E2C9D37501F4F8E7782F6F303
87986CB057D53B69AE8BEEBF60C2FD9C5DEB09C7B28EE5296FA119C19E9781EE
D331CA7DDED14C04A48E17A3CEB07ABC3270D1D797D894D4563F32399F3B20E4
E3C0B29DD4B8DDD32EFB45872A81CEC34D9BF79636053E54D81663E3BEC0954E
2101093E0F11D88D484DDECCF00A77B889EF7EBCF70F7101EB114A7542002C36
7EAAF56E7D800138FDFF4DB09BF257495B94D89B7414E3273D63ECFC9C885D51
5A11AB8455BCB293FB6731BFE725D67799711048EF6A513A78A3DDF0029DA6DA
FF83156DE7712A41670DC982C71F0EDCF8940C47EED9D88D7F586D9484EFC055
39C901B03A1732C4282A5BC0CA8482A6D3614B10CF9143F3A1A0FFF6F7795BDB
6A1224E6698290BC3FA2095C2217F9C9EF7294E83E13D06020986D091397E47B
FE7D375814997A3C3B05B6120C8087675EC95C23200FC3221F1180A64F9A7176
5827DED76AF277A4278110F6132AE6414906C8118DD50F9C8BBDC7B3E70E8959
857A5EB69F28408BF4BEF87ACE26A40B70BF2A427A048A8F6D5EEBC0EB067996
62D95A579ABE648A8D2F3ABE20C7BB1ED40B3AF090179E563FD9E7AE58282175
C083D8471591F9312EA7D1761BD80997F8A4BB936F1098AD4670CCF131D90DCF
5EA55C1221AE542F7F103D13C24934A226C909CA3C2BD454C2EDB088B45034BD
C89ACC5747C6ED4F1AA1FC2888168ED84FB32709CC507A58144B1BC87E4E9E50
9282CD129736A10B51E964B4B0B382020CCF1A9A9B369976056CCFE6981CB8B4
89B3CF6804C9066ED578ECFAE3570B5E2E37512DF726FC6C603FD6177235E9B1
BA19B961E24D16AF0158E02C931E299AD651A9C5DE687893873CE97AE2F4DB65
B51C854154BE483FB09DA826F64597929BD1F884756B979191068153A6669194
1FB3A5B2E992A8BC3EB8E383B4BA38AFF2C2A1EDF171B5975715353EBF18B980
00DA3EED3C9B17736CD9E28D95EB967AC2EA94F60FA995291CE6E759A2BBCA40
C82366A40C5371DE5D03B543C65DF4FCA617E5ADE3D0852A8251BE56725730DE
6FCF67649BB3C11F8E1406E26FDC9AC1D8623B8E0E30F8FB3A6560DB5FC2C270
F2F90F450E7B20BFA2126FDFC66E1E7AFB4C6710523E20BFB289D6071404B6A4
301C34EAC693810ECC15F7B5FC550068422C732C6BC286E21A6F332BBBD21634
7362FBBE66230DA04A36A3C24D3588E4F29B50064F509B634A40D2EB37257773
F03424F5811B53C23B4BFD002A4BC323216B79100E0FB547D1AC16F4B8695373
D5EADA826566E53AC8799E0AD5E6A03F957B7C5664D4A2C86BEED35F1EE8EA2A
06239C23A9BC94D28929F8FC8E7FC2C96FF6545DA876AEA57B8955BA7DF729A9
9B4DBC1EB7E3E2D494AA31D1347529714C5C5382E037AE6F7C9A125939BB2E5C
C464428ED2D730BFBE048CE142EC815AA8D1E02AB2E4A89B2B8ADCAACEE404C3
5FD2B917538FBDD055B9B5B76ACD2D176FD58F90DBC75FB14D833DA3C76FA67A
787A5C6C9C09CBE984EEB17411078C094BFD08EEAC158960359E31961735E4E0
555C301CEC6159418E01D390E2DC1104CB39B428F46FBD78F8A0EBCDB14737D9
7D22AFA04E2D38F1A3425B0DDDF219F90D697B636E6FE3CCF3466D467D451A5E
AAFDDE65CF0A2EDF34EA2DE6F8CD42177BB9D3460686B878B2E9E3815067B0DC
3013E9DECAB820385CA362A33801480AF65DBB1DE94641169AAB53CEACC46105
822116DA55BCC9E997B92063EB4E957EC059AB78D2079C52E1B52E0D7920BEE4
A0333AE20C8CB226F1BF9CDB177CF58DD1B493838FE10BC502424F7EAB83B057
EECB833823DF9FF355914F445BBD41CBE10E0EA6C16A18A4CDA8F4C7F5399762
D1BCABA8689139753E4954FF9723100BB6EA08A261F936DF67226E73CA9E10E8
AB361836035263A7148CF1BC5C18909002301CFE881C8872C6A47F50054928B9
490E99D75F55E0427DEA42C15D9A0F581874A117F879CD7E81F552B607882868
6A3D5D3418287C6E4392ACDC4D4049A6FC4E467AA8D5E500653F2E4484D88CEF
72E5949236930F1667D08C1F3D9BD115E94D8312630431C286C900AD2A6C54A0
D113A9D932FEA8A790C22A1BB6599DDE33C4459E224415AE3DFC1D7F5B9FABFB
3165C98E4FCB3F4BD38E544B95E6E6B2935B26BDA68A183E58E8D956A58FACB0
42CDEC3AE71C90564DD18F96E8AEE39BB020176E5B7F804FEBD03132F9076EF1
B7856738005BD0601F2EF1232FA8827ABE229B9B701C20E811C1D3A3516AA1F0
D4BF40F78F9F90BEB42D93A8B6B7EF09AD1705F4517B22E4FAFEB7AF69FB88D7
A56D82E14BA262D3FCF7F76BDC9B4215EB14C7DDCEC1B3C150D6AAC22DB19C82
36E2A6FA8745C2B3700B3B3780CDA2467157406A66627E42F2B701DFB6C4E8A0
BD65C68DD57FACE84B1D79C4C79A9FA526083C6256300F76B13BB85666BCDFB7
39C4088A25F563224DA5E87ACE7EE18C80858DE78F572F92BEA924EEDC4F3596
8EC586D04B0D2D309C2136142D77A1742CC8710E6F425228571CCCE51804B1C5
EC90FEE3084917788B57C3355117C7F09BA2F1D793153E99C4B4CBF49BD6526B
9DFABB57935CFE2A950EF2F36050AC72D8FC0CCF161E4C43B1114F728A9FBA35
4F49ECF6856F1D10C8EE6EC7BC9E47218A26BD13E6A5D5E64C73321407ED2E38
544C5DEA4E0A3682213C70F8FAB2BE7A539492EE40341740B3105649C25804C3
8478DFE1E9414264C0699F4402827802AD75862EDB989744D2FE1385D456D32D
F79C9F35EEEBEE4AB64AA66E7C49D42EBDD432F337C914841239F91DDA2EC873
CC2BE61F9C67869C3B8A7673EE31356B237A6BF0906A6DCD1D9BD9AE3FB3C4D8
179D278A7508CBC96D16DDAC44169AF8184B690589537F6AD5B524ADD7FF8D99
18F18BE4396C900943C67E1B2EA13306AF1D0AE60BC2A11C2149FCE3D6B777B1
2039B62B32BBD38D1BE70FF301194F49D8159F5DFD287BC2FC539D3C5601350E
23DC7F4F675EE7550DFD381AD2C68CBB25636F48E6960FB513964059986BACC9
B7042225B17B721A74C86F25B2B4776EA9007222B9887DDF3631BCAF6B0CC30C
2928561E400C2A48D625373F9D887A4B248E284059E27ACAAF2E54ACC671CC6F
C4EBEFAA40A1A1D875DC24F883C87409C7881D0BEC99825DEF72043D7F6E4565
F7CECB006C4A6A447461A93AD97F0D06D901AC9A152552F2DAAF0DBFE326AE49
10377237F2AC4208C2482497A1873D99F0889FCB66172CAB42A1E756944A17AE
59AF2758E7C641F36355C6230593D4291CEA6F60B7201065B4595871B573BAC9
3A9F5DE4D946688F64FF657DDE1EE29A0772B8C8AE429BA45D1FEAAA8C7DC84C
3405BB3C62AC87ECDA3104D18B2EBAE2D57F1BD408D6DE27B03FFBE901D6C57B
4B7E109C2C116255DB5DBC24E66539D5F2453F2AC26F6C258BFC37A19EBE2D5C
97369DAEFF0E9A20125F6C864ED07DC1A3AF5F00102293C9B77B272D4B16EDDC
695AAE4759E64B9E0B0C4EDE1E7B309C58FA023E07838B04650B8BE4051FAC59
6136DF1CE7056AFD574324F64A90BE5A1931CF98D22DC5F1CCF75F98FEF6768E
AA1456FC9B06767DFDF08E42C6173900244784956E3C97B425D776D3D0C1AE8C
30BA0AFF426917D4A991052389E70B353DDB0209BF0DB7837FBFA15A6CDDB7D0
0C4603AE9A1F9F2A07AF6A0D23510033E40B0D4E4844EE27A1C04D2B8F47B36E
D8EFE887ADF543EFA94B5C4EDD159130700BB2F21F146C1958E3393A8D78A7BA
31F531E9FB721D1C356BBE3222D4D1853C668D3D493F7889E756E9B412A72E13
655C8F5CF3CD6A06B7A32A8770859B94B170F4583A16AA31CB02A66A36532155
C8B903482C34769E573DC629B1DDC31C6F2FCDBFE4589D02E985B695C3D54C4E
EFD5C1CFE9A01A477E2B07ECC32D816AEADC244A76684DE4449A91166245A8E5
3DD210DDD1FF5611A9576EC3357FF2C31F7B288A0A2E5C866D0B99FAAA47AFAB
F590FA7701213B33DC79A6B4BBECC58D564A2A4934F70FFB25F89289DD0D5AFC
DB99B6B8F9521BCD121D0846E118962E37C31B755EA31D1461AF304CD78E8C7A
6156A34D04D3AE96EF148ECA56FA55F2F55F42C1C6F2BAE1BEBB1A3B0DD10F0D
D08177C0B3EE56DBF08B01DF39091967F5AFB835956421DFDDA2C27C16CA679A
01C1463ADEB68BCF78F9C83DD6B9D978B5F3C1F246DE038090D3C47F79619980
3B784718A1ECB7B0F7BED0C351CEA2C99C9E9CA803D42C8210D86E44AA19E1B9
3D58BA2451A7236971750BC5667F7DC3EC307E790FE954090A76AE5DC6AD5048
BF1471FEFF847DABEBE46E2EA135A725568E617F5B5F8C749F934DABC5E1C5AE
3FF91FB9DC32001FC8FEEECC0742DD25FD02965BB82B1C954844DB4262D5A525
0BC70600749A633919E33B83B735D87EF3CB1899D4AF5A3248901B5B2CB3B72D
676B27C4298420C5F304353902D6EE4F6795D6500AA3AF2F94DFB9DDC8DB9173
7E638AC4328C148AED04F275D11159C16EBC908DBA7DC04CD87763884429A34B
AA80F4EFE77099A55497757C962E61ABAA737E827BE61296022A0CFE6EB5CB60
B30A8E26636C8B6DD32395170F671C0AD1E9C994BFC4888C2E8B0CCA2A0E4D7F
4C4CDF432A0FA96BDABC6697605B8C791035B48F9EBF88EA65E5C134E77ED72C
DE4AAC717FAC692CFC297A0C390687B8CAE372D82819330B4DA50522033404BB
1534A5E4CCEECD4BF53A9AA53A81C12D2733C2962F92F524CEE50E974C892564
D5760F5CF3B47F7BA0806732CD2E47A4341F04D946B0C4DEB266B3B0DB9D7D33
EC48F7A556DB0B64C7CD05101A15EBF533A5AB14A41206C33539EE6135F0ADF4
F972AF08A8A814A557911A3715E1AC665A358233C65BC3C0661F12179C959B69
948674C8F8D0361EB39FAD501BD14CD3924CBBFE7E88CDC41F2671FB95EE2E64
B77FCCD29FBB5E7743AE01A5A00E8019EB0D87B8C3C15EF6FC36331CE09588B4
3F81B38ADEA2BACDEA7C8D88CB5EE42EA782C30EEF5C57B1F442969B8D3314C8
9699B055A0E01EF88A320C8F34A8017C168AC3EEE6C213CA06EAD9BA13CCFE11
CD425657CFD5AF555DD34CBE7FA03A91317373C9B8D6550943150A365C9DB10D
9E73D8D2F4D3A89A0681EEF4C053B5D2C0B6E9BCB1DAFA7AC600BC9F62BDF9A5
3769C0270B9C8C37B9DB652B8778253F8022B1EE4004E4F857643A98872F1E44
731E51FA640EEB1DFBE8CEAEFA648EF0DC4A920A48FA9399449624CB8446DF8B
D64858E915C6819D7193A074A75CD889D8F47774DE3E4CE08AEE3F7C9FD4AA40
A752EF7D1D847A8B1873E0B3EC2912DAF93F55D086CFEE08A70839F43B350C40
7318D16C378C2C244650686C152EA1F6F8477876D1B9FE2AC37CBEBAC170EF57
7F4ABDDDF6362FB9D1C95860441BF9D344C768658F7E81861F2C00B264C31E8F
A3F159ED20479F58BA85B66A9B1D142003A06F743053EA73D284A40AD7158BE2
F7C3CDC6582740E49F08841F2D45C0AD1FC4CF78D5C5F11473215135E2C61AC1
C6480A7AA562D68CAD72846FB534E0B2B745E35C5C4214EEB6348C9B52076393
9A4B691CCE4CFADDACC8F7F08AF8CB77C865BF24C35C73E1A703425C59E980CB
0D4DC15F48F3FA3361CC952A84A8146F8BA0E0123F16C622F079714E50E50B57
0A60B8EDA798DF7129CCDDFD1F3B8A264455D81D673EA577A8B4C0F7F5E7B27E
D27072526295892F8AB227880D9B3AB90A149DF558C9911C1F8C48412C92995F
EA4250A8F2D0FB4DED1DA35D2CE8D2364B2732D8520EC2FE385C10FBC407C84F
1E2B7BEE5EF03D49BFC1C631432555BE92FA732C51B29E4A7793BF69754A6783
AC46C57F9A354A8C3592849CBFE02D3C67853243F2D71B98FF288722448EE282
364E181F9FD6A9F260AD98D4DF22C11176859E3F872FCC3E3E347BD0A4026A34
B14FDF9D1F7398E21C5A8A4BBC5A543C40388191BB401BE8BD1E25370499A0EF
573C830AB4077174153A5D789EBA10A7732C5F3F8CECE67C90361D05DDFBD13A
9E837B55DDE51855CDB0B034E4A58FBBB8E6C2188459A69F27A34AD3D8D654DA
10558EBAECDE5B4E0BF27E7A19013C9A655201F7E1CF29637A063697F14C1AB3
BB30E515C97165D69DB15601F9B321F78998ACB9694D348663ED584C48FE28E1
B550612BBC42A09D6FDEE64ABE747AB71859FE418E0581FBE6764DB3F2EF19C0
B70758979EFAB07C086018C1FAC4127FF228B69E1D5FBDF56B6719D2C7E88CAC
8F3E3EAE3DFF86A47B10FE73860F61123B8530374FCCA212E92838007EF744EE
23FEC87D98092CD9C5FA1DD425067FF8FCA8921B0BF491873D92BA5A04E7C775
B6A2FD005EEB9C6336F2FFF46556D23F6931E64C8B1F5148B5A0DEEBF21C6F48
86515A223BC905855051C042CC21D465020A96AE3C58FE7477386B6618200035
A84EE293DC779D49B1E729C6990C8B17928F4AA314B87CFF04BD82D3B235B457
C70C1F00689BE4396238C498E0C3D6D81CBF4B9169A59A4E2B21F4EE561E57A5
10F09C8428624B705303E2F97CE57C1759F44D89D7D1ACE62FFB9C8895B45810
FE1CB5B571D21A6DD3A3DC9FD2EC825D99A63C68C48E471AB4CA590C3D9B56BF
DF50246B876EDC5E424FA50733F429FAB121C5B1290C66DD917E3A423BBF1486
9A7EB73376F106F5D0657597F65ADF6031A16DB497773B3443B3BEA21BA6DC23
D6429321156314E86B771124F0F11519DC47B4E8554759F18226B80D7D66866C
CF4ADF02A53172B7D2FF22885D8B4F4CFD846EFD70E0215C50DC846374B50FFE
EE5449B30AA5BCAD230FBC4EB1D322F73FA305264FF0EA6D5E7848563BCDEFE3
928BAAB659DEB9C7A4C1AECD1CEE9AE6CF5531F04161B2C22DA4E77553F9C4C5
AE412B09294CB0218C6D9C3F8C035C72D6F2601417B3689B31D5E40AB3F83ABE
0C0EB68197FCDDF994A43AAB326E77407DA830566264BC283976BB008E0051AD
CAA1AC75B173789517BDB5C6A2D32D3B9F41E4F9652429844711804A6913C95B
139570C02B4973C5A839F2494B3B4406F006B034D0EF5D087F598AB27522EF15
1F68A97865514E26057622C7099739E5441C7862C66D1356B2A661DB49A98FDE
48C3809E0C1E2F676D7A6B82F6575107FEB296223B35F1EA57B4850E683B34E8
2A5F7ABE49A8F80F0BDDAC399EECBF5450A99CF23F9497EDE5275F3E90EF3EE6
2544730D5A18C430D823C0D02DCD20ACD00A2049924A41408A8A15F6880F4C42
59D0CBE92FD6E6120E547C0C496EDDFF51F599272142364408069E1BCFB7F631
E00CC94BEFA09929F74C022D097D84CB29062462196809BC33ED372424EB2233
469F84D7F2E1E811FBF5DB547416A15C0F25BE8F28E7FF2EF213A90E6D6B7706
B13347E84D52E92C31C09D7874381B37B8DA781F32893D62EAB96D32A838764B
4312A9156E495751F021A4B96F5F08B6BC387A05CD4B9C2DE7EB1F6A374A1D59
EDC424EFCF2CD639B98399D03DF8B8B706D059B9F09B7CFC59E4BA95CE7BEFF4
DDADC7CCC01CF7C402ED5363821D6F2A5F3DC8E90BD12547E941F71ECFE818F0
0F52AFD133D3C4D429D2B0FBECD1A9C3FA0CFCF7E9535516E3BB50636E65A551
15F2DABFCEAB0B7014D6E1E7AFE98CF5A779ACC972191C6C6A50F89F3DC45C64
A456E6ECDE9AE50DB35199BD068F0290BA8F06C7439EF3878C582C43F8664E77
59AF4774DB88E4143D97C258E03E670738CEAE0EC853387882CB3B7DF9A0EC5F
782386F3F6D990F2B782EF1C2F14E32EAC84939E0131F51BFA11439B3DF19637
3716B6C288FE83C44137558FBB4ED356944BBF51C1E075E31B39A562CA9BFB29
4568DEBDD15AAB90883FA6FE5607E8CD63E5948B0B3BF157B12374B574DDD684
7E22C1A84DFDD17B076A6B058E36093A138F2A85B8FBA7519A794A9FE57A7495
5FD3D83B28414B71D626BE6038143CE7911315A6F6F08AA9B557DF8B3B4B23C9
7D8A58E000A4961190058C7EF22A9EB649BA875AAD55AA97DDCFD26F72EFA24E
54A9629DE19E3AFE15C98F12EA824F6A4D776659591A48C64136DECB00A75606
9CE20C9C0326C3A550D08B504E00C6EFF66113F3836C7B0E1AB19A3107F56611
D42B8D1D6FE497232A140C95C4B635956421EB00D5E9C815EA54E08AF7668EB5
C95801C26C977B6C08E286FD53309168790B3BB00EF97563E5A442B68F95BCD7
8139D4D3D06EA1156237235D437E940B42E45507BA6AA3B5939CEA601ED400D5
C4052C5A208E53BE4F69CD2A7E9CD2638D71FAECF6BB72289795C58AB324C4A9
667F56A027F2801FB8B7BFAD07753448B495A89BEEC7E0A5F92D526FA2942909
4F008B156E60D47724D122C33CAA62D7209ACD10F3E59570D1619C6478D4C35D
3B4924085BC94ED0350E3267D91CCCACC4827194EAE8B39406B4BA492602F3A5
3DFCE348FCEDDC93F8978C8E318BE281CBE0056D2CA6C374EE93BC44A09E7341
CB43730DB05ADDC2DF29B25014F7CB11FC105735BD2617C174C73DBB22A732F1
557259410EF51880CA56A95F558EB0BD91872457F96110993B566A6BBFDD71CB
E9C3B4615E7869E186B8EAC1CDDD15B85C3928CBD7CCE76C86906E2D1B2C785C
C758882555AEBB8915A7466E628A1D94FA970E2AEFACB323B01BBECF840080C5
2E7023944DD1FA9E0A0A5D680FD220F6829B27BCAD57461B0D04EBC062143661
9F3B4C49B6EABB083A7F5B06AC18E1F506B20DDF35F35889DAE5EE45B4972D92
80CB2C35ABD3F2361AA93333D5B62A2BE57ADB690F3C73E3306A446D3A1AF888
C3C39EE67DD3281BB7D154E67468ED160438560E467B8708B2E7F7CE9CD7C80D
55B674B8649B85E9CD63F93D7315E6D1990A7AFA227EEE3DB1E198F4FBDFA83E
D8C992268C3BF9E857479581A1FEA919FEA02F5D20E070C91B876A4C522C9929
E284C466F021AB2F1F09311FF2FFE64FB548C9068019CFF5E24A9025F6BD25B6
D120D36F0D1BB4C97D36F33C765CA7CCEA52A51FD3D4D27E223AE21864552CD8
33EDB8586C31726266D70C391F0E5524116D3411A7976AE560887BFD2915A95F
8A61B14E51FF126C2EAB13AE66AEEFCE5993E17676B36FE89A36A9CCAC02BE98
067D192A99B67BD37169EF25EF48E7E56CA7AB58EF52AFB92E5D6DA36024EEAA
FABAE01C6B173C7CDC9CF704B3299FA6D387DA3D24D10B289E27200220E95B1C
E132EBBBDAE58055C8A40BA67C7B3753BD958CF5733C7DB6AE749544C93EA4E4
0724AE4F47148AA1D82680155C0608AE28698211AA36D7DB703EBFB063B35187
03DDAC263B4A44355E81B908E0B6BB5B85F443149345C500D87888FECD094F4B
46CEBC8AEBB8FB049CDAC87CB2D6318ABE40E341B38E7243BFFF48DEA7D6278B
14AD07A99899FA0A910ED6687D69BF5E60C95A5D733044D6473F5166907DA1F9
E43D3E6426D4227983B7ADA60888B65CA08CC83D33D0AC09AFE4FF73C53AA4CE
B12ABBF7E734CB73A7C36497901FBAF7CE436527D1C85EF6318E21C11AE85899
D21F6CFD57C05F355EF9B65C43DED9057DDFF852E4A562E91B4858E2AB88DF0A
857EDF66512D014D5C4C3A8642D8BBA79AEAC5176D3EBDBD751E3427611747DB
F61DED3450D62F633B4FE39B4B3E6459494EA13254A672AC2EF6C23E8F246DE2
94E3DFC329E4F7AEC28367D8A270C7645B04EDFFA51DACD9674F084BCC1BF000
36E3A173CD9D229481C66811EFE366C651271E9F51BCA19F8BAB9A658F171FFE
0BCFC50FD9013146E5D802C2D5DF9BE289BA291B57DD7F7AC8C5A91D50F75222
5E44AE084EF97E5A70DE26D8969B07CEEF3A135E5707B9E604B14A0F23B816EF
E49F125BBD4FFBDD0F1D394DAAE9DC77E3D3043345D17127F57CCBC558BC7579
ADF354027F26D86325FFDA6A33320950351454736496B88E163E2DDA4892CFA6
7BDEF40704E7F7DB7F1E3E5A954EC942E4BCF310C4A16BD1F25E18C0E9D9BEA6
97D210CD8BA5BBC6E71DA17BB648E7971595CECF683ACC97B847B83830AE5D59
C6C9465B1A67502F8FB671A873898E1EB13A2948396F35240CA0F68506C1658A
4165B5E386FF2D44176FF00E112D6E32A9AD88C06F79B5F35329B5B1877B8354
2B70B23D186005F39A4348E17D6A4F94C5BC8032AE74501A386FB798C8D0F0AE
CA635449ED3121E5136FF22B9520853F7BA1C45C516F0DABF61143DAD3D1E634
0E0259BE35D887DCDD0EBAA14A19A21163FCD70948F22526F73C572E3E9A21D4
4449F9C8F32F2A162BA0AC0D23FE393334BC8EF4740155D6A75E0E648BBE7DEB
7B4D565FC3BC9D1F5D609382B05998BA14FF2F16D4E828B10F28A835F2057FF3
91672BFA038C50C5F30B018FD82F7C7CAF59D98ABF36A43EE21A0224119605BF
8EE4AA106C719DBA505DA8A727AF26C6B839B40E623C63DF4FD8A1BF0E560752
439DCB4C58E1AA75666B1F40CA234F778AADA087C845A75694BC1325B0AB37EC
8482EFE7BD9AB5EDEEBA303C4D6EA7FFF84D7D18397E9A72779F42C80D8C180C
6D41FB4F5E31D84C98A392896E1DB9143B83D4242A22F9295A0C9AC2560750F4
EB4FF685DDF4F5E7E4A59F593C5C04EF3F2F875B7BAAAB4748FF0F698D1F60A9
E797FBCB1EC7E307C1EC0470F00DBABCBD256A167C50016EB1FCF9650223D59F
53DE8ADB210FB5C0A3CE0870A8CF09715E706FE717C9B286B3F6D96706B8A1EB
9CF727CEC88ABE185FE90D6A692612D6647248F2635CDFE589CC4D511D816833
DBD4E8105FC18CBC34EDA9DB175EEF31E2C9F4186A5D3FC179F6AAF8616E317E
860ABC03406A2BD9A8BECE74ADA10675ACEC647FE8D2E60F37361D818D7B976F
186B389C001C0021DC4AFBBD0FC1FC81FA60E3D3FCF0B2417530E2CA2B712345
B6D9F0124C33B7467000FA40C2DF099708EA9D6BC47E014EF4DF0B7D7A74BAE4
A480B37447943C6EE2916B7DD115EAF7867F1DC4C9EE2B806A45566640D3188E
775C80C98730CA96EAB4573868235F634A28D2E831F6FBF7C594BA0CF4614BE5
109322467E57B355856E0A4116C6E78A735980568CCD14581A033CE43DCE1DE2
4823641881903FDF296F88F0E8280A9A801DD6689094946F4D7E8E85EA9BC39A
B7C7457FE5A74D013443E5F5E25AE036738775E53207D6E9B8BC70EAA4F07972
FE499B9858DCEAE7BDADB06638CFDCC02A28DD747CDBD7274C7338D9AF75CC96
796D081CC847D9E28EEFD69D558127D53955F46956CDF23B6852017336AB16FB
8F8D3A24A28218B30E9AAE3F61532B83E91CE47167DBBFAC87BC4A8A56A6FFFC
D7077027DBA3DB5F4185B44732C614BA56948AA4F45277217549764CF7E02CFB
12AEAA3AF4518B6154BC909977B0365D268E9CA5A206B1F7C36CC2CD0427B675
DF7F0B5CBDBA2B14BEDF4502367D32729C1B1F1C3C47B5DF5ED075F90F1C8E6D
ECAA6C74A81058B16033485A39C713578095D020326FF6209F10646A521A2271
E19BC52C7DB8AFD2EB93FCCCB199B520FBAE63BCFFB37EB84701BE20DBA98FF1
A544E94806C24A365A7F0FCF48BC288D5E68C10F28FC6C7299D7511B6A9A7AC0
7231E093E37EF50887BC5362A0491604946033E9FED03728062C7424B8E034D4
7E03C2CC5C8E8568A619C5BE81F15FCD93C91CDFF6B2B4CA5AC8CA85E8340758
BEFE4BC6598BDFBB8B868E28073D2F0B207382C8065F07AC96C0C00395F3226D
CE4DCD1E333D6DCB59DDFB6AB96355E2A3A3B78D6A25C71316969466DDD1B974
393C8A75795433177ED3CDED7B40AFFCF5EF1A5B08C4ED6AF72D87DFF821C102
C92CB4B020B1D95F61C910C80124EC9CE21232BBCDDCB4AE1FFB39448393608B
16A99C4E2DCA7D4AC90A4C6B56275BFB1ABCAE8815FB4C778967A2D67E2095DB
1DDA183B847324C66B899ABFE34CAB3C1B71130B766538B4B26C10B2A4F777DF
6970E89D1D1F76E623ACA346E094AB2E9DF61197605C951FF6937077EC819B7A
A19732E5FBAA590F27526FE64E851287C638EB464E42F649AB12E6E988EA86DE
C72F2B13B91F8F078A89C31A1BE614D669FBF26EE27A3CAC695DC07FA06AAE66
8CFC1A85919C54EAA447733D85566B1FAF54461EAC6C881F01885BDACD173BFA
E8548F4FAD81A672AAFA2DA464B46AE138C2357B66A9DF72EFEA9E2942B88A28
34D2F992055DA845454A3AE123446E05C9C6F8194F7AB2E111360861FA859FFD
F463AB5B1562EB1321E515F4000D331E5B5C3E073BEF7D771804A5A75092E5FA
E0ABD829BED2A6826D7BC55674A2EFAE7B6B9EF5D080DA55FADB257DB591B64F
5F32E055E0C94DD5D2AF69D502C93987D1DB44540089536793AD990202035FFE
31E2066EE9D64391BDFDB935F1C6AAA1D97BBEB5F43EB99862086763A47EF5B4
2A97E42526EBE7631794D60DC205B594ABD742CD608CBDD3B18DEC5E0BE7984D
B39D5A66AC3B778D8B46E4BFAEC220C1CBAEEF8B64B54A7FA3052683DFC68D78
FA7FE7C7BD426331D0ADF12B386E4FCAF4EC3C6E5A3E926DC7979FDB40DE7552
F36B7940275C0A7EF07A3D7601DD262100A2DFF457B96D5B89451A0D6E9BC4D4
46D9D9F36B088FF4E4D4BAD2D52811B786CD6FF960031FFBD082E3FAACBCD8D0
E03E65979A03EF4837EE0FAFB30DF7B739E5B107334EF1AC05C10F6A7FD468C5
E406CCBBED3D1E7609F1DE086AAAD222A35535E009E3FF1C82C1C13B6ED1043D
BC6981F28651A22842EC00CDC8F8BF690E712054896BA0039AC41BD9FACD343E
470C694A995D3AB8064BC4CE1BA8C200712CDFC7A0309C1BA20AB2278CB8296F
497EFACE176EE166EECC9044209302FA92D6E4E613AF6F8B83B423C5FF465771
38A0C38CE83F82DE0A7F2041EF5E2CBACEC99F9CB92939E2C36310A2B3D98DFC
23F13436A709F6DB0ACA30BBD4E0B2109FAF73EC9ECF485EB8F2AB42DDF1C48A
CF4739E9F7F6386CEB8F7CA8B1B6E727E70D0FB6F6511BB6230FB276C49E5F28
C1829CE4A71DC8F60F75E9B772C2A13374BDEE8E2D3DE97EAD63C12CBE8C3569
CFDB33623F60D70D36F3144F27D64E6508BC74B911E0F3B136B18999914D2E35
69B9BD875EAD523231FAF077ADF7A1965A5E90915989710D9A0779004DF39533
DDDC433E36A691AEC06A1ECAA1DF6B5E55E7BE8A3F0E4853E8D3E0B30A354A78
3585760B129A15CF251AA82DCB6B9582D6614ADF4AB4D3B596870B14DB277217
60E120D6FEA969DA8B1FD0CB3EFF057A0E381AA4441962B3F46D35AF3503C771
BE08F6A370134520B554DA4BFF5801BA80FF0DDD392E954E5D95FBF31DAC5742
81268172F2C4C11FC17D2D913B40D33AB29540D5AFACCA6EAC151AA6A28554D4
40D62C0CE5A67358579C937BC5DF68E524E6CC2EF72BC75EBCD45614CA06AE94
050112131FE01C584E5C352670BC971B7319A3AA6519D5E9E61642E652E245D2
6744FDD53504A3AEF7043041DC7DE0B0141162A5DE8D08363774F4FD49FF8B80
52B1790BD6642B9F5E899DB564E35F08463A9EEA25FA7755D65C62D699E668D5
D57E632BA7FB6AC6868110A3195D27B627C43F8AA7645AEEE7F901388DB71CAC
CBB02CEE2B8D35F50F3E0DCEB7D528C0E09B3D7F04455165456F5D934A70885E
61A2D0EF532B5B3F2EDE9CCAD196960D01182CCD709528DF3F9FACF4EE49B56C
0E7F5B917339D1643C9FEA429C0D68193005C4F65C9A9498A730E1C8E5BFB96F
A1152FF9D09C3D1E9B320273853CA1421D9DD8EC5C586C188D1914E8AAEB7BD0
8260605099CC989DCD1E2BB7F8E7345D07DB225936738FF302FD299960DA0959
3123A3614DDEE80EA57A65EAD59E1797D816F19493732AE6F0EB214D0BC48895
82EE2697B7EE8BC1A941124BB04DD5E87AC27A416A85C5EE04C5E6D89F854D8C
DDCC6AFE3C05A47CFC7CA483408347C187B005C01C6AC5A61B0AED82B2A2A19A
6FDDDFD239CDFB7DDD9789C844EC46C3B7FF6C6A790B08CDC68D738426CA82BB
29B38FD21378C189CBEF39328FC3126D1246693A7A67F39A3A570C8452DFABFB
FEE8B4F1649A31F8A12A2D6B946280D3F8F5B44EAB5DCB7E777599DFAC71CFC7
68A7F577D4F4DF107E8CA66C3BE3B8A2FA5D3BF1243E8415F07901DD27FE2D6B
43689B35FB24408A49521223F2C8AB5EA04F2035491F50969E3B6D285FD204E8
CF6B8F015B9372444C6A79FA432266DCA33BE791C021A6E738CAB36ADCE48135
4BB114FCAA47920BD588428FAD3569E4DFA1EB1EA02C97175FEC8DCAAFE499CE
D31A0DFD94A85F561948B32FBA7097F5274DEF23401DBA77D0828117C9F96E87
FD5AB28F02180BB85DB2136427617AEB34A9BBAA8415C4E88DC3147F8C99C166
9ECE67B2CAB9241916ACDC83BDC4920F2EB23FBF35DDEA8B018F421BA3F09FB0
DCCF840C637D1CB37F42AF187DEC79D624484DC00F5A1340E5AEC49BE6E2D50E
DFFDC6FB569DB15D2873E1B1D8053135DB857E626E94810647CCBCFDA44C925E
99383D4CF6D51DD2113476B219316659100F8F418B91A52E11E5561B2B3D6F0F
806160229EAF3778AC57782C89F3D6A7F192088A3E08F65E243950A9BC221EE5
2EF43217457F78E5D5F30C2DF7F74CAB822CAFA86C6C286D7C2927C2D009488E
E4542595177BCC1C9B44A2E71299268AC3B6C50DFF3FBD1E9E08EC9005B1D178
4443849BE29B90E702412B935DA9CF653477A1F8D6C483D527D93B84E48A0FB6
EE4E971B2C47CEFBCAE5773A57C4F27C1AAAD77C77161D3E8CD0130FA620AC79
038622E91374EACB99233FA634B8075E8FD7DEDB52C41D9F396B5563A4591829
1A2045C3159358F4578582222D024E983AB453533BE5324E8E02049638FF787A
7E5FEB7AD57C5091AE34054982A145FE14D44703DBECB7B684B33B57006D93E6
3188E00CA7E81E61B4D477B245EF6BF175B9F55A3F61A86E38E5BF49A1DD333E
13D1843AB3E9D790413D0C1E8E9C6FCB102A28374FB854DC4EC846BE6BEC90A1
D344770D41B19D94B2869C49467005CAD481A4171AA1DB3EE2DD00193CD7DBA9
E075360B5952A542314099EDB727148F539FA146E7005F88268E200410C693AC
EF014E81026AC656D00D604E4256A325BFD7BDD135E279AF334EC85F1DE601C1
A43ABCF35A4EBB29972451836B0344236F3F64068833DF4765A0CCCF70FD85C4
2A46C23B0E635C73A73DB72CC45CB842C083934C0B086737948A0F472773572F
ADF525F773E75CE5E804EC45D0F1C3F81D88D2AC01D670B6343484CD8554B23C
E36A7D01E02183A4D5463E389F48E3A00DA83E153D041048EA5D9343F3EB7531
0170537E0F58CF0C05C61D7DDB6B9DB4C2522BC50AA8BF1BE92B076E42A8D95F
6E70A64EADE8B78680A0FB4A990C1954AB2E42CFFFE82B0EEBDC99631663F09C
54A635B46FCF1598632B42A934FCC701356A9BE424CF24801671C827B83C2A8F
76D2DCCFA253D85EEB235A805F0B84E517ACFC4F64EB9D758AEEECF8BF86AF41
AC1DE766A5D569FBEB1A8B331320407095CE85AB022C2DDF13655C98F7D6BD6B
55C6BA339199583666842A7374B46F842D84DD1176228B5A4CC4BA8CD1DFAEA6
0BD0FBC3FFBFC4C32FCFF2D71D86FA9BA8BBFFD98055DE182A94BCDECC8C4DDC
C67198596549D7149EBFF6E617F021B930F8CC132B8A08E29C5AAA8C1FBE957A
7EC11070F58845C117459F483333D637060609A9A2ABA46E4310B24206DA5B98
57377A4C2A79C2984D820C163153256210BE1731999BF15D79D694E6EE6F0B61
04EC111A7C4D5A115D49E1809E9D319F47EB51762A88C7DE665CB54A368AF615
35172B35FC73440172B38572BA5C83D99581EABAAF3E528F5DE5F14466D1C5D0
980B95CB7947EE72A4E50822F651B6078CA7B8249E4ABE3F327944AA5337BEF9
4446FB06FAB22CFBFB09382318CC912F60ED8052953292287FA5924DB5C3836B
919B3182C992BE28BA731420DF87A8B3F6D96D0BB25DE9CCB9922D62479549E1
A94EF0AA5F7124B587AC76D74DFDCCC571E780884F8A57AB75C8894A2F2A2F83
573E11CEF8A781CD8E9470A429796E52169678B2EE6EC6078CD37099BFA8752A
B7BB1EA2FCE3E8FD146ACDA26FC0300CED7041F3E7644291A9ED899281C4CADC
033CFC750D3787DB6BD43ED81CC34D59D137CD168F759D5271FA30B3EB7D105B
72206C6F4331566EF5BFDD16ADA6F6CFFB7A4BD5DDDCA0133515240A9F4877EF
C78CBB1C389A101E3E4367056D83C2DE3D55558C231E96D76F6EFA8AD6316C1A
C38809B089EF76B5E7E5CB002F6B53512054F8BC54F0E084E39DBA54B1053194
385F458314BB2AA58F8072A307F57E3EEA15FAE6007B07048F00A35D05C94679
B9699767F8FAFE7C7C867505B703FA10407057F6967DECCCCE398D2FFFA09213
1098DB1070ABBCCB2C8AF3C75F69A86E95D7E13D403C7E2AD9CFDE28DC607590
A058DB192D0C27F716AD28B6EE4ED2035B714A88FDC414B4B720A31B12C8FCD6
1FE1CC753A13839E495B329DCD72F237D2F0422DF11C97F875A7C871DDA1B394
A0C52C411BB4F8893D45C81B1EFBEBF67ED8E621DF6617643DC06A20505DD401
70DEFB26F17A76BC785A1C0D977507C7F21A4E2DDE807AB241BD53C7AC458D14
FED15C28C786BDCF3CDD6745F46DADA39D6C72432BCD2E2160F34B81A26B5F6B
2612A94C8B1F100234542A1CF1CB9DA3CC53381F4291CFE3E1AF215B5968811D
0B2C5607DEEBD7C88AF50E8FA861022CC2D40E418A3AC9813CAC3E318C17693F
1921A43ACE655BA1A9B28120109B93C863E558958752CCA67F193042D3DA3D90
2CDBE1CC23F104083B7138FA37994E3157C8CBE0980794154297CBC556DF7409
A8F810630A3922F2CD7AC5DA507FA9137638956F5537425F2F4CB498C12B8EE5
283BEE9742EBE0F50D551D7E7F7D85F28E3DF85161B0E8992ECF83CA9F69E4BB
E0880A1515F3353F6721834CD6F4404AECCC4F8E5270C31444BAEC53FC1813F4
3A7FAE1F408D726B2011F56BAD2BA93AFC4116878E05F860770ADF698F0FC54D
65C278225D0E35E4B3F75649C50247E8FCED6B2F15D8F4BBA06F8453691973F1
1D727FB466C867A12E591050A1F68D1EC4BBF606E7EBDC5B33AA58B83902AAF9
237E333A8FA3A0380693563C593C22428FCAF9C939C529534EF7EC900A08B984
FF1FBCFFCA9FC39D8753BADF5BCA9542BEB68C97806B49F681AAC188DB5664EB
8E0E83697D71EE4B0FDB00A77057C034B8A84D016D190669FF9066290B1CB848
F1C0059F4A25D914B8162A76DCEF34469E0FF1CACCBCF712EDB9534942CE8343
F9D1799613623C4CCC796460D712DE1A0D5B12D57272FA4BEFE7E57709DC2F41
187CFBDD259115218EF6C69D256345250DAE7285A70904F515BBD33F110B31F3
456CCBBB04B911AB7862E55B7DBB99D7142F54639FC20F17033394B3AAE9FF8F
56D3EF83D6AAB7D7F5A06435FE9A01164861F22DC9FDC4D067F35C662B32480C
14154EB935E7D74D1BC2DE301D0D691B50524B4433D78EAE03A14D91C3602E13
B9E128E699BE733EC83578985B77A251BEB84D3957AC398E8FA82706836C26BB
A5956327BDDE4E1A0509EFE2C366DAF9459D021692EAB5F7C07D03E63A63BC21
B0990CA240A5F722C38A78900E4CF5D873123EA4CB5C018BB0629916F019CD35
A571E28CFA6E31E13913851EBB0A01BE30E92683F2B632FBAB7BAD93CA4F3084
9C58B6A9EBA9E99F9FDB731658CB5128FF4B801F2682AC12271DED2C639E6CA5
557B30C5BD4306DA59476D3399DBC875DC4B54FB057432CD31DBEC33C88CE9A0
A86F93E607F064110409D99B6CBC522401A78E76782DE05C1DEB6892A3218111
8F5EC15F3707A4AC055DB1F9959A95BE9587CFE3176DC9A1352963ACC3B7F534
7053CF8AB83125CCE6F6FD3975E5223DB31A5137B94E5976988EB00781DB8E1F
6B9367507F860AB0BBD664365405451DCBDB2FB858BB8E0F36F1D9711AC0B10F
89E45FDC78EE027A52491A2B0223E878547A6CBC23CED81E491B3A94BB40EE85
02E39D8AA94CF1FD06AA9F93F48C3894C14307652B7621F31935412D5DD427D7
272C5850BD64F6C363A892C63C1BB9BC7717646C3924980DAEBF3B6076EF9716
6E856ACCD07F0EB4B0BA6C2880EBE6290C4C03E6E9250D104EB07BC35F001A51
FBBE40764E85C8AD1B034CC52094EAE9072880AF7B0CE41EFFF25A307519140B
C926FF312DB7AA4C154162CCFB7669F0D96BAE729FEFEA593C8E6A4BCB516E15
5D31C6634C335B26E82E728752E37AA554C17C788ADA9CF0668971FC01124E0C
D4CD86C64E61B2AE2CF5B2771327FB0050B9C3909703D47B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB7C1A7BE
4066E1E941A608D1ABEE882F8B8E7E3B735838A7FE08025B5CA3639451BFACB4
AC69B3D95585EF78B1D0F72CE3FE6E475E5D061105933646FF7EA81B5026C7E1
EF4FDDFF62E82B16CBE3D401AAFA438728BB0FDE9646FB43EC0BB1B1B13D8AD0
FB57C47730284B10206538F39266CAFFDF5AAF91F50D9A6BA11AB621533F6A19
38E812BA39E0756E167FB5AF562509658445A73832470314C49EE7D7E13ADCF5
A1BDA4B7FBF5919A2893BAD39B99FEC7FDB24FFD726EABAEAD48D8161D8019F4
11F46AF98FF43B1D23ED27CE09A9DFC05F698D0EAD020AE9459607F029D47220
FEE6C1E5027D67A89EB217A15ACD10EBEA544FAF29F78D58610D516C1AC6521A
B3AF00CB109BCD72332A948058CF657CD5C3C5D5473A12D81D3D4E803F0B08B6
ACE5A6BA068B2F0D74581F6BD2192A98CC4896B0337597807D04D3D49C5DF53F
73D4C96A1BC3ADDAE7027582A5876175582353777595158CBABDB642CDD0C63B
FF624A3EC4645764F16301310021E8F5C2444C0510E2B7678C1BD8FE5991BAC2
556AE99AB6140B728B247BF54CB05E7D7CB022AFC9707A6AC87FAA32E2B9535F
C7DA8DEDFBD6AC22D3BB7C4ED8C77E55930B598028509FA59A8F10C2D07C6574
1A9D7C892585597CB66F5CCC3897A0B4E6D1DCB64523C9CB1D1E123B02103411
2BE958F28383E538A12ABE23EAABF4378A680CC780BA49BBE12DBDB68CDA5021
C85329D120D601C2F38DDC680AA37BCF146336BB1C76735D5F32867DC810C8F1
0FEA3D847F84967A5AC912CBB2154315BA6716A9D674AA23DE05228EC140AFB0
DD8AD95EA632F544569470EB70042BAB9B593A851028FAFA3C784203B38F1731
2D44D7FE027E9D5334B12AC6EE26E2F7BD86525FE0D8391EB14BA5BA08543D80
BD1B72934D52A44E4E00464DCD322FE1877838D5B96AD423C3F9F0FE606458D7
09A06A63959C04D0CBC807EAA0D6306DBB6DD7042940AC8D1653B5FA1E1DCF95
9B811156269F8045D33F8919F4ADDD6CF64BC57BC155ABA3C48702D416E518E5
B8A689D5620C42591A87BE9748516ED14753D42FFE40AE5B1A19E7D96877946F
5516CF9C2A1D11ED5174A0A0D80438CCA19BEEA22D1D3451887FDADD5ACB9C80
64A418A484EF78EE246E16C8A140206BE17856C2981CFC623A237826941D522C
F719EB810D55EC587C9C0366A3BA8E7C05AE6B0672F7E6A1FC57D476F4B5E378
A892307EED1EB5450690FABCEBE2BA483DECB1F2664E1AA77EE9E9BD34890955
9D711B8884D53EE11250C4949427795DC433C82E39292983DA3012F079B91617
3FB4274BFC7C50D433D9708A488223984A43B309389385E2FEF9F228C4105426
AAF9CCD32A570ED3711B3206ADEFFDD245245816B8CB9967A0C3045EE99400E1
083EBFF60757607838C0988AFCD7202A2B35BD172FFAF985435D58B29992077D
03B4827624584F33DDBD938DB9DA3F6CEA12A9967A10A955DF3543EF2737CAD0
068C7710107F877F311439C0E81E895842774A32CCF9DAF8D50C5F896AE61D94
C92DD7D4DC1D65AAE9FA0ABDB941E9C3F95290AF8637B196DBA77E02C333A59F
7081549AFEDD15077F99C34DBB468E2873F87732619A1BF39C73964A580945A5
2346EBC4C6A5D3AF8DE363244256B42E2ABAEC99063FAE4C3DD0EF3892D32768
F828E142FF30144F36663C2D3A340EC1E3B49AACCE99AD5367FC6EAA925D3718
F1F60A2BD80EC9A0C7753846999FB923FFD45E9EA65C8C1FC1863150FE1063EE
04689E55E30A90A7B1CE0C6ECD4902BADA9C48A6428161254A5379BB07A2FE75
0D9F49ADBE1EE9B39B97A02044B90D54786014FC68F47C9DCAE8D7AD00B55C84
1EF2F7A5490751DF2770509D17F0D33E91A8FA92987071EB364E84134C15C5A6
CDD0D72DA56BED4F5D6B1BEBDD13ECDA571E6B306A436C417C8A0728D38BF03E
7C8FFEFD66863B2DE87B3BF6A4470C7455052EC1E196CB268E7E6C57423862AE
3DB330C632A6265662A76DDFA92ED9746B1E2F50E5A169767DCBD7793155C41B
F1A55F369E0171732CED4F64D6FAAE0E730950858BE5EB596B38E33247070D1A
279CE5CAA560E9EADACFCE15D45CAA1C9A3B48110C400FE25625E8EDDA5628E9
20FA8CA34B29C4F36103D564E8AFE3B13F7B5239C5A114CA6A53182EB8B64D68
24ED0AF17251CCB646065A7AAA992046CAEBE4C8058B36A742A7B8BB6958EDDE
3B738C0E53798009A18187337EEB263E4CB0229E53619316CE4B763111344B0B
7908A414FF6F83DDEEA4994B233624EF42FB45892BF12B0D5C0D5BA142733993
9506BFD70374D9BFBAA4E775439AB45CE99FDFF27C5BAABAEDC2BE0880C53EA0
53F45D75D563BBDB227A54B670099EFE0C922CB020FE9F7E55C2CC28BC48719D
6855232F286509762AFCE230F8EC47DFA9898A6A6DC2F091D98BE4B75E6D0A8C
E08C7192EA0180204D66FC4FC6013748585B3F20D5759F1FB7F15D9635FA2271
607F413599483CD33C214269A8BA5DB40E60ED84F0D826992FC615E92243D7B8
8A08A4809657EBD8AA23DD152AD1A4BD85EF3DB33538E793A47D657977A5CEA0
89134BAFEB4A2217233D462A179FAD42A069BA85E6353C2D735F8990D74EB760
2D5EA3262E5517C37A534CA9234C8E932B32FBA855954C93C0F73CEFC9EF18D3
5BD611F5E0BC0085544B0F871D34B224BEB2C9F0736576463AC68B92D1576456
350049E2555231C5E68B2B7BDC47836C06B7EBFAFEA9E6EC64B95E66FE17A363
F79FE0D4E13B4B8FF269177BBF1ED457D16DD6ACEDDB0702652502DCDB62DAB4
3042F5A0C5EE584ADCD3A9893640A2F2886786289FCA5F03EB898FB0D57ED581
13945546A06D4F45870128A6CBCC832D28D0E44A91BD9E48D0BA857C9B93C1DB
D403F9E0300987C0D0A2EC04CB15F533FA2C48E55ECC5BF051B41B7A0FA8E3D8
B92FF2FA348672FDA1ADC11AEB47E57B52BDA4244BBC4EEA7F48B90A387D5CF6
F6187932B291302DE57B226DDA990A02F15E2E55037CD73ED9F583D7A201CB42
7F503EC8E7B8B7FC4B92F6448ADDD374C03C11005ED07AA5A32E8110D9E7AA3E
DDEDE67196B5F24C8417EABB588E9EEB9DB09244BA43F46CB8CE3CF4D1F04EAB
F644FEA655614E47E0D1087F75C6A59A23BFEC6BC638539E179491396ADFC4A2
35A24D55D3EA6C6CCA4E5E079FFCFA6A5EA15B036D0358841ED198BB28667BDB
2BEABE62760C41F271DD2F2CF4B74C49ADCD9785638E2CCAB049A29AACD16BA7
0D889434D7A0C4CC9F276D0787835522332B3E5B60B0DDE3762DA44AD8B55AD1
0FF7C6D29185081D2B79CBB77C9965738319C47FC0A1B8AFC51A37C75438516A
912349F244F64B1268EDDA93CA024CCC2CBEE620D965BD4962B222614749B764
6016C4260F26075EDA507C216F906C80C4E2C720EB54A22A0604568A6AF218BE
92EE535736095F7FDEB5A6B804CAAB90952F80B21A5AD793F13883D0924F4676
8AB7C0BB664630AF8D971017494912428DF0BF4D300CD0FF5E2AF1CFAA633A89
F1F8A42EC1D594310752A964598EE85D93D00B26FE3232A9D20596F08A6E4B99
AC5E2A4D4D912BB4C30A51594029F4058611E021ED667B5016C8327568292BA8
8BB1105AAA54D2F89D5461DE8C8054554F59C4F3D1BD721F76A416AD0BFFF687
BBD815648A14B09B6164D886D549533B72F73A1AC87B3FEB258C254E041FEAD9
1570B98027AE3CD89E631904467FBC1654E4389B60B4B103AA858A3691E0FA8B
2193F88BECF885EC0B274D570B8A1921C00D30680665948401979ACE258A3BC1
0AF066181311CE40A61B822B7CC5FB05AF8A21B9950BF1A921F49B34B286B28F
BD0429E3582D2144C4E5815C752CC207169AAC03EB0D5D4C9C4A4C150B26917C
5AA7BF5DFA7C10AE3D7A545AB06AB8E6BF108013287B7B27D02AD9DC8243A320
331810F2FE2962E1AF5280CA9F6AA32C14126D88FB58B0C39F9658C2E3010007
02F16C792CC3076FF3CE151B0324758A97010E1F2C6E6A87D495FC65FF2E336F
2AB766C5EF9FB9B208F55AF5257820D073B4CB9000884CA767A32F087DDBC91A
C53979DFBAAFB793970ADDA777EAE36EE564A17662B16AD803DF81417053EF37
208FE44BA871624782
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C4B19E33
F046CE97B53DEB549FEA96CF6CE66357C4904B7932F5B1CE03CFE3A10C976B9C
C9AD11D7A02816F8E11666CA8B3EE1411DF2CA94172659BAD929E3E3E5248F48
0690CEC6D8F7061608CF2672F65ABDC96B4FCA84D5C847440CF9523D3BF23F6B
D4365582E4B187B6A1A0282ED323BF221EDD0A4CE11CE7EDA738D1AF48B2E19F
EB3DA1664DE99C447C35DFD45069FDED1FCD70B4A6855E91FFBD7146EFE88012
0BFF1D6D1ACB53D5E07FB5795F561A4A3E953BBA7C03A9762ADAE18E58DCE6B3
B1A703122EF3B16963AC7CB9682CE60E17947E7E675D19901C7E8272CE4C9FDF
536ABDFFA429B820A82AEE9A73D7DCF77DDE4D8E251CB3B3A5B0A91C0FCD7FBB
EAD7A812FF194FD049F28B82F4C2D73E41CC73C1C9F668931A2C7EBA5400A1B9
0902EFE6792F207136E1E16B41794E6CBF7316889A602D35C37EF36DEC95AF26
E9BB0900456F2EBF2705ECCE7B2ED90343D23E006ECB282D4B3629BB0C3892F3
FF9C17FE6C5FAB68358E1CD44AFF021948AC9FB8410A3DE22E0A01E367C52470
2A8CFD284CF9E8F505D5DBD7BBE242FE071FEA0094A55ED1CD7C9BE6B7C56C98
16AD1985FB7624F5E48CF6C0C2ED85B466F64C52F017B20CDABB85D24452E086
3942362E764A2BDA0F6C1B24426E302DDC4403A087EFB28508B137772858D1A8
9AD21A4DAD367B21D4B71BCD9DE648DB1736797BDF15C2A600ED17943DD010B0
4FABA5139548EA09718566B9DE86D04C3628DA170F8A3F2968FF726EB83685DD
B4D90069DB7C9F7DA84184290F508081C26CC9090EF0D3BF8F83BC3E3DC35E10
CD304BBEFEE80BB9A0D23756B91AA55ADFF8F3104449B6401B0A31F3DBDA75E9
AC62446C061296402F109F898A74A1A57ED808D1C4592D63E3F8BE1DDE1B2C33
3F98F57EEF40E66F956E98933A8C0E3DBB1D014614BCB334503F9F4AD87247E4
1367FC2CEC2A5A05917A62DF68C3DE2065A772019C474B051429933455E7D550
5C3562657CC9ECB222300417282319232BADDF205240166D84A2C48EBA62A63C
347D512DAD1E9B2A4890487B10BB0D95FCA6A5DE809558C5ED205EA79BAF9E83
E27E2C4AE26093681317195C8C36D6913C6D79AA81F4DB0B95DE9F7CC4145714
8BEBE93512B86F0547CCB177BEF05D6443D23EB8D3B796BCE6276B4040383C9D
965A943EC2E8851AA373EE1682F2D3A143D6F33CD930DFD5ED6390ABE1CBB68F
A80D3BE4430E9C9FFF5747D699F6EEC8949C19C52F175EAF3B7101AF39500AD4
EBC7992316A2DEC84AAFBD92F033B33EF2BB8A4796B06A7495686545D11C0E99
DB92988762E6585B31D758685D10C2BF46D44EC8836B9FC33A70C50FBFAEF60D
478D68983EB006896E6616DEAF9807C23208ED4C039D515D767D44083E38BD7E
8696D363ACEC5C7B9EAD898B77FE83EB160ECB4DDAC282C68500194FF7CDEC59
9CB6069CFA2C9917F00E7676DA3426665A73D5F329F33DE79BB830A2F69AAD4F
EE1096A89B45C068EB4D0C26166D5A49AD37BCFC2E5AE335976E04B58E759280
15A28BF09B926DFDE5F394A54086EC1AB27CA2EAD0A573A1FD2E01CB1197990E
DF8444CC83F1AF7EB87F48C550124E441959AE4CE851ABB49F9BED16F134D468
F393A6187502C4D904A26BA22D3EA5867047B32824DEE4ED90AF97200A10B399
2112657DB21DB3FB8C8FAEF2476515A41387CA09174006C8F2125DB04E001949
483D3BE38D9FB4F96C2C54591C85D37B4342418E617DEDFC0E4077566D4E41C8
F0E9271017474CD63AE725242BECD5082219004E8DA71604E693335005985577
07267CB6E58F6D9CA6F5B88EF3EE140AAE8F7DEFFFFA76B640FC05A080461691
86702A682E5EE62AA9BB968DC08B75C0AD9C60730CDB6C87A6D1361397EA18BB
A922286C98CEA89B9859D8E590A229AEE8274D01156666C7005ED53F4B929A1E
E57FF990E7DDACF48FA4FEB95B7C350F75AD6D546AA4A28BECE2C8D2784D9E8A
A3E3A33A1007754AE9D081FAB97709F1245B8680D2123CEEA5A555E09CFE68D5
C698B82DE522D70940F9474213F9F36E9DC9AD76C51C41AD651209E4E38F4836
F07E10A054D058EBF111048171AF3C984FA3F59F70957E65DD71D638EDF27549
21AA996A75ACED0A95B15B5DC61D937162932E9E84E9C9A46AF20EF5DFC239C1
32B77A650DEAD810D4914B8AF9A4279ECDF1387960FB843E1A31E4F20296F2B4
608AA8448FA1C2EB6BBE1AD828DCA8EE703B1BB9F607E527CAB6B036ACD1C978
0AA0F25F595798FDD73D90BB447A64471B2FB642EBECE5C3115347D479677B8D
2445E8ED84669FD0D5EB8D299A51C50C00C2C8E4CDE0FAE924C78D33BACD0F4D
7464425A147210602FC06FF2DC162407698138FFBB16C5A1132F73A6E14E09CC
B4A7F35E882A0052DE76A475D72276E2C6A8C48223624C08D72483DD8EE22792
6096F165FAB755DAB5D7251439D06444FA5C990EF446A30009A7DEBE36A84A81
8DA363363E4B3BBB6F116B9FB10A83A8AFFFCC65011D890CFB275F5435F3DD91
1BE11DB381C01A9C0464501EF996F4AAB4425E9D7C3C8193004DF6B0E2446521
2A24B7E24EE88FB207ACB013947A866A8ACE63BB86AA7CD7BBF2244E10185F6D
79C4D91D269C6E4A2F65B5A8D8963BE6AA380A9857E732A234E50243714D445E
51CEB5419642F9E1FD36D166A4B16E6F2C3FA74F055CD05B5A0167935869EC0E
7A62AAF6A921EEC30457B3DAE09A9F320D5758D8CA8F2D0EB09C6CB6DF2EB287
C7318B26F99931A49837CD82880BC75E659109C84520EB25EAA665CD2F0D2CC8
7942C01094384997F2BBF6DD38E79CDEB7BEC84B3B0F935D7B9F83249EC67D91
F7299AAC56823CD4BE926D0EE4E8CD0B49F0157DC2CDE157EC885EA07FC8B20E
78A090799BB51F167657988E69AED508CC056BBFD70FD472BFACF8DA580B7B1E
7A9290301CECA6BDEAB2DB7495E7E85DC610F59E7AFDD4B5C073100B36601F3E
7E19023A1774A29A40EC743AEAD9123DFCEB544B369D71D5A4816973A21F7698
BF8D5F2C76F0A487B8D8BB49BFCB4530EDA0B0E519763C2B61D2BBDD8ADD8530
F6EB1DD8265712717E4F7691688FDB846CC98CB112889DD3B16E3C2BF4191D79
47DD3A946FDBD83F0578F4B87B292CF288ACFCC271D1C6EEC578854CFE7AD417
55E9BDA7A53F1E8CBBD5651F4644CF51DAA8E729FCD12B49B8314FB63FA1A806
84F0610CF0DA9D50FA857F6363494266C2ED0625D06C3F97B0ACCFD6C259FE64
E1D512CB32BD281925A53C3E1D495BF10292B1395DB042C8F17B82535A13E645
498DDD5A0A4D839D95E211D60A2851B33E0B760CCBBAA33C6B6754BE2C86DD8C
AA9E18C093BDD727BE5CA54B9CCF4599252A64F071A7ABB75A726F1EC0AA65DD
C25283D1AE23A0C5C0F4C7A42173430171BCDB488BE6BFADC26F05B40FF138FA
D7855720FD0243035BAEBD18239DA0CB9348EB3E574ED7CE8FBAAAEF6D5158B5
1D49FB1A27806617294762C76327428CC6A53972758EB5FFFB20CBCC6B4B342C
83C4FC9240289B1596DB3F8F5E628070BD4157757ACA7E64B8359CDA0BA9C3F4
ADB6C62C3E295C80EE74EEB0A1287B0B687A05735A7E14E97FCF85D5098DEB5F
478114534F6D36E4DD1AB3767417A353BC475B59116D38BDEF3AD8BEDDDB8011
CDBBFB04AAAA21C7DA9C8CA81CD3D122FAB35C3AFCBABCA7D4C9D90F414418C7
14D6B0A0FEE97A97323816058E5C3998334F901CF99F65EAC750B8297754827C
DCA3C894A1527C832D0D6AA0BCF7739D81351845EB97E346B13A13040469581D
7D11990750232178464E2DD43472147FD04D8B1B28CB9E8ACEE4506EAC9B0357
DE1F5F0E161FFCFAD9CBA9FE4DF5CFA18B8F974BCC43201672974FFFE2CDA323
345D90A14399FC5A078FA433DEAA3482339EBFC0B8AB6030D729C4DCF2E913B3
E8DE20777589C6189E4E82C9A0711FE40BC8A92E68951490B9FED0372D8DF634
767EF9CDE54034B07843BC55F2A47CB1340DF922EEC517326226AB1C7E119689
90B587AAAA466F6012D8CCE0D9642954C32629442691BBD79E16641F62E7F022
2132EA465875E880B329EFC831E454F8D0EE21D5998F44731CDFFFB761F1DB91
2A0887F2ACAC7044A40106216900B2EE793153E1733940CDBEC944DFAEF1D349
E1F80383799AF1A965A225FFFA8B0DCF62890B07A1450E2EDDA31EB0B14785FA
5620B826747DFC43458E53865081FC51A200CF0D42A331B47F46D97441834CBA
F11E2FE0CB1B0FA2E6ECB9EF217B8FADECBA8F949274609DC739ACEAB464EFF4
123FA8B5269DA64558B31C9722382F837F4A4C4D96697E0152081A7B4B175094
26A9E624A6242F1DAEF9C2587B6CAD29EC5973BC74505FED8F7F8B7866E6D358
0A257DF0603C04EEE43E382AA3BBE0CFE63C634B787101DDCE5EE69C1F709660
B93FE2EA3BD9FA64E3063A903B4CEEE7AC1C6316A04725C66418DA538C8C1557
3BBEDC15DB76F2653375D53BA4BCD965B499073EE91C99DD6C8762EC9F22DAD4
7BE269C40120B99667816FAFA22AE87D0085B776F2483D4996B3F30C79C508CF
52D85F449B56CD09968A2FB985FF3AD805AA74F655E475375D54727F0D45CE2A
A879970A9A166D46EDA2ADF294B7343511C25274D508BFD25FC4BD0D4DD51C61
2D871E219ABABCC9223AE783E1AD45BA50017C0FD4E9FF9B6AACA36CB25B9BD3
A0CA6145B11CF936CD10766C616899FE08C9CDD66ED96C685F4ED19F3DB89E6C
3168D9B430DCF35BDD2357C6E7E26E49BE5FE61F35C3CAF0FDFF080176C321F7
7478E1EA7C8D88CB5D32C33361B58F38ACBE8868CC263D0793FD510BEFD0B046
A353D742643523B8C6A3BFB4CC710E03ECF8D726526DD331DDA4218476E84A32
78E8D3EADF709A239A40BEBAF06A435E09C180F07A91B7379B36C36C9F182317
2F8F7AA38726FCCEB1224FF227F6BB41F2A74E969B18C1C45AE7B9873676A554
544ED722CFC0867762240F6263AAEA2B262075077004C7D2D6E556AC439754A5
49506E051BA3F76AB8E25E629414ECB8A7A624BCFFBA062FF54A1B7E3179DCBA
AD89D22CCEC64908DD47CD9EDFE955913A956502C28E0EC8C1AD85B9D610BED8
DBE97FC61B92020AF40261BA1A79554E8CF3E58A163AAAC2B681D7A60153CE19
AB3CE48BB89C85B9B0B1B991BF954050C48466C4352C79BFA265F992C7BAD1CE
572D70ED7DEEBE820C02ED2F967DA29AEA44A0C27A8661DAB4DAC6C83A858307
703A6F79AC6ED05FAAC5784C411CB85E9EEE582D062693DF8E223CDD15B8B185
AA90AA088DC168AE63B11D15A49B6E46D8EC621225A259A56EDCAF2DEBB2EE0F
D69336E7070E3EF345D6D1EDF0BCC6A8E0DB5B83CAAAC0C03C3F55166FC377E8
29EB5FF66994B101B01D5D3349B6F868364FA6DEBEFB280385D6319040350056
C19A1856B9B2EF42FDEE525DA402976DE01668693A8045F2F5C4FEA50AEE5531
6BEBDD68397D12AAFB637A163F9594E45B3A0083C8D9B1B979261B05346D6E3B
9E181071101E184E8C207262119E30EB5529B897857D02F0C4137CA38E293AFC
6819ACF650F8DED30FCA51E6718BE7511AEB1F990DC016DD1DFC964B4C276B4B
48521096B1240EDC18A069CEA1467700403A1963CF400F63F2F8A60EA6030C52
80EFF0AB91AE4F207B806E0E1666241125457C9223404D30D6C17BEB76A16621
32DFF46BF5AAE5D2A7A3BB79A5E1D5B11D75DF0585D6858B46CBFCB12F8313B7
B7844ABB0F5D3B2EFB4950E22B7F517D34D446F595922BD7808486EEBA91ABBD
D229816F057A6822533E61A4C1E2E7B3AB456D19D9769EADDC0776164D7B4054
DD4FED1E8DB315795037F147ACA04B731025C3AC407FB24F4ABE14345D6A3A25
3C967BD3513272306101B1902F23373679ABFD278DF3F69A3ACE342F43A28B4D
2A4D3579DE7B7CF82DC1BBD437830EF5A2EDD912F265C8E6BC119C84291DB97E
CC75E54539A1D9E03E132860F754CA6B23E0B550CABBCA69BBD062515E16F653
C7F38A2823C2C549CEC434910D8AEAA207BEB7A8B227217A2575AAC6D437A962
DCF0CEEC7F65AB8458CB439BC970F973831A12B8FC3708B3E83D87F3A394FC38
E69967833C08BE184A008B3ED3DE2EFAD93BC4967FF861E0FFDD170AFC20F9AF
8BDE1A4B71AE3761D67B064583FC15D8903C54C624144FFC39B550C5F5D829E2
7D532FD3D3F43B60B871A5EA3B407C3A0ED107EA48824D9EAC0CB38E3BF846E6
A9495B072911CC814C19D53B95DE0071E3A439D3C311E3F1A80BC2BA01FAB65E
3C91AF82D5201412387BA8892E248D6FDFED2C108DF9B0F646566E0AAE0D0D4D
77FCB280BE8D374A8D48A10B2713DFD32DEABA293EEC35CEAE3A4DF6387E331E
218D5F240493CC0ECE6C41F088C512C5F981F4F489B019543027012A1A987D9A
18E0B8548BF1F4A4E883270FCB6DEAB6E96B11C1B1170848A352564038A6AD59
5A6AD78FA30EAE7EFFA9292CFE1B1C5A0BEEC5DEE6B5B06AF6F662E3AB65F9C7
6FF5C03145D66A65F8E15527C8A3FEE8D1DE70BE04761456EE46C3449FCE088C
B4F9C36E92623DA4EFF129351A9939E73EDB3FA320A9665E9B069141355FFF59
0E1A6C4EC73B485F0F6AC61570D29CA1C5F4A651D5575E6DCD3D829B4B50920A
A9EF388931F7E4AD20920065542996D4F84A0A88388D28E8DFDEAEE1E2D1ACF2
AFA28621A3D0F7CC97070DA76E63E246E713CB83AA337341B51D993027884012
CD6571D2E7B9F1E52942383A395BD3CBB5FDE296F2845EBA534CC10C3BB20D62
419024FA61D80F73DA6AE31D9C0B590A4A6D33B587EF5150FD37FB9C6EC9D62A
B94D570B37108AEAE8127272AF0EF9A004DAC03B3BD6A085BAE190B8F5403206
E40CEF5759C34198A4CCEC75363E3B8A12F73FD04993BE7BE43871B893EC68B0
93A6B88C084C40D636A896D018BF264744D997AA53B6C20E8BD400F8D1228097
9190839FDE201B4D35A38BDB4E48A58CDB643BF558675EEAF84F33556B03807A
FE645D181C6B355186401171968ADF969D2AD35ABEAD4AF93128B45B30772EE9
FF15ED5CF5D6C671B6E951CF0DD3EB244024F3FFA56F7F2A8A64D56F9D6F55E6
E1A1E48CAAA0654561F79E7E843F12E790B5194EC50963DCCFD3D9B0BD93618F
EA85F6D038384A46B80AA7C62F4D4672AD29489A6A6C35E56ABCA010EA42D851
B0ECB94761466385BA33D4CE039D9EF5AB1B9F715FAD5FB3CBED4510A58CA53F
FE854C1CC6D3B2EE973F231E090EAB6ECA1065A2574C6D2B60CA22FDA0F3F2BC
B1A5601B0E16B5B5C9A7E5625C8BBAFA72EF443F238043F57CE4D027303A117F
2518F15447AB41CE749CF88F619408E1CD3306707631F5C61331614F04F53FAA
A5F4F633F03C0811B76FBF99500EA114C297746AD019DF79113433FB1BA4431C
FAF100150281E9E6CDDFEC164E1FC8AC745885320D5F01BC3C8BA16210B5DC3A
94050B0215C8C1C8478BB74B13FB3F58971764071822B0E1E5057DC83658812B
723CAE2654C37C4ACE832F6F558C23A311B276017CBAE6AD0BAD4CB0D69F9E80
5385B251F6830728A6B2126EC9DB901C18AC3F59810D8D73EE05575CEC6B5F3F
4D2EBF1CCC249F63129FF18F9BF6FC7DFD79F0FC5566FA1A010ABCB5C57650F2
C50CB01D5D3349B6F8689CDB9106C84874A0E8B0D460C9AF05F550F6FFB2C237
7D988627BF757E7E9C08D24976FAE6A3D6F812F1572DBADC6B61284CF07D77C5
EDD9D1F90F1010636583262B5DFCF5570C05C56F26EA43F5FB5AC7CE2469780D
9F217F544A9C97939D4B47521FE792BF66A502041FD9E474C442D4BEA662E8F9
35DAC82BE007762E86C642CE7494784E254D023168073EB8F658D240B0FF5FF9
71C03ADCA4FF47FE106C045BDF3582777187F8E149709C486F65DEDFF4D9869F
35957960BDD92EA428700CEC2EF2B8A772A358E88242C2AB3CB3815EC894C93C
62CBD393EEBA487955EA158E766B1EDAD68DAD6C1C9A9D92F556B279D6C4F030
382D0B222DFB5F1C51C50E316D7D4BBA8A6A9ABBE476ADEC30FC0662B3A2D36E
CFD6DE813A109DCED23C2522372FAD0B1372880BB805DE0784259BB95236EDA7
B32848FF2991609D7DAF13833C2CDCC26FDFF5AF42F857667EFB3945601F62D2
1C895661E9815DA0DD6E792CCDE5580655C09264EEA56C7D3DDA57296BAD7AAD
4B07B301BE5461107EC0293FE7A368DD5AF0D135486501FD66007A5B0E360136
BAE963C14E94A8B0A584B1E63275F54D4713B276350666B500DE9E9245943A23
AC059CC56CB6937D2B578827DB642AB35C26F1A4EADCBFA64C8DA1D19209D317
2FDB4441374462757E3FCAA10B18DD1FAD5C658738E11A4DCEEF628191EB61F3
3D3C62FBF4C196F0D23DF9C42C5B615366EA877F125A97D9056C11B56D50049F
B4B0DA84E911B837F6B35FE2577A52EF76A2754EABA8A055F8A2E3921516B063
06791487E11CFF70DDFF49641FFCF4CE9DA3E5E00BA7C291C34BCCF02BF6F810
E0B1B6269E9208E6C7752371B907706DF335ABF3AB792BB9F15B163421F4BB98
11780BB51D61C0887ABF40A3E3C4B5B48CCC400F858D0E1E0AAFB45971322C5D
65A21BB2FA2EABFBBF8E54E3A0903489ABB6B2EB9F56CBB09E8AC11FBD0EE163
A19F76064EB52248558CCB50410BDBEDF24E0FBBB8F03F2400A957977D54B265
D3934DCB0A2AAA2A87A57D5BFA308354402F30C91C8DA64009D30E2EC51BC55D
C6381EF844EAFDDEFAF05C9DCA343FC303953DF0AB4E3625C85EF6A526F368EA
6545A12EA6637D2D2A95344A9BC70FD0F84290AC416F9BD88F8D73DBF7645E6B
DAFFDA47D7A9BD0F744662502FF7CF1335D2119434B7411166A2D8ADA019B19A
58BC42593055CC0CD4C3AEF2ECA8B67B7A9ECFF8557E4EA73AEBEF22A27A4FBA
E5079E1DD394EAB079DD75BA7BBCB3EBB43063EF22867A395FD76C3C5546AF0A
80944450322D88F35AD5148C1752F5CB20F0579C866039493961FBBB781F52D1
19BDE218B4BC75DE5FAF7616A527BAD6E0762A3DD334D594636AFCCF77AFC723
2792F6EB788BD64E8BEDFF8920DDFAA594184C07364A54D96E26B505DD7CF17D
EBE9875DAD88979F689BA9838941BD0D217B646F15F9FA8D4571438F95EC2B87
D2EDD0603FEC6969F4D306ECCF60F9515090CBF63F3769CF547F699C41BD569B
DEF787A57DB7D9D99C25D2A739CD4219F1569BED20CC901B559542FF24935D89
4D1EB9394B9474104E121B23C3CFFA06869BE3DCEE92D7D4614831FE817766C3
9D8751AE20BBB19FA795F3E0B848DA9F9B70C090C45D54F0B181F64FB78E4F57
302DA3A72A4BDAF7BC81CE308B5F01FB7C805D461A53B6138825BFA35757674B
9AEE905E380647FF59C0B9B8B1478DD8235E255167231B9F444D425C953B0662
BC22B31B8D73B455D5F5B3CC44FDDF8B24CB61D64B45D0DE21735AADE8220A92
85FEC97B6EC73885A45A27C3AA07D526304B9D885DCC4BDA343188631521D313
C9AB7A56981FE7C93C13A869F77891199FAE42641312DCAC1BB38767CA58D7BC
4A77333DC301AD1364220B21BEF69A01F8EFAA980AFDE0691BE6BF5D2E463B4D
AC464AC74CE2E7D7E480EFBDC54955C136778A6E12A5B86B8D0E427FD3D2A997
7D9AA2B640F76B1C27152ABB5692802279A8DD2AEC3D2E6C357F99F3A6371C67
1D6471E07D4BDA057A6834ED18CBA0E05B72BBAA965B815AF0381FA68F846242
65AF7A96E969ABBC50B50E2C23286056252C6A4B754DB42BBFD6B57F5FCB624D
7391AA1528FFACC78766B6696BAEA4EA9BE0C9BCE53DE31473E7A3F4B92205A6
E785C57C50915F0877BFF5391A2DC74AD76A4CF444FDE4009B65A3E52CCA4C98
92A53DBD82DA99BF02C72BA3A5BEAF1396C229823B12B8B661F668D9EF10584B
B7718EBA006C8F61A7F91B1049A640D0A844FD94857328C3D31C731BF98C82B7
B2C991E35B1B8CDA0060DA1031F87FBFC1F837D3AF8572513A4D927DB49F85C9
3DEED7A6740AEF9F3700EEC3B508709EB2B3D966D17BF0C28AF4438DA27625CF
F7918A3E4B647DD782CA7D2C6F255944159DC2B9DBD2153C7E9E1A580B98DA5A
410F0544D43ED930ACEE1CF8EA59DB27B1846574E518B409A1133402A91FF843
A24F06B6054826628770DB76EEB623C7AA87750A5B83D094FE18D5D36F60215F
76D6F3CF2A457CB6E8336C5D87F9C357CA8E8A756E0C4D83D6CD4F7C24E2274F
0C6F47911D4E531CFBA7B82825108C1F4C9E94F7501B79664A1B58BF77AF2475
428157ACB65152F3B693C4FBEFCBA628B45ECADAB07E2414EC31D303B473C489
954425132D2F7D3C4D357C3A01EFDC1053F1F74F056F369EFA14479D731F8301
0EAAE8E5E252C1F391ACFBEC18E45E6D967E1BDD879046DA4FADD2BA7DFBD9E0
2A890A993590CC8197AB67C04BEDC5344C69689EEE038A1D1AE0BFE94DB250A4
9D79C06ECF0E4D34396C4363CC5F1B57C2CB3947CB8378EC1DF6C0DE5224FE99
2AE7CB9A19FED0B98D3D0E73D2F3647FAC85FFDFDB8195BEF10B7AE13E3966FD
4C91C17E5F8798E494016703044C93E1E8BEF57589BBCEF0C2F89C18081D0C4F
17FCAE70605CC9D01CB2D45863D2EB04206C24031B40158EBF6FAD25D88E48A3
D2B0F68EEB1CBF542027FC89E5B8EA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 161 /minus put
dup 178 /bullet put
dup 197 /plus put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707DD8E695DFCB39
B34B86F032A4A6B240502DB75B72BE9D700A58634D640FF97B71DAFB8AB659B1
338FEC8E10EF40D16AA1097E862F3B82461B9DB20AA43C33DEB7513BA34D41DF
2A3B058E6379ABC7183DD8BAC1B004089344FE6556D5909A4DA03FE53F103C04
73AA2FB67471827742C5F43C83DD0E3A1A82559332C8ACDF9D55921A4AF2DD03
B1C82463B78B056416E9DF2DB2E2FC276A91D3435E23F70822F567B8DF237C94
90A0DCFC1754B06080E995E44C02C88D0D6B9667643402743CABEF449D961AEF
27E4F3BCEE2BCFC512B836812AB825DD6658325DD475135F03B9BA24042DEE6F
5F6A214A96F5AAF4AE23BC6966319AE0C7BDDD9A7BEF1E819016A669F1A237CC
FCEF09CA45F8BE291C1F9CA30907AB95C56CD933CFA8131671B7803C88196CF6
D3C509FBF7F0FCEF77D1C6CBCA8F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1346
A36409DDF1CB5F2717A856F22CFCA557C44344621F257B3F443020DC0D621F2A
B5E8377891A7FF97F1B6024C43D7F079AD9A0A6ADD85EF5710DF2876A1987D3E
76BC10458B15997449A6716022CB6A6BD8D8DF19889B0FE75B3D9BC2876E901F
351A2FD0CEC5FEF495D9F2B2A8F31FF0CED35FA777DAC152C3889C93213E92E5
5372C05E1C5D85F9DB99B3370FC6AF5840026DA6BF2414B32F4558E0B83246F3
E8A9827B3F9E9EC28346E30F68F8CF42065D3E0B2A22AFCE86CEE89AD1852FE7
B5746BDC64C1D3C98F98210C5DCBFFE8F2DB95AC2ADBB4C2422A3B90C01A3A17
39901EFA66F9A88930A0F1D6DD0F091E00982F4FEAE71D9931AB1344CC562C38
E22A5EDF409A3EEB65A549EA5111F5BD91147C96C42BAEC08237395F5217DF52
00D6818ED1977E359D00102E3952921284B77F91D514DC4D80396DF16652B07A
1D5F94336155A8FAFF09FD3941D9F43CEAE993F5295713F38BAEE47502E92CBC
A98256C02CD0A91EF121B26FB2D41C012CDEFE9BEE87EBEC852E6D4B219D0192
700ACAD8E57393AB68EC0E9196866C0504DCAE2E92BFBA593CE3498EE90CDDD2
81310B9F706A8642FF9A3DA75EB092A9E9B46C16B14A018B8109A42B37BDFF67
A1828B6BBA85A4BF6A3133DA1537C79ED4E2CA22AC03C23C48CCFA8245CCE484
8D2B051BBC7C5B7D4075351FCA265D917CA68175A65651441765E1238AC2B8EB
C76E45900A7418A8E967F6359FAC16B6E3061BB5D1D335AD5950D7BF0974F598
2479AA6AA248B85EC0E63DB3AECF662C4E1596794CC369C4183F6670B3CE539A
BA4B6E3E3C3E693659AB24DFF6BC7A326B9348059D5B3781A7A6A992B311E898
69BE321AC33F8762BA6ECCFBC849C7426B162C392D23E0CB5330D36CB06A0CF7
9EEA2545EA843F7FCB8DF5635F9B81C460C134D080C501D3EA1B5A6C6EF7F1CB
5FD9AB700B6CCDDFC28FB32AF401E54EC5ECE9D588361E23740B6BCA5C779442
0B43FC862C057D52FBD072627D022A81934CE5B9A5BED35DEE30BD495880B7A9
39433FE00D93528FDE8A0B8845A09E477A7E2E692C9416BC5E7F6CC3A816BA3F
BA00C5D1076D3C741F1377FA7A0B3BE55528267D5EBE398C0AAE1F746B4F1261
4E0DF155E5C3B91DF9A4D3129C2DFE42BB4DA5B13327538D63725ED7106CB266
20B0749DBFB0C1280BC971741D4685A1B6CAC7BC7B58E6E05E7A93C1493DBA2E
EAC14E0C831B2677C41218AF6D2550FAD7630471F65657F80704D8A4D1C54987
888026E3115CDBB72C73D7578BCE896382BB4085BFC3F64E52F280D228E2524B
171BBBBAA5CD32AA0E6BD57798F0A499F4FC6B3FFE84E62586D55D816D48E7BA
21E4A1F7035F77E8E58AF5B216890478691ABC869432C6AE0A488FA258BA94AD
A1DE64CD94A8D01276AE06E844D33992B77FD22A266E3C7AE3B1291EABC3419C
32166C61126E891DEFC1DC5492A3F4F68A8E892C0F37D102BDF46E3D3D9F1710
FA293947D17AC233BC18E0BDDFFC2F2B21D098DE740430A0400E3EDDFE0C86A1
B5EE8F714479DFA2D5D275EBDE15C327A697E1C3E59332D115F6E07D51CFF950
270DC1AB0922C46F888137F1D612B204BE8035D3D6878F70E5692E9E99F6AD40
5917758614C9A471A5504E98EF2D52D9EEC7DA689E6BEB64D096A0EF8E6B3A01
181604BF43CC70E24CC6B60E19A43C7D05ABFF690DC8AFCF5D4BA8859B058A8C
6BA92B95B480BCF317E49DBC2B8755E4840EEE18ABF176B819E13BEFA453CDCB
028B1E453B760999D6E058EC5BEC0EEC3AEC666651DB47426813AD7EA8C808D5
0EE3FB531946F5E38D81C97A59F48634BB897864E59CE6F45DE79A58BEF6E872
3AFD0DBE639D987B94B70D0A291AD3EE2DEB7F8A13EFAE8EE9C023C9E3386A3E
312892B18CC51F7B0C34B0A0DAE69C60E02FE96E8943A4B01D70A929296CC33A
0D91791B44B4BB9CA8B2F48FD7E2F9DF87D25A25842E6EB0F0EC43C906F7063F
245227004BC974F03B7C7D2452CE3A8EECD179D8120F9BC25CDE6862DE302E20
A88B91EAF093D7AC1107B5E8910CD441B2C4BD618B14E85CDE29B2BB843A36E1
EB43D4F7E8A49CCB78273C35B7FE199645598181CC2A1CBD0471A36FEECBB23E
4F55B32C486618008096354ED262B00B6792B06B1D58E6044EAFD7F6DB784011
16CFB57B9BF82A2F48A11C10C9CAA10C1B4E4DC6EEEEBA8BA073EE6DF4229DF2
08FEA5A468EC0E9196866C0504DCAE2E92BFBA593CE34FB688BB2FE7D0FB10CB
F589BCA0C6D98AF167692DC4F2005BC07CB78C50316C61B6CCCD39F92BCB784F
4DAE8979632308CE6072760DF478A7BD6CAB57C0F6A621710F2457EA58E510BA
998726FCFA82A5226557224A97DDF88F35E1F428E90B34C83623F21EDA81D0F7
EA29949F213EB8A9E163BF413466B5488A8CF6AAC93DF610C6F3EA9796A3707F
23BC013EC974B4451FFC13792BF85987B132609EF1C4AF14CF08D8FAB4C50A4F
C59C2F3F5D0FBA343D16C59194FFB229C405D11830F0D9F7BCA866DC63619D09
080ACE05144053B30A15AACBEE1178398C4DFC9A23DA45C25091EF2A7E3D6BBC
DA6525C35B175A6EE3E4C08FA189AFC62E894083654116773DE95367E9223097
5D13EB0DFA577FA49E5C06795D12B22C3CAEC24A9B9542360C638A4781E849DA
851246B1364E9B5A0ED07E89110A0E44FD03B20F96993766730D24A7EE8CEA7E
94661D3F020C57BC179F11317D2B1B5868F5CEF063234FDCC24EA63876BB3F3C
D0619DD716741E1EFF594D6D3BE7FE403F91F268ED4F0B293814C37CBD273486
3DD88244E4C5A3C392E36BE9AB6FDA5202AAA2DC4CF05EF8C526A1042B12A4FC
94B345621C7712C3A648AFA5C986E174F0E5AC114DBD8FD4AC71B32AC7974E2D
60B90138CAAE75F60D2EEA35928231B89AE390FB48D8B30E5B25C84E675EB996
72FAFC1F9407287397AF3300D4839679354CDA6C8CC50B162BA061AA153AEFA7
2AF8B90F0FFE55C2DC548E1F3AC157DC1B5C85825B7FA0086AA8FB60C7886874
5D4B75337CD5D84E9A18DAF29B8996EB94C76918ECFDACD0FF2FA9E7056F251C
78F3B6861BC85CEEC6729E3D9C4903ACBCBF0029B8C7B6CF7D2EAABC3FF06681
F1F3BFA3A6CB5818D72CDDA2331E185FF990530CE6880478B42E7C08210E5CA3
B7CA2508355C55F0FF29A003A56E3D4909081BBEA28CFE4BF80988B57C196497
0463138DBE85E4FFBD123A0C427D588B3ED9BB66C0D530ABE8C36492E99AED01
2E1D8F2129584CFA382CF1FEB2955A6054DC90136AAB81E636CD8B8E0A47751D
83A76428D10FB47BD315660918F5E58B6A2B3FB9242CC5B0357BB5233F3D3D40
09CDF5B0273D35883E4864F738BC3BDB4D669EB777FDA513DFA9DC7E607D2351
662379D4B42D8D19C8E1DB2ADED1774D7CF96FAAECF127B1ADC31A3AC95BCE14
83052A09809FEFE59FDA83BB487D799F17A2B583A9780ACB75A7BCC585BDEA19
30C0EA0DF460C5759F304384CB5E88D9E39C2AD455C316AABF662377B406F5A9
586A73B196B265535199A81F8BCEA1B152CEEF8AE58083E828465550837E57FC
54EFC06F76C5201139273FE87CE5ACE30B6F5C58D9FB6C2AC28C5BDAB3FC0438
504D9FA3DEEBE8AFEEDE9F80D4DDA43AADF7BCB30C2777E107A45C0E13EEB46C
DFB5424CADA9CB6DC92F990B1354B69718861FD9B633FD5C536A14CD27171877
7AE400E6F51E8EFD57588532474D9EA9152750B09EB1DAE1D7A8D30EA43FC289
7183D70591A91AF1E97E5A4836375DC27A9DADF9716441C3D988BCD8C424624B
278C50CE2CDA6A11083B89C86D819DF9554C1930B19C8C9A200FCF6882335875
E90BB3F842BD3D3909807FDD22D99004BB24AE6E3B639DDE0013AC5E8C97D02F
821F56F279FEEA83D4D635B30588C12A71DAE2B1AB51D11BAE3147D1DAC77D33
CA6043E7D20B08126739789CF8F0B37B972FF957469563E21679120CC4D643A5
0DB2CDF5D3AA968FD2BC7F2F168572F20EF1C3CDCA822F7C21F5F8BCA8559C58
B4A4960FCE4C041E658B5733890EC3E53B7ACE75E201A5360FED33DD9AF6ED75
A14E22E4FCD3AD966455599EA10799477D1CEE7FB6DC38FDFC9B638E677A4FC2
5D40D379822410DC600F67AA3986D0E5EB1244331BD3F3D0D13EE0E72851C174
C683199B7DB3ACF4427FF597DA5811CD456AD693295AE4BE5DB7725A36C427F7
A73A9BCF43682A5C0C83A57007B59FD003AE5E0B255203545C01B0BC3BE8D512
0B6C57DBD51637C51A6DE156D38BE5D68D55D992006C528F6A5D715DB8F3C692
932FD6EA76A24DE53B17731753936BF8271243C7E347570AD63E34BC3E951B60
BDCB4F5A32031AF9F51F34BDD076DFD270335F49F9F3C450FD2CC53E9D6F4DC4
A4E0C28AD48017AC45069AFDE6A9CEBCC633C1380701745BEDC652C62236800D
C214614FC182A83CA5F5C34F34E8D062223E096FEF8D05B296152A7BAAC65D3E
CCA2898CB299094BD4377D96A3F7CBBAAD241AD247BD97FF27763639E7EB3536
1A5F467481B84C3CFF4F4EA2A0FE9E810D3A46408FC6CCD3C850365138869D66
6EC3EC5F7E6C7B7362B3F57FFFB003F68F0697FB05CC80A5AF642FCA94CA69B9
FDDD26CFF7B660B41F65798D27DB7AF787198962196657C6B0CAB6C9CC5164A7
370B82B29C8C29BC9619EB4D84FEF021D5731F0E395A6874B67FDE582428ECD4
340FEC1FFFD1DB7157B218D45E9E8FC7D857981FF9642CBE066DEA5EB5A1FB85
4406E95574D0F6B731BBC4B3B42221FA90085DDE5E2458586EC7A926C8FEA77E
A7A810C6B426EF147ADFA05ABEFD24902F5F70BED7DA446A08AB6D7308997337
67E4740EF72E3B9E964F6762BDC096004C09C4DB56ED987D5C4CEAB19CA0C3B7
F332EF9665AADA2FE1099FBF65F0E90DCB8763834BA239CB826F40A532E3420E
F5A7A35C4F04DFDF783B55A6B06D7256EBE0DC9926D909F8CEB3598648D33202
0D2A20505014FF9321E4FE8706CD4D4C7937F67805071F29788FAF24F606417A
7E2E692C9416BC5E7F6CC3A816BA3FBA00C7B5F93139EA4AA2298FB39CD6BB24
9436A376E0D29BAC49A8758508AFC0B276424F50CB2AB40AE9F9B3577A2A625A
6362D91D90CBACD280884A54DD7AD6927461B8D578919880FC21FEC40F4059F0
DBBA440916201307DFB2F93B3ADFF008BD50F3A725777818CD73650DDD7BEB1A
C1693D1A305823F46DA72848745C4BAF998C4E46254FA97F8043CBFAD9A38836
40ABAF6B758E99CE7C9B4AFF1F406733E7B606C3C998E63FA1B386AEB29222A9
68110A03208A81CC1D242A501B1BBDCF21184D4CFF536C6555E53868C60A0E5E
523AFCCA6A027708E922700596E2853A992215C3A82BFDB44E5C5034B8046E69
C04ADD2B18096B90E6B0497E4A4F0E7E624BB8CD1C47E25F5FABE8881A2221E3
430AF364080BBE3DA967ECEAC8EE88C88339108F0636CB074DB3A8AB0DC9A6C9
F3BF0F340B3C46DFB046742F74443FA8F7274C6745132524C31BE634F1F770E2
089F5DA73EA906FB20E0221B84423F47BF7D3C14CA7699BD357A1EB557F58433
27B1F36013089D45A24617F38174287AAF17172DCF94A078C5ECD327514A4394
7F0EE6E8E1797D73117A591C138B433EC4619C3924D51A184471A81ED724A82E
DCEDCE50AF4F5216FAD0462B8EE6A098F35C5E253330B79F4B7217D38C76F5B3
11A69081F7DEC393791CC72A66E4253396F0E34A62E0EB8F847B0D8F056EA7E0
6D58853B97379AE23EAA6317BE98BF609C3221BD62CB3E992BC0308D173F64C1
6289D9CE39661221BA2D0ABEFD1910C5F90752F4434E61434F086F3824EE24E9
191A97E3E5F0B879947FEF20685F2141874EDFFD6835997B7BD8E0D6A709E01C
229EDC720460B9F702DADB5199D736F85D789B5DD452A743D563AF393FFAB924
6367A784AF0AFBC33F2E0A5C9A63E3118EEB9CB0BCE1EE6149F64F24054B3766
152E02C4A7825AF4865C8F885AD2998C6920FACFBB6FEF2A0BF60B0FB5375474
6815D55F0490CC20FE17747DF71821ED9831ABBD69502F7E922C5B60CC316862
866783419FDFECC803FBB73C1846FF96CA88502E7ED6D1E5BDAD28D36FCAADD3
CA5E7FC82E231C1CC5095F890209AFECA6DC80747A3F33124B63BFEB5B4C4F92
1FF32AE2039CE16E1FD5D6A3AA4917F260F264E859DF617C1AF6102197A1FA79
846885DFFE469CFAD0734700C79866BCD14C2CA05493E8FE4A654887A8C8F805
23FADF46DA47A779AA11E3607832D0ECA2AEBF9FA3C25714AFF9E5F5199F508E
B12237E1E50D66EB10DD032FAC47231E7B1001997555985B11FB12B6D381D8BF
8D37BE1992CEACED851E91B9C528E56FAD54442E1D1850B773B9AEE7ED4696AA
3E108E4FCA5C7FD734F2C668D4D0759AC9CA50B2FBCD9B1D860CAB13D79E7BE2
E21E4F330FF9EAB6BAACB3668621B874864CA384C3B805A60ED484CC7B2188A2
93F1A256F04E7149811100B29BD22F26E3C00A8F83339418B87F4D3D55A4C32E
81AE692C5AD241314FA52F00309168020D3E3FF5E12E9A87FF6EEA3DB2AFF09B
41F5D0E5EAF6C6D3C3CBB32CD8BF51E4F77D6F54DCB93027CFD435FDFED30C3B
8744042847EC3324EA98E9E9BB4B8AC82338EE843BD07D220998ADE9AF166C07
79662E0AC69D8AF4AECD6D198EBA14D63F5571429BFE369C8399D02004227B1F
17190B640F80EC4A178DA0E3155DBA2138EEF2627BAFE01691F7B90241CFD532
05BACD4A5E1E3F48263C27AF5E3FA927892557DA18CD3D942781EBE5D7C8FE54
C9A6DE178D997C4BA8B466DF0E62094F7BE87C9539654639A6BEF1CE581280B6
DBA5910D15EE572BDA14D8BDEDE3A421F0C5320E184B95713A424E5B5FD274BF
C4A5C7614DF95308A976BDCD49275E37647F60685A0D9C56CEFF1063C118D865
9BC3F1817D7FA008F7C2CD72FE83AB5351D68CC8C5EE6415608A59A7F2F17924
DF6AB9ED7C85249F15426B79FB10B4DAB8CAC5EBDC4D782A37A121F836BA389E
26118A78FA649D6626B18FFA40B336DE45DEB8BFD9AFE62E5270E90C727DB9D6
B04E19EBFAB8024234A31AA8E3D18DC081E29A4DE9D9EDD0C81B675E89DE74BE
49BBE17AA5F20F5078AFE556D1067F2D174A0BCDBF4B82DF69318790CC765CA3
463989ED52D22089B469B1D220EA384D74D11FA06760D9FEE55539EFE3CC6C99
2262C9467B96A3F53BA440784E4F5448CCC51E46EADAA4894925D73396C9254B
8BF11D28A3B653BEA4F32284D170419B1D9DB02DCC30A54D6DDABDB27CB553AD
3DFD01CAEBA561C26A8152A3119C6D09C32539B35D0CFDA57CEF6889D49A6986
A70B58F9E09C31FCBFF0FAF1D2CAA3E46738862E3A6292263F6B7C2D9B8ED5DD
6DF4D93778E6A5C24A65BD957868A707772889790F29C0EC1F76DA5EB1DB3B7E
E417975C485FC1C062359C4A0929163EBCB738B16CFB4D85F97996DB64771B0B
6E1EE0AD25220060FE23E1DC7C88352B01FA507B5B38750616F6E8DEBA45DD56
BCF84477CC5FC14D370DEBB9335B312667BB0E61D844E3FF68AC9F1A7CDD50F5
9FBC81AC819FCD5879179C6076921389F4BFD3C5CB53AAB37656B54DC757EB0E
B57D777342E80DCA6C6957C879318EA43B7CC317D83D257269593710DE3AD77F
1D2FD87A0501A4A39A2FAC64065C9D8C0C3B56FC7A0D00935B0E15BE2901A683
3827FEF83A6F9BB6A0C8F69CD92B3D78706987CA6A110C95C4B635956421EB00
D5E9C815EA54E08AF6BE24D3AE5E86B704A18665F01C9A56D562D87BB5F1EDF3
8B0B66F3DF8E9C6871F23DD7EC4B6B172972F9DE1CB371BA74F7066C2B9C5DF6
3FEED7BD0DDCE24CBB27AC19C9DA1DF9A19F120360F90CD02F460E2C2F258985
CA35A5C93CDA64C769B2B0240548802256FCD9BF6727442EDAB4BC704A74E60F
AB2B353613AF307D9B28FE67F2B77ED3BF52A65C42038E49E746ADEDF1E571F9
A7DC1CBADE14F9A7CE452BF004EF42F15B31A13AC4C915930E50B8F136B4D6DA
F664C359B0E18B8063648644B3DE1875094540AE7C478012AD0E9B55714ECA2A
04B37AC1A4593DCA50110C451EEE43BC28571A882ABD5EF4D6491F1687112246
57B9F70A467513AF9FD96722944E486E589CCC3282DC9ED643E5B8A20763AF65
9645AFDE41AD69C5DD67DB8D3F95B1C8BA081A13A9A2F745B2FABF020F329696
5A77C60EF7547F606EBB5A68A8E62C329542DE28A6B725F7586246F718DA43EA
F7150B277BA7E4368EFC66F4434C9471B5C94E217FD9F94D426BFF43326BEA22
52C98DB8BA013163841BD7549940FE0DA39E0B7252D682D46F636F6AFA91CBAD
6B782CD733433079208F890905F189EB8450BEB3B85A20209EEAFF0FE00E1815
1339B33BF9F6BC6EF907C65DC5B0F019645FCC18AB25C8729019347431D99C1D
56780299EDD00C19EC823CC779CDBF7EB48BF91863E0B398069545915ED66DBE
887273AEEDE2F9A244BA8AB2FBF832F98304D32B2B2B37E4E05CF6415076C1DF
126BB59146868A9B1B40B382357CCC30F90F786D59B7D4A341A16271E01D265C
F7F5717BADAB92EEC15EC54362218720C44547F1A7323A237BD795248E737BF2
DB6FE197016B1A052CCFF97C65DDAEE2935DDD19B8262822D3FDF874096FE41D
08AE1DAAA577047022FFC406E39B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C59B2FC0611E1783B4008E87AF14709204F1F
89B9D7B4CDA3AB6D73C59F9482ABAF988D76005D0FBA343D16CC6B70A09514B4
ECF3830287F70A114EE3EC397AF9D0BAF96FCDF07DF4068BC6D37DA18433DB11
57390C4220A12DCD244B0AF7DEB42146446CE11979196DF6FB2F2DD2009DE250
50C8789E30CA65A134C5633F27D18FA3864E791EA66B2C531F66D1F0F8A3D997
58B704F5CA15C2FF5D2AB98C66063FBE084A2DECAA2BB203E72274964394508E
EDB8288CA707E7FA1EE5D115DDF587BAB7D33126388C77C8B304AA332DA8A555
6CF02FE0D3CF24F559C515EF85C7461E08A9B3D7A076AA838923AB3FC3EEC3A7
27857F176FC19609A1BA23D34FDC16F7CAFAF6ED7DE6AAE26AF1BD5E5F885A92
D9EF6D9F73B1DFBC1D2687F67ABEE3A6F5357D29234A96C1040C62837132C0C0
109861075C0BF8D42B0CD660A9D67E9BD70AB9C6BAF7DACADC27DD787F9187B6
94E813C375408BD04453B4590919873752B5B5B42C4E19F7190DE0D1A395E7BA
2F0748CE7EA16B5EC546A8CD9E1D6F2A5F3DC8E9097D010D44AD4A1395D02B04
2852568E80758353BB0793695467D217777DB7421D3CF74AF56B3B0737ABEC1D
2B5226E7ED8A11F7C8B663A93768636C184CFD0527FE2C6707A7432B8F438A4C
EAAB891B838A556A06CC4B9458B742A74542590ED2A8F4C9CB2F58243186F16B
2710643FE600A152C1B8FA3CB2C5C1CE3671917738A3563A50936F5EA8CB6531
E1ECB99AF420ED95E576C362147BE0934E71BB42FA21CD2B93CE78FF663FB0CB
FD3D5BE7A437F1C6D3BFE19784B1D38827E563FFC1F70466ADCA85FACD754DD2
66ACBAF7C155F3046ADA1A4B0CA7B701B384FE400181F268A192B133D39C1059
0C070EC1EB19849C76D040B050721300D164B017EC6A8CB5294CF8B3C82AB573
DF6352E118F32B465E201394BF94FF3C889FBB191A0280B7BBDB2AC67C7F62C0
F6741A23775E3A302E744F1351E0ABC6418B8E9E3162B9BA949C4F6CD5621A49
7C042921C72B8C5204D40496857FE6830B885C8EF7E16BEBED01CD6D1A21F74E
3C696DDC7CC881A1998FD53CC14CA3A0E3A68977E3AF122BB37AEEDBB967CA58
76B77895975FD69E29B655EFC1D043C78972B31491F9B934940BD3D2E2DF45FD
193E6EF5CA0B30C220A2D9DBFE8A45BC26B344E7ECCD28B9BD09D47C0ACEABD4
CD79A5A03BB474788AA95A9F9F25253FEEE5F1A8ECE52E3499476A77A0972793
126EE873EC0462EE62640A57C60446AE6AFE07A1C7E4A424C61E77929A8FC957
3243CCF1E496D5D556455F2EE0482A28D8479FAB51DD43B3A7B59959B6F30A79
A86F659233EB0063C3069AA69C73E486F0EF584652EDF78C8D429BEA61684FE7
0A0D67D91EF9338F9912E781D1C316144203025806340E77FD5589D5B59FAD8D
B7B59D87C6C801B144AF82BBFEEFEBB92545F55CBCA5AE1080442177468B4A69
D0BC3099ABCB53E023CB2814505DD566CD2A622865663CC0B9F3756FE0B7777F
E8DD61DADD7A1FD81DD3A48C7190B6169947EAA7B4E3695624BB3C1C98DB4170
86B017E682D158DB658FDFE1E9414264C06FBC55F08DC2300275BBE7B33BF4A2
8BEC248152714D3DD291F5D1D67B08A57E6906A39501D8DD47B032D992BC43A1
68F8D7CB309B01EFA3A2CBD21CD3A62A2C21D687C7ADCBAAB2029D54B3665371
2BD7B63E69310AC56A8C17B6F7B3D53C0B6D9AB9DF15F1DFBEB80E041DA9BC4E
0BDBECE4A7CEFADC06F3CF98526CB7FC976E0DBC638C18325B62461313032472
2FC8B423179B82D2869FCF0F21024564D9AEF157B0E3003F685569367A334E3A
F56B9279364FB847AB1BA87D618A93669B9E9683EB7E6C6C598BBB6E76A1E5D5
9B630467027EC1E27B8C4806C61442FFF554F558FC5E78EE073EE3098DFBFA32
94E9F0EB58EF516B4535D34E950BEE93FCCD46CD6181C423CF6EDC9054ABCDFE
778EE5993AB3337B2359B0950BE96B57B902A1F2AB6AFC3E798F3B2663D56441
2E333C204382D9955F9061A59CA7AA6FFFF20ABC00E63A959B199685284FE6A4
E3AEA8387E49B8F527B94F3272FFB19054CF4917BC66B370C7BFE8107EEAE3AF
ECF52C6AEA4947D6E063DA919406EE939253743AE6AB93AF9AA5E69F79AC910C
6EC895099BDBA2904B25E8EAC56ADB58FB2A1C147FB5FC126C485491EC8DEA4F
9031F861446C384D09CD8FCB6A166F8FF68B24C0472F25D5E2D9B21906B6E84E
38C5B3736B42A01C8B3074060D28AC946EFC2DA3C3D52AC961071ADC75644346
74124A5B324CD5B276B21F6FEDFFE39AAA17A391A669D150DECA01BB880BBD2F
C5B5A6D99BED9E43439B6A865FE0051A73140070B3B8544004EE90950C100F97
BEB06FCA556B801E75A2276EB60F390F041E8D6A4DABDFCB2969307EB06A04C9
D3D036F51471F87F0F9BF6213A632E31094A126223B9F6E394BE1C4022E9E0F2
56E9999CD3D66C5068C7E5573AECFC6DBC730363ED8708B1358C0590A2A6EE25
428AB49A6E98ECDDCCC2E9AACBACF2C41CF57C40DDA4668FF3ED3831D0C9B9D6
45AE0E4B2A4750F99F741F1C40D357C61E7647105DDD8A0E5014E9C26735E5C9
9CF62A7D3F6ABD3DFE996B50DEA57563E4D5F5DA3AFE742830CBFAD2664465AE
B4BD0F547DC619C7D0D0C394EEF61AD3F4E5265EF536CA71E9588664FA6EF5F8
4576E99618A986041FE8493DE480A4F4AD97F11BFE38A7AF80E6A8BD89D57201
85846B15647ED6C5EE5714245B9CE18562EB603E56D0ECA75DFC7672CE0C0BDF
313C04B0ABFA162C9AEAA171EC1B4F3D1A3B5E5DC9CE5036F71DAB29A3A68B0C
3E5B4FFB3F4B8F48032EDD1E678698CFE6DFF2E4BC943085D4897C5889E7C231
43D132FC9354F29262C5114B03AA65E774921705FD9690C2AFC6067937135C80
EC09DBEBF0C9E9553B3535E17C888F6A3BDBCF56B4E010D23133E2FBB02118A0
55DB5692C478844B8623A220F662247DC50966B9A28281CEE03A995FD0396ED1
68B99909C61AEE0B67BC442EFA87550F4D05FCEF1F9B81B0C5CFDBD88089F233
4EBEE475B9B4E8D2923FC57FB4BC70164C46AC281DCE4A0063B255DF301F13A4
C1BDB009B498E079DC128323C7D4FEBA686847B529B76529B4813D7C75649675
7D88CC2B519493C9E4FCF8229932DC5AB0CCE4EA77B0BFD0746AFB81B81A4D42
217AE4D6D6D2C4E3CF65BB0044F0D6FFF9B92C2E8A6438AAA7F469E65339B1BF
4C4D4D9527428C6CCCF38D87FC22E3411E5E40CD2956C6222959CF508727B47B
3058B48FAAC42A033F77A19FE5E16BCA1C9CFCA825DDF90D5AA9E862E33C666E
66BF183D597934B040D6585E22861C5AB1C704CDFA38D00DD360074164C22C78
180A087B0A5E2A346F2650B1FAC116B7577DE35795F2CCA50EBB691FD1781289
145C594B20308E0DC49221C046DBC8AE4C671A9D0B93E9AB549F9802D8051E26
33B88CBA65ABE9DD20C62F79E4A3AF7B2C1BE87107ADA234C6DE77EE962B78D0
53752DBB2460985FD115A73823D4D5AAD2AC00EDE5DBDC5D31FF0179EC007D87
E6F759A29F00A683B123A0558D8F4A83D306150C17274BAAAA4573838DCF959C
9E24390DCABC59CB689D9F8CA2BFF3CB61841AF5E460F932F20649386C3C2FA6
A4C86B4A286B557000AEE5E5099FF029C90FF9AED0A35B7DDC87454C6CB74F0B
3999D0192AFF72CED9E02D9E46CB1D250EA7F97374D46DC5787604792585DFBD
DAB01FEFA533E44F41CA47083A2FA8FD823ABD21A88C7DCAF40DC986174F26E4
1F77EA29B3BA4317E8766999D14CA11E9F5F22691E5CC879F694D7ABE1C78064
A191684EE30D969A1BCD67673770FD434E5A7B06FF4D135259BE7A2B30122A74
09862BECCFE99982084F153384B33BC05A3C77ECCC036D3FD44FD95716E5AC07
6A514AB72F831766B78F3073DA91A7803E0DEDC3DACA197D504941120A2AAF93
36BC5C479507808BF601B34FD0EB54324915770A8677C28863EA63320AFC3D76
DFD31CB0235F9C108921449491C3D3C7467A1598A844666ADC003C532A377627
ED4513475D09EB09469D196EBBF5032B64DF745D4EABCD7E9EFBDCFDB925E469
B37CE1EB1D10C6F23E6CCECF27566BFFBE861D48981ECC4C92B1950A9E84BC31
7F50F373A67893FEE28E92D357DBC2F3C747B1E3F14AA6E04A1398B7099C71C2
59E3F50835A5FB2725A0D77272A20A1F7C70C6B4840F2B1B8D83EF63CFA8B28E
3947FA3B66EC125FECC354CE0EC01B82DD80BF39E55DAFCA94D0E84C7FF1EC79
2C2392B10E37D18B1F2033DF50F61ECB986B1525001E64CFD0E88BBAE45C186D
1C2356DB2D6D0EDC29B39FD107DFE7A31269E3FE0D671969AD36B40839FB6356
827BBDC9574FF061F65667FE362D21462CF5D26CDF0AEAD7D9F88AE181B6A237
473D1979C3B5A96530F14650135A0F7F275A30D2F96BDFE34D6F8F374F06C7E8
832499D6904F3C232F6626572DB26FA4F78DEC07D5975B885667997D856EF3B9
C5A52B60A35C00F1073FEBDC6FD1337E86B2582B9DDA972CF720610DBA35BE10
A4F54E8803F1F5D4CF029A6B18A512E1AC33916516C02C2A70E345B444E6AF8E
5C9A33F4D67C5048C0868EEBC3AF4D0F2E2E5FBE654065FEA5580E10DE65574A
97494A7CC4F5C8E87CF2BAE808FB17912D34199D909E077ABD5872DE4BDB0023
1392BEBA69CFD455CCAAA362D0505F2AD3CAF98097861710E5A7DF298B8C26A4
076E9DE3C7AB4AAE1C8B843BD04A72F4FB24AEFF9A0420E5F0B07D180C519916
C2A54E6B18E1CC6E4CF12D63B2D6941D3E9AD40B287CFCC4CB67BC77FF01E21E
848511D4F133C34C64E6009AFF0FD6F9A13900211F67DB232AFB37833DD53B75
B06DA555694D8FE7F7E5427F1D202DE337E74DD4026E97FF2A12FDAEBD89DEED
309524FDB648ADE91791B8A9676D82530CAF744C5F2457E7B69F58EBD8032268
3DA1B06B72A061D58125485175D5C4580517E13B3C5477DA020A9A98160B19A3
CC4B6859EF690CACE5558DB97A103553E0A7B6D939E28FA466AE82CB864AB975
C1C2526861651875946E838A9437A6D9E49F46CA39882C6B0E22118E92DDE5F2
F92341A27CB8FEE8FFF3493F875241C7D9DF0DCFF5FA6F6EE3FEB641B33A0B25
A5ACCD0185EA7249146230930CCC303901A207FAB8572443E109A1ABA8C1C1ED
F87CCB3A4A709422B96396E29C438B0CD977E6698279AD8DE10D42B7A8A3D0AE
DDF8F56B65ABA40CC1F1306D865C491EADBE137FF13443464463D5A9EDEEEB84
815F144E1EFB2D72A1A13FB288AC5233F2D5B1882439169D02359BF750510966
81B77122922A7E6616AD93D31072A4AA972BC1D9511B1C96F2AC49D129B680F5
C503C55B5C9E06969E6BC5E6D68F82F1370217E29DBF0F87E5F9CC4955B15713
E6104DCE72903010A8FE154344F677A4A1AFF042AFE03B8F51AF71C9D28E7421
D22093B0DD2619AADB222DE6846FF8AFD948C59077D2E0928A29ADA91DA1D968
D5B9D77EE75855E5E7EDA445CEE41CA2ACA7FF6B22CEF62F0BE25E36E69EDDB6
72E5CF64D75482E70985D270FFFE6F19D78FE0724EBD5B2D76CCA25EC6705996
04815E51A456D1C2635C21AFA286867A2799F1C34A49D687DD86E62670834CD8
7323DED5B483A4DB3B333A60A4146870701B78B1DAFE794114DB4FE4ADDC41C6
B203480889C782BE314681410AE5BB3AEBC348B494234F6127CFCC0C318AE9BE
A6273DF931022D46BB1A2FA3CD41CDDC2CC17EC4297D7C550F5BFFE2DEBE060D
DA6A276CA5D2D487D033EE9A47C51653FAA26A34EA9C37EA9779180AD68E00DF
5005BDCA334CD69023CA8838597F809CA8C81756274E544959B43E5893C180D1
C7CDD927EF16B633D789B59F75FBE9E9942E8E3F314FACD101161FD1EAE07711
38882D4CCFE9D7D25A90678F006C0527F178815DA13BE391E92EC656ABC0AB38
54002FDD16A3913F27F11E9AC0468296284C8091E0EE389EAA858A62BA34016C
C28AACA1C46ED0983D0F5BC713AD7C2F670BD9084DDEDA9859E0123B175689B1
124DFE3A0DEF48E5C932253AB322365BD84C547D311E035B16FAEA0A2358A5F5
B438C06EE3DDB0C87AAB530EBE650FC8CACE5584D07B47ED81BF7490DB724DF1
AC534501285318AD9521E6781272F4FA16063F32B922ACE6F06A397B5D476BB8
5AED82C6E05515ADC76DDFF02C11C1B52C95849FC82FFEDFC82C7D4B663280BD
7B6B39E7DC1FA6AB9D256FF87218F398F00D0CDB32AC8B981AE837E9ECEB19A3
5AF1481C7AACDED0B40C018E46EBE636B613CD94A42895E27C0B99E05CC81254
8DE99D8304BBDB8172FF911C1350F6A86FE3F9CA70A816607F248C6EDB020BC0
7FEE388DE90D5EA6F4C339F93EB8D51E0D1C13D02F8FB9DBB39421227C64491E
DD336C6F662F0F8AE1482313649D7A3C4864A5BFBF14DE594709502825EA5C69
166DD5179D9A91123189C68BE10D4A0AD107C511E4D997475E92899FC367C225
87FC1489B2590EF307E3EBB8A7A92180C0195637FEA7A304C5A0A66EB88EEA8F
4B7130284B6F82B8A960D5CE620827D49838B5DAD1C1E1508606CD9FC5C410AF
BBF859DAB1F20D320C673F96EA7DA81D89B2097DED7EBE2FD3922805C21AB940
CB020ED790D52417593C5106133BD9A43FB56937B23374BC6964A97709BAF693
D668C5A1646A92A94B0133617D224DDCC6C2C81F20492BB8A779EE401A816C96
30B988A24F09B653D394FD9E965D487A531500595BD0260C6E6C5CB249F16613
58FD68420F8B91DCDFF13F4218BABA958C19FE475DCA4207436B6560B5823D0F
D26FD6003BE1452F230DDC0531C2D35985FC7CE290148AD54601CEA50E0D6555
B76E99FED552EA6B3655DC428D4D20C2C08F8C10988DDAF1C1C8B654A053D745
A8B9A4BC1F322A39EFCAC7B4250B3B4DE895B3C59FC828A7F3ECD0476C10B3F6
96FE0C923941D47C520180CB43E9F5680FFD96A1921556BB8971E1CC23A2FB11
7C46CAAC64F9F91F3D7457A2BAF74DA606D7E0721D9B288DBB5E377D3251FF85
459A658EF498EB271C57922CFC411C644D897C2AB1853BB3759661D08935811A
320DF5E424F21B8036B9B58B6537ACB30B725DC243211542312078A11DF55ECA
68E175CB1C7961528670AC41FBF0B90046C9C4A8CC6D1BF50EFF123B5EF7522B
4AA4BE60C3D0954E2ED53675CB031BE6F0B82B6C01097D3277712394804BD061
D854F3D76F490490D4EAAFB5AA1833340952C7F471F3385E0054CD85329C7928
8B3843FB2B7F9B3A0924E9EE7870256C1F561F4EA302415FA76B2F5C2871658F
A4F44A0E1EFD97B103E704AC1DF37927BD4B4A77FB2D7009025456E51DD7C42B
7F1F677B7B54A3B07D872CBC01CED8DD4FF7000AEC16584B1197B3CEF5EFD5B2
112E08924F6A8A328049C0D93BA3994EFE8A886D4DA97A68BD57AC7E700D7A14
44DD56737954B428624018149241AAD44B277B8DD53D95601BB4E19C31AE2BF0
756AD1987C4A84454B29637429604C658032AB49C7C8004CF5A4D2115F9D3DF5
ED49D62555ABBDAAF9846B893BA13C1A072798251F9119B0EA2F6D038B41C936
C8C443D98A6A274C89E24C9D735075D6CE22A364EE60C699DDD1B288E1B93F92
932D7AD06263FC5B5B822741EBED8E7C6E2CAE308D3CF3A123CD907011340E49
D346D3A838E2C36310B98514C1FFC6D80E28F9C32E5064A65AC024334598A879
30474FD5CC322838AAD2F1795900B7E8711A7D9D94FBA3479316166BDA4DC1E8
16C18AD7C8C6DB9992A57BA0EEE4469D6AC04F88EA43723713C85453F31BC7A3
9D0A9C48A8E452BC76546B42FBFBDF536529711397B40E6A33C72BF066D28650
4BD1C37832687ECBB20FD9AD7FA704493E562FAB00471A8D26D91C86AE03C612
E34A04BC59AA23CEE1BD46C73E8A37C3DD33CCC91C6A87532DC4473BCE5D3168
21D32EE27C1DA133690EDCE40962E211F6D2DE1D9854B454BEDDB7334E238D9B
D1F3AD04E99CC1E3E54C3BB8D661D64E0EA83347DEBF017F36045D38CFE36F7D
766262E8A88A53C4784C8838BC2A54AAE89F2AA39E48F3B09002EDC17DE7F79C
88A53E7AD2122F78AA740321A7BCAF0F2D175FC5655A1172749080F2DEFD095D
F511BA4A7DA5DF270B221E523BB4AE60C0D86A22BE59739E83CE1430E3EE0DF8
D4BC6CB49F5DF888FD62AFCB0D80D32FBCF45F4EB9EE7E3C2D1A6952BDCFB2FB
60E18D64DA914FB454C05ED36F87ADCEE84B77A826FB193CA458627F91F21F29
C1EF90218D1F80CD3A9CF93B8E42E450DA981D15ACAF54AFEA6BEBDF517C5EC4
D1E20CAC60BA72BCC6858F1F68149D95B32F20E565DE7429DEA1C226C3B53E75
B02B5EBE645B91D57B12D2E5ED14C9849A26A3F656B45B5D5A5F40C74D3A39B6
8DB40148C9FE0B780D54AD11686D2160BCD05AFCDA696046756D9850AEEB66D5
66CEC01A80C2CE92FC4177E7D853363B16E77CD65AE295487818013C88A17B25
68FB7D2841538B3820AF578811324014B4D251089F1DEDD57F8B4881FEE3DAD5
36947A1BE2C2B245CD3D932406CC949E5C71011717D49474D1D4E0E2FB8F302A
03DE9E664029322EF78EA672B52E1DA93E10EAE6569C69A436E9C09560EB83D0
56ADC448F67456CFC266C11A599B6B4D6E3C1F2185718AB74E76FF6073E89462
6E6664E32A94C5625B70F9F72252A0612296EAC0EB54EC3AF001ACCC0284DC5A
9506320FC44587FE9BE42F7817EFA1DED65711871B3B5FDEC3BCAD73B732FE38
4174591E7388ABBEC2D8B44F8F9311E185E37DFAE8E1F9319DDC6E3AF120C9B8
24007A7E6CDA51131D8AB51D24BB7F3D6A3AA307D2F736B37B4ED1EA36D20BDE
8D61EEB26E5F39B3306505EA4FEBF31B5A16F329580C8EE798C5B24F6CD4F258
C06B0088B8409D4B575BD9F924BADEABA540BCB27417EC23F7900A0B4E66C309
CE77805AE66217B0DA931A452B2E5AD8DC1A6703A42584181DDAA2F6675A4AE3
6F077F792D4973B66A51972EBF4F4990126CB37244E4B9C143F865FC84C49194
E2846675A226E0879CE48634B2409397912DB30B98D1CD95AE7561918B4F101F
F86EACDFCD0CA06A83AD7F8C3616F2159EFF482968F9F4493CF34C22E86C9016
7BFE1007524D1F393DA6B761FF7AB86F41DC73311923CAB620C1D4B0B08699EE
9F59A1302E8F79920AFD46F3601349EB2D9D9C94C54504801DB9D655AC95632F
1413B4C6B4EB8205F3C25118B071C881940D1034C170CA7E61C7D2F27509FBC3
B8B6DFCCE52EDD61A7D1281A25BD5A5B8E7799E63F136EF297D926F9B696D089
AF77F0C5D8A4B62D82E068EE8AD689459FF97A7BF5BE8D3F1C7C37C603E82A0A
158756E3E1EDF064D5A9CB63337C5611FE67FFC19B4C0FF1D9B5A55D19F25624
44FD3FE7BD3A00B66F6F3D4825BD18957427F938A75C79F487C9C092EA6A95E2
2B5728F5F9B1D4DE5374A7A8576D65F41A271DACCCC742D048E391D95453A1FA
4D756FB9620E8D8D3592C36E2531163551384B8E746F8151F5A47BCD3794660A
ACD877B1131C242B346868826A5B951E28B681D11FBBD82D1B22F2D6A4827909
76EBCC7B0E953A235F1BA6E2D1E4A46E2A8B1F6A109F410FCF73B1E978E940E2
965DEAD4C5EFF86E090C506CE089F1A1D0E1C5A8652C95246A561E758CB8F499
AA10A6728B98A2F2400D4D6355A08942F1CDD41792A06205911F47AC8CD12D58
CC3D9FDA1E51BFC208D362A206FC506CD7D09EC952021F08120E723E89F9F31B
DD08499CDCAC637F85D3ABEF4DE61D8C067D4ECC45F7763C6DBD32C2800D15C0
307A32789785FAF7CFD6306262CE31C9E4C214326607ED9E0287820B336D1C7F
5AB2BDDB809EB1DD887677BDA98152AC69BBBF440365B4EAF97B87CB0EB1B7D0
F4091F25D6CD235C9298EFA8518B3F9F1D30B9BEB39C706A7D776A115B3F1CB5
F4F14DB8AE68AFA208DFA7C028849466B7E07D75321096B868DE43B13A8C83AE
0A542D7E93AD5428C11A05DA3B0D45978D7F85C94B7EBC23452DF54E55CE7FC7
4C03E2B0A09FDB14647F57390C4220A12DCD345CA684D87EDE2DFB940A1A24F3
E77B5F7ABCBA1ED8F12673BB5E0F7C91F9E00D3730DC147D68C3AF69ABA634AE
14A34516B4AD9357894F0BADA570D5CA0EE3BB82AF585E6123AEBE8464E6D31C
315A158F26417CF754A92FA4CCC17B6CD455E25885086FC2819FF67AB9753818
22B855639639B0D56150911D3475530DD7A0ADDF8BA01EB928B80AEDE3C4B2B3
B84C5D130025C2D750718D8B1225247062B3716E0D02C684058FA3560D99F8AA
6498262F4183106112583633A6CF006C0FC84339E97EAA35BD7DEF5A660EA331
7DDCB28E14D15A0EC04A5AC0CD59BF56402277A83331201E3976287A62502FE5
BA3907257B0744F6BF1261BF5DB7F69CC2D49FA47439AECB922F532EF79AFDD1
2547635DF561069141B1758D1A87198C6D628AC3150F99880535795D86881E0F
3F05CE55168BE73D6BFB1F7F33DACA992998F6B9230D2B3FAF82C2CCA52D195D
E9D59A0F4449868B4D0F0586C75246B45699146A70BADE339C4E5309DF0C6B45
C7F1923F1E73B7A5724888757B8CB60587AE12FC1B863696FEEF72D174122FBE
17C286AEFC24BCE3049F923DBBAA571FCEDC852C945EF6F3D9FE8A45BC26B344
E7ECCD28B9BD09D47C0ACEABD08B8A4C47D77AE1C757C98A897BC8AA3D5831D8
B4FAB62AC7D6AAC538AFF90EAF946C9F6C608B6E3EE105E0F6A5DEF347A3BE68
C541EE8D976CD5E7C8C13016BF5181FD3312757865FA79ED052F09F1F80DAEB7
589AA50433AF793A7E7B10528A34923204792BF6E057A006F1E34B5C70F85062
BC8FC3BB6713C1271F5DF25816275E3B2117F172B572A62E14808793FD3F4282
F1D31614A27A0AA9971058BDAC16368CCDE3F3A578EFCE821DABCBFBB286FABE
2508E083BA4D822D46705A9C77B520D1991D4E89780379959A61AE9BBDC5D8DF
EAD3F050D1C216764AC880B01757DC3E7CC6F7C2A2D1822114BC0BA2BD494596
6BE9EDA92B12D4C7CAB3B4C38B81681124F86BAE4E1342F161DFA7A9D7580AF3
568712CFFC465F1D2327DF5A9BD41B69F9C582E42A5742ACDDD2F08E378ACE62
F61E7B27E53FBF624D228607BA38F4EA07F80A4C94C8624B9BFF61A6B044C13B
7E8245C50C328415B220602B1915D520272E0D094F96DD09475ADBDB2D13A7FD
51A81E0AD8FB355187DA632D4BCC6338E19D26A742D852BDCA47ACCB8541AD1B
B12E1C0A710040E77E8A151666E398BA91F2CA292A33DB80349CC74C4398395A
DDA3D2344E81C5CC99288333EFF92AD383ADEFECE5802BF4F9F971F04921E540
BFD8F8620EE569599C3A274591CB77765A7F68B96A11843B9451C84FE2CC5D10
041468DD9934818474C42DC4EA0536D7C2784B92087BEED5D3B35E9D2CA217A8
046AD5408B1926D53EE0A6FD5C89A3DB8176F9C2777EA20FF8B167885D9619ED
56670F16FF8B186F36C30F700072446028FE0899B1DAD33C2A4912214E376794
B3A886838F63880ED3667B5FDC6BD1DA4FE45BA45C7E29075D1D3F63B87F30B8
0F15A03AC5B52DCDDC5FCFBD9FBE6E41EC4F6ACA8A627918383A8ADC78D79D5C
A2409352093805E8092702D8DA29F4BA30E671584AF3D0D07D4B9CED486D5B06
5BF3A1B132A68C61A844D41B8DF90A65034F1AA5CD4EB61A11D8A4E602585858
9ACB80CFEE0143CC3D55F1DF5876C183F33470629EF9F98A0317E1823A896127
EA3F661B298B53A8B2B59FE092E0612ADCBE8FE2AA8A1C2BA857DC545E01A888
CE941E32B5DA5244F77704ED8DCBFD689C08483943D631403D71E064B55F299C
193F0C664158650C20004DE0D352C7C4E9A480015C96F6E9CD85DD809F3C7727
A93136E28A4A5B1591A692D19D8AA00607D13BBC2D3894A803AAB941D60D9490
85EB4BA5CC6D31E246BC911266881708F5212A4BB32D26CE94AA62D3772708FB
27EA2789CE3AD5E0A4FC2C72487412745CD018143508B0E5521E3BEA0C50E3EA
4DEA7BFDCFD2C5940854996C41796C0967EAB3196453B41CC36CC2BFBB5F7B85
718F19120E32FD360038D578AEB273023811DAFEDD6DDB8B588386916979B42F
E8F686C7E76198AF97C538B9CE941155786A7621F8747E9FDE181295C1BACABA
7A9A487BE619B162F9A3788A9F300FF13A2E14470C9A8ACC972BDE91F6412DDC
4166F7AAF7509ADC36AD1FC13646383B59562FF8A495DC09B0608314015A453A
973A823B0BF6C2F01A3B28F33E4539BF2962AA778AB3B7BA036C648DC6DDD6A8
6D73BE41DBBDB57943555363466E88FEA949D39EE2F54A77942D7949F29D4C5A
791CED743599912E12225B256C5D682D19B9AB2075B0F2F9C00705000425A902
A0893FF98C7C2AAACDB63F8FDB489B9631B01DE27789E65E768F6AF33E8ECC94
F3716CDB7A677C826A0F5BF4B17869C97F6655E6E87E777AF14B1A097CCDEE67
D67CB6F070D1629B96607C3BD2731F8AB34BA95852DA101E051B6A877912E581
C318A43CDFE114A5C3B829FBD88890AB5E9DF50E548E5129EFAB424827E80C6A
E816BB9DD84A0FB54B313913A6D308F7CCD8870228B8BC62319D63D57F692B10
6D2C87524B168789BEE5804A0B7D69FF5B2BBD9C85EB46B6B4F624FB38EF3685
1F3688F1D5325DD7F914DE8D995F957B17D2A177E1FD68964C1EB50D78DC36C6
FEC229EE4BC27402A81445E6D724D78770BC9452EE400F0726B8BC074B6773BC
0591BB160BE30153D00483F72E02886E6EA11FD734A4761094121DAB55066346
4B66928807DADF79D9320BED841FBDE6379241C32D03BAAEC7C0B242D806787F
B1CBC9F4942AAB23BD0FDB0D47074DB2383EA0DD5E485965A837D224357D917D
6EA409DE639ED81316B9F9DA8CFC01DA3776FE80BACADF21E2D35123472C689D
4F1B1100D9D9A2F707B01240C7F608F01B39C87AB85890F66670FE42D70B5946
B87DF6D2B46654575347B631FEAF119907F0909B9EA05CF3D6F8FB211D118131
DA3D2FFF610E6242405B1F63B72DADCA4DB5FC146603D8E8F101E2694C0CFE55
09C385DC572EF2E63C6D604A24002EA508C9C34740276F82B0E076A3A9D64AC8
1109707F4AB826A1EB6403E74527AF964F71A391B494CAAD8A17A63A27AAA0EA
2B400716B65802CBDA12AAAEA9F5E669E4D02229A00CEEBB2F5B2B39235CC41C
F90487169FDB1866CE5296CBC78676AE43E2C494F9E2B6E2D589EFDFE9F87980
E3FA4D86DF6C8F26CB7EAB13B0873586CAB6185B9C39030419F710A6FA172C02
1E21F2A13A06BC81356A27A1BF0B6A1125FC7E7EB53CEC74A4CF4463F3B6C41C
AC77FF223BD1077D38EAE33AD684F483CA7EA7B0661F97D16C57E5F1FA67EA08
DF9F41092344B2B092296BF55CC9E8EBA0D5E11A41062168204C75337CD5C03D
7179FBEFB0A1E178B27BAB40482E92CF669A220155AAF2D8EB8DA7B1761AA3BF
1FED64A2AFE1AF282D15594D8FDD273B43305CF86AC0B3D331D35056BDA1C160
811A1B8BEE853F78C63CF1104474DFA2D5D26D4B15F5E900D7CFB6ED3E429593
57F0CE6BC43A54A2CDE00F913D88B677CADA5A4D5E5531783F77240C7CD5554D
085940A869E1FA7AB926617020E8179B886A7187B26178E86A2C88F0D6F5F166
5B03040455308A0F8405B9E52A4EC8D22ADF7A5546E6FBDD9F4F417F44289EDB
FD1CF6D8AB39264A0FEEBEC8E6746FE20D52B358CEB5799822C3B5F61ABDCC47
58C3C79B209CFC4B7204E481F5A93FFBAB77908E210D96A8A8F426BADB3197BD
B780362635204D577F6F7A1CF4B7ACBABF5280D1C7FA3EA522BBD4DBFDA3E7E6
05E1554EF88AA561A788DBB581093A115150F6762D0BBA119C438C48F1004575
CB17D2C395B42EC7E8F62448A3C9E33BDD21ECBB67163DC15A1EED8279677A41
E4A6EA8233805BD42BFC53E9D6CBE9E3314BB4482B2D64ABC177ADBEE050FA35
9B91B4EAB242E5BB3B446B089CB8FEAEF39C4B7220C75E149C63748BCE89C47F
65BC6F7F1A33B5D9840423C031EAACD727E91A5351762AC89C2170E20ACB2EC5
EB4677A1C8E88C201FBDE043619F15BAE2B7BAE70B07067C3928256951F842F5
71A9F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (Scratch.dvi)
@start /Fa 144[29 111[{ TeXBase1Encoding ReEncodeFont }1
49.6466 /Utopia-Regular rf /Fb 138[46 1[42 28 1[46 46
46 69 18 2[18 46 46 1[46 46 42 46 46 13[55 6[46 8[60
67[{ TeXBase1Encoding ReEncodeFont }19 83.022 /NimbusSanL-Regu
rf /Fc 22[46 1[46 6[46 103[46 2[51 28 46 32 51 51 51
51 74 23 1[23 23 1[51 1[46 51 46 51 46 15[65 4[51 10[60
8[46 46 1[46 1[46 46 46 46 2[28 1[48 32 42[{
 TeXBase1Encoding ReEncodeFont }35 83.022 /NimbusSanL-Bold
rf /Fd 58[55 18[38 16[55 161[{}3 76.3802 /Fourier-Math-Symbols
rf /Fe 135[39 17[24 102[{ TeXBase1Encoding ReEncodeFont }2
76.3802 /Utopia-Italic rf /Fg 6[46 14[39 39 39 7[40 22[46
80[37 1[38 46 26 33 30 45 46 44 47 70 21 1[21 22 46 40
24 39 46 38 46 40 10[48 2[41 1[58 46 58 60 72 43 2[27
61 56 44 46 60 52 49 49 1[30 1[44 2[20 1[40 40 40 40
40 40 40 40 40 1[20 30 20 1[31 27 27 21 36[47 2[{
 TeXBase1Encoding ReEncodeFont }65 76.3802 /Utopia-Regular
rf /Fh 135[40 5[34 8[24 3[40 46 38 46 42 27[48 15[43
43 43 43 43 2[21 46[{ TeXBase1Encoding ReEncodeFont }15
76.3802 /Utopia-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 -354 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 -354 a 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -916 a
SDict begin H.S end
 -136 -916 a -136 -916 a
SDict begin H.R end

-136 -916 a -136 -916 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136 -916 a Black 0 TeXcolorgray
Black 0 TeXcolorgray -128 -246 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -246 a -128 -246
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -246 a -128 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -246 a -128 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128
-246 a -128 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -246 a -128 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -246
a -128 -246 a
SDict begin H.S end
 -128 -246 a -128 -246 a
SDict begin 12 H.A end
 -128 -246 a -128
-246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -246 a 85 -192 a

 85 -192 a 85 -192 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 12.3847 50.56694 -25.28346 -6.19235 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -22.36137 -3.24039 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray
101 -192 a Fh(Ex)o(er)o(cice)14 b(1)p 0 TeXcolorgray
85 -192 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 -10 a
SDict begin H.S end
 -128 -10 a -128 -10 a
SDict begin 12 H.A end
 -128 -10 a
-128 -10 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 -10 a 0 TeXcolorgray -26 104 a Fh(1.)p
0 TeXcolorgray 42 w Fg(On)j(a)g(utilis\351)i(une)f(feuille)i(de)d
(calcul)h(pour)f(obtenir)h(les)g(images)g(de)f(diff\351r)o(entes)i
(valeurs)f(de)h Fe(x)k Fg(par)17 b(une)h(fonction)27
b Fe(f)19 b Fg(.)80 218 y(V)-5 b(oici)18 b(une)g(copie)g(de)f(l)o
('\351cr)o(an)h(obtenu)g(:)p 0 TeXcolorgray 0 TeXcolorgray
80 343 3948 4 v 80 502 4 160 v 133 454 a(B2)p 699 502
V 530 w(=3*B1)p Fd(\241)p Fg(4)p 4024 502 V 80 505 3948
4 v 80 675 4 170 v 223 675 V 438 627 a(A)p 699 675 V
426 w(B)p 1174 675 V 425 w(C)p 1649 675 V 419 w(D)p 2124
675 V 422 w(E)p 2599 675 V 430 w(F)p 3074 675 V 425 w(G)p
3549 675 V 417 w(H)p 4024 675 V 80 678 3948 4 v 80 848
4 170 v 133 790 a(1)p 223 848 V 441 800 a Fe(x)p 699
848 V 410 w Fd(\241)p Fg(2)p 1174 848 V 380 w Fd(\241)p
Fg(1)p 1649 848 V 408 w(0)p 2124 848 V 435 w(1)p 2599
848 V 435 w(2)p 3074 848 V 435 w(3)p 3549 848 V 435 w(4)p
4024 848 V 80 851 3948 4 v 80 1021 4 170 v 133 963 a(2)p
223 1021 V 395 973 a Fe(f)h Fg(\()r Fe(x)5 b Fg(\))p
699 1021 V 0.75 TeXcolorgray 702 1021 472 170 v 0 TeXcolorgray
870 963 a Fd(\241)p Fg(10)p 1174 1021 4 170 v 1365 973
a Fd(\241)p Fg(7)p 1649 1021 V 380 w Fd(\241)p Fg(4)p
2124 1021 V 380 w Fd(\241)p Fg(1)p 2599 1021 V 408 w(2)p
3074 1021 V 435 w(5)p 3549 1021 V 435 w(8)p 4024 1021
V 80 1025 3948 4 v -128 1091 a
SDict begin H.S end
 -128 1091 a -128 1091
a
SDict begin 12 H.A end
 -128 1091 a -128 1091 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 1091 a 0 TeXcolorgray
126 1171 a Fg(\()p Fh(a)p Fg(\))p 0 TeXcolorgray 41 w(Quelle)18
b(est)g(l)o('image)h(de)e Fd(\241)p Fg(1)g(par)h(la)f(fonction)27
b Fe(f)g Fg(?)-128 1204 y
SDict begin H.S end
 -128 1204 a -128 1204 a
SDict begin 12 H.A end
 -128
1204 a -128 1204 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128 1204 a 0 TeXcolorgray 121 1300
a Fg(\()p Fh(b)p Fg(\))p 0 TeXcolorgray 42 w(Quel)17
b(est)h(l)o('ant\351c\351dent)i(de)d(5)g(par)h(la)f(fonction)27
b Fe(f)g Fg(?)-128 1333 y
SDict begin H.S end
 -128 1333 a -128 1333 a
SDict begin 12 H.A end
 -128
1333 a -128 1333 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -128 1333 a 0 TeXcolorgray 130 1429
a Fg(\()p Fh(c)p Fg(\))p 0 TeXcolorgray 41 w(Donner)17
b(l)o('expr)o(ession)i(de)26 b Fe(f)18 b Fg(\()r Fe(x)5
b Fg(\).)-128 1462 y
SDict begin H.S end
 -128 1462 a -128 1462 a
SDict begin 12 H.A end
 -128 1462
a -128 1462 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 1462 a 0 TeXcolorgray 121 1558 a Fg(\()p
Fh(d)p Fg(\))p 0 TeXcolorgray 42 w(C)o(alculer)26 b Fe(f)19
b Fg(\(10\).)-128 1620 y
SDict begin H.S end
 -128 1620 a -128 1620 a
SDict begin 12 H.A end
 -128
1620 a -128 1620 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 1620 a 0 TeXcolorgray -26 1716
a Fh(2.)p 0 TeXcolorgray 42 w Fg(On)e(donne)h(le)g(progr)o(amme)f
(suivant)i(qui)f(tr)o(aduit)g(un)f(progr)o(amme)h(de)f(calcul.)p
0 TeXcolorgray 0 TeXcolorgray 1072 1931 a

 1072 1931 a
1072 1931 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgfsc{0.7843 0.5137 0.1882 setrgbcolor}def

 /pgffc{0.7843 0.5137 0.1882 setrgbcolor}def

 0.0 0.0 moveto

 18.50572 10.68425 36.28949 10.68425 54.79523 0.0 curveto

 103.89558 0.0 lineto

 107.36926 -3.47368 lineto

 107.36926 -19.8855 lineto

 103.89558 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 0.0 lineto

 closepath

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 1072 1931 a Fc(Quand)1367 1947 y

 1367 1947
a 1367 1947 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.2471 0.5529 0.0824 setrgbcolor}def

 -1.10913 0.23573 moveto

 1.24818 11.32643 lineto

 2.35732 11.09068 lineto

 2.23944 10.53612 lineto

 8.37413 12.13014 9.6493 7.22247 13.44801 8.73337 curveto

 12.18623 5.524 12.18623 5.524 12.0336 2.07887 curveto

 8.47064 1.67712 6.40517 5.5937 0.94292 4.4362 curveto

 0.0 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1502 1931 a Fc(est)24 b(c)n(liqu\351)1072
1931 y


 pgfr

 restore

 restore

 restore

 save

 /pgfsc{0.62744 0.41096 0.15056 setrgbcolor}def

 107.36926 -3.47368 moveto

 107.36926 -19.8855 lineto

 103.89558 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.82744 0.61096 0.35056 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 0.0 lineto

 0.0 0.0 lineto

 18.50572 10.68425 36.28949 10.68425 54.79523 0.0 curveto

 103.89558 0.0 lineto

 107.36926 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgffc{0.1725 0.6471 0.8863 setrgbcolor}def

 3.47368 -24.1562 moveto

 13.43645 -24.1562 lineto

 16.91013 -27.6299 lineto

 26.8729 -27.6299 lineto

 30.34657 -24.1562 lineto

 196.43694 -24.1562 lineto

 199.91061 -27.6299 lineto

 199.91061 -44.04172 lineto

 196.43694 -47.5154 lineto

 30.34657 -47.5154 lineto

 26.8729 -50.98909 lineto

 16.91013 -50.98909 lineto

 13.43645 -47.5154 lineto

 3.47368 -47.5154 lineto

 0.0 -44.04172 lineto

 0.0 -27.6299 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -39.75648 ] concat

 pgfs



 1 setgray
 1072 1931 a Fc(demander)1494 1931 y

 1494 1931
a 1494 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.53674 85.36995 0.0 -2.21669 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 1.99252 0.0 ] concat

 pgfs



 0 setgray
 1494 1931 a Fb(Choisir)f(un)h(nombre)1494
1931 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.8 setgray}def

 0.49814 pgfw

 0.0 -2.21669 moveto

 0.0 9.32005 lineto

 85.36995 9.32005 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 2231 1931 a Fc(et)e(attendre)1072 1931 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.138 0.51767 0.70905 setrgbcolor}def

 199.91061 -27.6299 moveto

 199.91061 -44.04172 lineto

 196.43694 -47.5154 lineto

 30.34657 -47.5154 lineto

 26.8729 -50.98909 lineto

 16.91013 -50.98909 lineto

 13.43645 -47.5154 lineto

 3.47368 -47.5154 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.338 0.71768 0.90904 setrgbcolor}def

 3.47368 -47.5154 moveto

 0.0 -44.04172 lineto

 0.0 -27.6299 lineto

 3.47368 -24.1562 lineto

 13.43645 -24.1562 lineto

 16.91013 -27.6299 lineto

 26.8729 -27.6299 lineto

 30.34657 -24.1562 lineto

 196.43694 -24.1562 lineto

 199.91061 -27.6299 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgffc{0.2902 0.4235 0.8314 setrgbcolor}def

 3.47368 -48.31242 moveto

 13.43645 -48.31242 lineto

 16.91013 -51.7861 lineto

 26.8729 -51.7861 lineto

 30.34657 -48.31242 lineto

 116.09782 -48.31242 lineto

 119.5715 -51.7861 lineto

 119.5715 -68.19794 lineto

 116.09782 -71.67162 lineto

 30.34657 -71.67162 lineto

 26.8729 -75.14531 lineto

 16.91013 -75.14531 lineto

 13.43645 -71.67162 lineto

 3.47368 -71.67162 lineto

 0.0 -68.19794 lineto

 0.0 -51.7861 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -63.9127 ] concat

 pgfs



 1 setgray
 1072
1931 a Fc(mettre)1349 1931 y

 1349 1931 a 1349 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 9.42015 10.0897 moveto

 12.21515 10.0897 lineto

 15.87418 10.0897 18.84032 7.12357 18.84032 3.46454 curveto

 18.84032 -0.19447 15.87418 -3.16061 12.21515 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 2.55087 0.0 ] concat

 pgfs



 0 setgray

1349 1931 a Fc(A)1419 1875 y

 1419 1875 a 1419 1875 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.3 setgray}def

 0.0 0.0 moveto

 5.30013 0.0 lineto

 2.65005 -3.1801 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 newpath

 restore

 pgfc



1349 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1529 1931 a Fc(\340)1601 1931 y

 1601 1931
a 1601 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 22.83887 10.54549 moveto

 38.63419 10.54549 lineto

 42.52428 10.54549 45.67773 7.39201 45.67773 3.50192 curveto

 45.67773 -0.38815 42.52428 -3.54163 38.63419 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.46146 0.0 ] concat

 pgfs



 1 setgray
 1601 1931 a Fc(r\351ponse)1601 1931 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 38.63419 -3.54163 lineto

 42.53426 -3.54163 45.67773 -0.39815 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 38.63419 10.54549 lineto

 42.53426 10.54549 45.67773 7.40201 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1072
1931 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.23216 0.33879 0.66513 setrgbcolor}def

 119.5715 -51.7861 moveto

 119.5715 -68.19794 lineto

 116.09782 -71.67162 lineto

 30.34657 -71.67162 lineto

 26.8729 -75.14531 lineto

 16.91013 -75.14531 lineto

 13.43645 -71.67162 lineto

 3.47368 -71.67162 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.43216 0.53879 0.86513 setrgbcolor}def

 3.47368 -71.67162 moveto

 0.0 -68.19794 lineto

 0.0 -51.7861 lineto

 3.47368 -48.31242 lineto

 13.43645 -48.31242 lineto

 16.91013 -51.7861 lineto

 26.8729 -51.7861 lineto

 30.34657 -48.31242 lineto

 116.09782 -48.31242 lineto

 119.5715 -51.7861 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgffc{0.2902 0.4235 0.8314 setrgbcolor}def

 3.47368 -72.46864 moveto

 13.43645 -72.46864 lineto

 16.91013 -75.94232 lineto

 26.8729 -75.94232 lineto

 30.34657 -72.46864 lineto

 118.17775 -72.46864 lineto

 121.65144 -75.94232 lineto

 121.65144 -92.35416 lineto

 118.17775 -95.82784 lineto

 30.34657 -95.82784 lineto

 26.8729 -99.30151 lineto

 16.91013 -99.30151 lineto

 13.43645 -95.82784 lineto

 3.47368 -95.82784 lineto

 0.0 -92.35416 lineto

 0.0 -75.94232 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -88.06891 ] concat

 pgfs



 1 setgray
 1072 1931 a Fc(mettre)1349 1931 y

 1349 1931 a
1349 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 9.42015 10.0897 moveto

 12.21515 10.0897 lineto

 15.87418 10.0897 18.84032 7.12357 18.84032 3.46454 curveto

 18.84032 -0.19447 15.87418 -3.16061 12.21515 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 2.55087 0.0 ] concat

 pgfs



 0 setgray
 1349 1931 a Fc(A)1419 1875 y

 1419 1875 a
1419 1875 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.3 setgray}def

 0.0 0.0 moveto

 5.30013 0.0 lineto

 2.65005 -3.1801 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1349 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1529 1931 a Fc(\340)1598 1931
y

 1598 1931 a 1598 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 24.27734 11.08597 moveto

 40.93324 11.08597 lineto

 45.1425 11.08597 48.55469 7.67378 48.55469 3.46454 curveto

 48.55469 -0.74469 45.1425 -4.15688 40.93324 -4.15688 curveto

 7.62143 -4.15688 lineto

 3.41219 -4.15688 0.0 -0.74469 0.0 3.46454 curveto

 0.0 7.67378 3.41219 11.08597 7.62143 11.08597 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.34834 0.0 ] concat

 pgfs



 0 setgray
 1598 1931 a

 1598 1931 a 1598
1931 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.02863 0.0 ] concat

 pgfs



 0 setgray
 1598 1931 a Fc(A)1598 1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1732 1931 a Fc(+)1803
1931 y

 1803 1931 a 1803 1931 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 1803 1931 a Fc(3)1803
1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1598 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1072 1931 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.23216 0.33879 0.66513 setrgbcolor}def

 121.65144 -75.94232 moveto

 121.65144 -92.35416 lineto

 118.17775 -95.82784 lineto

 30.34657 -95.82784 lineto

 26.8729 -99.30151 lineto

 16.91013 -99.30151 lineto

 13.43645 -95.82784 lineto

 3.47368 -95.82784 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.43216 0.53879 0.86513 setrgbcolor}def

 3.47368 -95.82784 moveto

 0.0 -92.35416 lineto

 0.0 -75.94232 lineto

 3.47368 -72.46864 lineto

 13.43645 -72.46864 lineto

 16.91013 -75.94232 lineto

 26.8729 -75.94232 lineto

 30.34657 -72.46864 lineto

 118.17775 -72.46864 lineto

 121.65144 -75.94232 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgffc{0.2902 0.4235 0.8314 setrgbcolor}def

 3.47368 -96.62486 moveto

 13.43645 -96.62486 lineto

 16.91013 -100.09854 lineto

 26.8729 -100.09854 lineto

 30.34657 -96.62486 lineto

 116.23494 -96.62486 lineto

 119.70862 -100.09854 lineto

 119.70862 -116.51038 lineto

 116.23494 -119.98405 lineto

 30.34657 -119.98405 lineto

 26.8729 -123.45773 lineto

 16.91013 -123.45773 lineto

 13.43645 -119.98405 lineto

 3.47368 -119.98405 lineto

 0.0 -116.51038 lineto

 0.0 -100.09854 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -112.22513 ] concat

 pgfs



 1 setgray
 1072 1931 a Fc(mettre)1349
1931 y

 1349 1931 a 1349 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 9.42015 10.0897 moveto

 12.21515 10.0897 lineto

 15.87418 10.0897 18.84032 7.12357 18.84032 3.46454 curveto

 18.84032 -0.19447 15.87418 -3.16061 12.21515 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 2.55087 0.0 ] concat

 pgfs



 0 setgray
 1349 1931 a Fc(A)1419
1875 y

 1419 1875 a 1419 1875 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.3 setgray}def

 0.0 0.0 moveto

 5.30013 0.0 lineto

 2.65005 -3.1801 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1349 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1529 1931
a Fc(\340)1598 1931 y

 1598 1931 a 1598 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 23.30594 11.08597 moveto

 38.99043 11.08597 lineto

 43.19968 11.08597 46.61188 7.67378 46.61188 3.46454 curveto

 46.61188 -0.74469 43.19968 -4.15688 38.99043 -4.15688 curveto

 7.62143 -4.15688 lineto

 3.41219 -4.15688 0.0 -0.74469 0.0 3.46454 curveto

 0.0 7.67378 3.41219 11.08597 7.62143 11.08597 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.34834 0.0 ] concat

 pgfs



 0 setgray
 1598 1931
a

 1598 1931 a 1598 1931 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.02863 0.0 ] concat

 pgfs



 0 setgray
 1598 1931 a Fc(A)1598 1931
y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1732 1931 a Fc(*)1787 1931 y

 1787 1931 a 1787 1931
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 1787 1931 a Fc(2)1787 1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1598 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1072 1931
a


 pgfr

 restore

 restore

 save

 /pgfsc{0.23216 0.33879 0.66513 setrgbcolor}def

 119.70862 -100.09854 moveto

 119.70862 -116.51038 lineto

 116.23494 -119.98405 lineto

 30.34657 -119.98405 lineto

 26.8729 -123.45773 lineto

 16.91013 -123.45773 lineto

 13.43645 -119.98405 lineto

 3.47368 -119.98405 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.43216 0.53879 0.86513 setrgbcolor}def

 3.47368 -119.98405 moveto

 0.0 -116.51038 lineto

 0.0 -100.09854 lineto

 3.47368 -96.62486 lineto

 13.43645 -96.62486 lineto

 16.91013 -100.09854 lineto

 26.8729 -100.09854 lineto

 30.34657 -96.62486 lineto

 116.23494 -96.62486 lineto

 119.70862 -100.09854 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgffc{0.2902 0.4235 0.8314 setrgbcolor}def

 3.47368 -120.78108 moveto

 13.43645 -120.78108 lineto

 16.91013 -124.25476 lineto

 26.8729 -124.25476 lineto

 30.34657 -120.78108 lineto

 116.18532 -120.78108 lineto

 119.65901 -124.25476 lineto

 119.65901 -140.6666 lineto

 116.18532 -144.14027 lineto

 30.34657 -144.14027 lineto

 26.8729 -147.61395 lineto

 16.91013 -147.61395 lineto

 13.43645 -144.14027 lineto

 3.47368 -144.14027 lineto

 0.0 -140.6666 lineto

 0.0 -124.25476 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -136.38135 ] concat

 pgfs



 1 setgray
 1072 1931 a Fc(mettre)1349 1931 y

 1349 1931 a 1349
1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 9.42015 10.0897 moveto

 12.21515 10.0897 lineto

 15.87418 10.0897 18.84032 7.12357 18.84032 3.46454 curveto

 18.84032 -0.19447 15.87418 -3.16061 12.21515 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 2.55087 0.0 ] concat

 pgfs



 0 setgray
 1349 1931 a Fc(A)1419 1875 y

 1419 1875 a 1419
1875 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.3 setgray}def

 0.0 0.0 moveto

 5.30013 0.0 lineto

 2.65005 -3.1801 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1349 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1529 1931 a Fc(\340)1598 1931 y

 1598
1931 a 1598 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 23.28113 11.08597 moveto

 38.94081 11.08597 lineto

 43.15007 11.08597 46.56226 7.67378 46.56226 3.46454 curveto

 46.56226 -0.74469 43.15007 -4.15688 38.94081 -4.15688 curveto

 7.62143 -4.15688 lineto

 3.41219 -4.15688 0.0 -0.74469 0.0 3.46454 curveto

 0.0 7.67378 3.41219 11.08597 7.62143 11.08597 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 5.34834 0.0 ] concat

 pgfs



 0 setgray
 1598 1931 a

 1598 1931 a 1598 1931
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.02863 0.0 ] concat

 pgfs



 0 setgray
 1598 1931 a Fc(A)1598 1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1732 1931 a Fd(\241)1787
1931 y

 1787 1931 a 1787 1931 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 1787 1931 a Fc(5)1787
1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1598 1931 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1072 1931 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.23216 0.33879 0.66513 setrgbcolor}def

 119.65901 -124.25476 moveto

 119.65901 -140.6666 lineto

 116.18532 -144.14027 lineto

 30.34657 -144.14027 lineto

 26.8729 -147.61395 lineto

 16.91013 -147.61395 lineto

 13.43645 -144.14027 lineto

 3.47368 -144.14027 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.43216 0.53879 0.86513 setrgbcolor}def

 3.47368 -144.14027 moveto

 0.0 -140.6666 lineto

 0.0 -124.25476 lineto

 3.47368 -120.78108 lineto

 13.43645 -120.78108 lineto

 16.91013 -124.25476 lineto

 26.8729 -124.25476 lineto

 30.34657 -120.78108 lineto

 116.18532 -120.78108 lineto

 119.65901 -124.25476 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgffc{0.2902 0.4235 0.8314 setrgbcolor}def

 3.47368 -144.9373 moveto

 13.43645 -144.9373 lineto

 16.91013 -148.41098 lineto

 26.8729 -148.41098 lineto

 30.34657 -144.9373 lineto

 232.1405 -144.9373 lineto

 235.61418 -148.41098 lineto

 235.61418 -164.8228 lineto

 232.1405 -168.2965 lineto

 30.34657 -168.2965 lineto

 26.8729 -171.77017 lineto

 16.91013 -171.77017 lineto

 13.43645 -168.2965 lineto

 3.47368 -168.2965 lineto

 0.0 -164.8228 lineto

 0.0 -148.41098 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -160.53757 ] concat

 pgfs



 1 setgray
 1072 1931 a Fc(dire)1224
1931 y

 1224 1931 a 1224 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 24.8755 9.04366 moveto

 43.12584 9.04366 lineto

 46.78487 9.04366 49.75102 6.0775 49.75102 2.41847 curveto

 49.75102 -1.24054 46.78487 -4.20668 43.12584 -4.20668 curveto

 6.62517 -4.20668 lineto

 2.96614 -4.20668 0.0 -1.24054 0.0 2.41847 curveto

 0.0 6.0775 2.96614 9.04366 6.62517 9.04366 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.38599 0.0 ] concat

 pgfs



 0 setgray
 1224 1931 a Fc(regr)n(oupe)1224
1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1664 1931 a

 1664 1931 a 1664 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.53674 141.11093 0.0 -2.21669 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 1.99252 0.0 ] concat

 pgfs



 0 setgray
 1664 1931
a Fb(Le)h(prog)o(r)o(amme)h(de)g(calcul)f(donne)1664
1931 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.8 setgray}def

 0.49814 pgfw

 0.0 -2.21669 moveto

 0.0 9.32005 lineto

 141.11093 9.32005 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 2842 1931 a

 2842 1931 a 2842 1931 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.02863 0.0 ] concat

 pgfs



 0 setgray
 2842 1931
a Fc(A)2842 1931 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1072 1931 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.23216 0.33879 0.66513 setrgbcolor}def

 235.61418 -148.41098 moveto

 235.61418 -164.8228 lineto

 232.1405 -168.2965 lineto

 30.34657 -168.2965 lineto

 26.8729 -171.77017 lineto

 16.91013 -171.77017 lineto

 13.43645 -168.2965 lineto

 3.47368 -168.2965 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.43216 0.53879 0.86513 setrgbcolor}def

 3.47368 -168.2965 moveto

 0.0 -164.8228 lineto

 0.0 -148.41098 lineto

 3.47368 -144.9373 lineto

 13.43645 -144.9373 lineto

 16.91013 -148.41098 lineto

 26.8729 -148.41098 lineto

 30.34657 -144.9373 lineto

 232.1405 -144.9373 lineto

 235.61418 -148.41098 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -128 3432 a
SDict begin H.S end
 -128 3432
a -128 3432 a
SDict begin 12 H.A end
 -128 3432 a -128 3432 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 3432 a 0 TeXcolorgray
126 3523 a Fg(\()p Fh(a)p Fg(\))p 0 TeXcolorgray 41 w(\311cr)q(ir)o(e)
16 b(sur)h(votr)o(e)g(copie)h(les)g(deux)g(der)q(ni\350r)o(es)f
(\351tapes)h(du)g(progr)o(amme)f(de)g(calcul)h(:)p 0
TeXcolorgray 0 TeXcolorgray 1392 3601 1506 4 v 1392 3771
4 170 v 1445 3723 a Fd(\262)52 b Fg(Choisir)18 b(un)g(nombr)o(e)o(.)p
2895 3771 V 1392 3941 V 1445 3893 a Fd(\262)52 b Fg(Ajouter)18
b(3)f(\340)h(ce)f(nombr)o(e)o(.)p 2895 3941 V 1392 4111
V 1445 4063 a Fd(\262)52 b Fg(.)10 b(.)g(.)p 2895 4111
V 1392 4280 V 1445 4233 a Fd(\262)52 b Fg(.)10 b(.)g(.)p
2895 4280 V 1392 4284 1506 4 v -128 4317 a
SDict begin H.S end
 -128 4317
a -128 4317 a
SDict begin 12 H.A end
 -128 4317 a -128 4317 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -128 4317 a 0 TeXcolorgray
121 4397 a Fg(\()p Fh(b)p Fg(\))p 0 TeXcolorgray 42 w(S)o(i)17
b(on)g(choisit)i(le)f(nombr)o(e)f(8)h(au)f(d\351par)q(t,)g(quel)i(ser)o
(a)e(le)h(r\351sultat)9 b(?)-128 4429 y
SDict begin H.S end
 -128 4429 a -128
4429 a
SDict begin 12 H.A end
 -128 4429 a -128 4429 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -128 4429 a 0 TeXcolorgray
130 4526 a Fg(\()p Fh(c)p Fg(\))p 0 TeXcolorgray 41 w(S)o(i)22
b(on)h(choisit)j Fe(x)h Fg(comme)d(nombr)o(e)e(de)h(d\351par)q(t,)f
(montr)o(er)h(que)g(le)g(r\351sultat)h(obtenu)f(avec)f(ce)h(progr)o
(amme)g(de)f(calcul)h(ser)o(a)263 4626 y(2)r Fe(x)15
b Fd(\305)10 b Fg(1.)-128 4641 y
SDict begin H.S end
 -128 4641 a -128 4641
a
SDict begin 12 H.A end
 -128 4641 a -128 4641 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -128 4641 a 0 TeXcolorgray
121 4755 a Fg(\()p Fh(d)p Fg(\))p 0 TeXcolorgray 42 w(Quel)17
b(nombr)o(e)h(doit-on)f(choisir)h(au)g(d\351par)q(t)f(pour)g(obtenir)h
(6)9 b(?)-128 4816 y
SDict begin H.S end
 -128 4816 a -128 4816 a
SDict begin 12 H.A end
 -128 4816
a -128 4816 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -128 4816 a 0 TeXcolorgray -26 4913 a Fh(3.)p
0 TeXcolorgray 42 w Fg(Quel)18 b(nombr)o(e)f(faudr)o(ait-il)h(choisir)g
(pour)g(que)g(la)f(fonction)27 b Fe(f)36 b Fg(et)18 b(le)g(progr)o
(amme)f(de)g(calcul)h(donnent)g(le)g(m\352me)h(r\351sultat)9
b(?)p 0 TeXcolorgray 3987 5895 a(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -916 a
SDict begin H.S end
 -136 -916 a -136 -916 a
SDict begin H.R end

-136 -916 a -136 -916 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -136 -916 a 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 85 -192 a

 85 -192 a 85 -192
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 12.3847 50.56694 -25.28346 -6.19235 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -22.36137 -3.24039 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray 101 -192 a Fh(Ex)o(er)o(cice)14 b(2)p
0 TeXcolorgray 85 -192 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 60 a Fg(On)20 b(donne)g(le)h(progr)o
(amme)f(ci-dessous)h(o\371)f(on)g(consid\350r)o(e)g(2)h(lutins)o(.)g(P)
n(our)e(chaque)i(lutin,)g(on)f(a)g(\351cr)q(it)g(un)g(scr)q(ipt)g(corr)
o(espondant)g(\340)g(un)-128 160 y(progr)o(amme)e(de)f(calcul)h
(diff\351r)o(ent.)p 0 TeXcolorgray 0 TeXcolorgray -128
273 4156 4 v -128 443 4 170 v -74 395 a(L)o(utin)g(n)174
371 y Fa(o)218 395 y Fg(1)p 3169 443 V 3222 385 a(N)n(um\351ro)f(d)n
('instr)q(uction)p 4024 443 V -128 446 4156 4 v -128
766 4 320 v -71 539 a

 -71 539 a -71 539 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgfsc{0.7843 0.5137 0.1882 setrgbcolor}def

 /pgffc{0.7843 0.5137 0.1882 setrgbcolor}def

 0.0 0.0 moveto

 18.50572 10.68425 36.28949 10.68425 54.79523 0.0 curveto

 103.89558 0.0 lineto

 107.36926 -3.47368 lineto

 107.36926 -19.8855 lineto

 103.89558 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 0.0 lineto

 closepath

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 -71 539 a Fc(Quand)224
555 y

 224 555 a 224 555 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.2471 0.5529 0.0824 setrgbcolor}def

 -1.10913 0.23573 moveto

 1.24818 11.32643 lineto

 2.35732 11.09068 lineto

 2.23944 10.53612 lineto

 8.37413 12.13014 9.6493 7.22247 13.44801 8.73337 curveto

 12.18623 5.524 12.18623 5.524 12.0336 2.07887 curveto

 8.47064 1.67712 6.40517 5.5937 0.94292 4.4362 curveto

 0.0 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 359 539 a Fc(est)23 b(c)n(liqu\351)-71
539 y


 pgfr

 restore

 restore

 restore

 save

 /pgfsc{0.62744 0.41096 0.15056 setrgbcolor}def

 107.36926 -3.47368 moveto

 107.36926 -19.8855 lineto

 103.89558 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.82744 0.61096 0.35056 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 0.0 lineto

 0.0 0.0 lineto

 18.50572 10.68425 36.28949 10.68425 54.79523 0.0 curveto

 103.89558 0.0 lineto

 107.36926 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 3169 766 4 320 v 3578 528 a Fg(1)p 4024 766 V -128
1010 4 245 v -71 783 a

 -71 783 a -71 783 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.1725 0.6471 0.8863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 190.3497 0.0 lineto

 193.82338 -3.47368 lineto

 193.82338 -19.8855 lineto

 190.3497 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 -71 783 a
Fc(demander)351 783 y

 351 783 a 351 783 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.53674 79.28271 0.0 -2.21669 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 1.99252 0.0 ] concat

 pgfs



 0 setgray
 351 783 a Fb(Saisir)g(un)h
(nombre)351 783 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.8 setgray}def

 0.49814 pgfw

 0.0 -2.21669 moveto

 0.0 9.32005 lineto

 79.28271 9.32005 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1037 783 a Fc(et)f(attendre)-71 783
y


 pgfr

 restore

 restore

 save

 /pgfsc{0.138 0.51767 0.70905 setrgbcolor}def

 193.82338 -3.47368 moveto

 193.82338 -19.8855 lineto

 190.3497 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.338 0.71768 0.90904 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 190.3497 0.0 lineto

 193.82338 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 3169 1010 4 245 v 3578 817 a Fg(2)p 4024 1010 V -128
1264 4 255 v -71 1017 a

 -71 1017 a -71 1017 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 146.87183 0.0 lineto

 150.3455 -3.47368 lineto

 150.3455 -22.31631 lineto

 146.87183 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -17.13748 ] concat

 pgfs



 1 setgray
 -71 1017
a Fc(mettre)209 1017 y

 209 1017 a 209 1017 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 209 1017
a Fc(x)209 1017 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 353 1017 a Fc(\340)425 1017 y

 425 1017
a 425 1017 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 40.20396 12.26903 moveto

 71.64084 12.26903 lineto

 76.48283 12.26903 80.40794 8.34392 80.40794 3.50192 curveto

 80.40794 -1.34006 76.48283 -5.26517 71.64084 -5.26517 curveto

 8.76709 -5.26517 lineto

 3.9251 -5.26517 0.0 -1.34006 0.0 3.50192 curveto

 0.0 8.34392 3.9251 12.26903 8.76709 12.26903 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.66277 0.0 ] concat

 pgfs



 1 setgray
 428 1017 a

 428 1017 a 428 1017 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 22.83887 10.54549 moveto

 38.63419 10.54549 lineto

 42.52428 10.54549 45.67773 7.39201 45.67773 3.50192 curveto

 45.67773 -0.38815 42.52428 -3.54163 38.63419 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.46146 0.0 ] concat

 pgfs



 1 setgray
 428 1017
a Fc(r\351ponse)428 1017 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 38.63419 -3.54163 lineto

 42.53426 -3.54163 45.67773 -0.39815 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 38.63419 10.54549 lineto

 42.53426 10.54549 45.67773 7.40201 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 836 1017 a Fc(+)907 1017 y


907 1017 a 907 1017 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 907 1017 a Fc(5)907 1017 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 425
1017 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.28864 0.57408 0.05649 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -1.35248 3.91267 -5.26517 8.76709 -5.26517 curveto

 71.64084 -5.26517 lineto

 76.49525 -5.26517 80.40794 -1.35248 80.40794 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.48863 0.77408 0.25648 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 8.35634 3.91267 12.26903 8.76709 12.26903 curveto

 71.64084 12.26903 lineto

 76.49525 12.26903 80.40794 8.35634 80.40794 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71 1017 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 150.3455 -3.47368 moveto

 150.3455 -22.31631 lineto

 146.87183 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 3.47368 -25.79 moveto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 146.87183 0.0 lineto

 150.3455 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 3169 1264 4 255 v 3578 1061 a Fg(3)p
4024 1264 V -128 1519 V -71 1272 a

 -71 1272 a -71 1272
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 113.3384 0.0 lineto

 116.81207 -3.47368 lineto

 116.81207 -22.31631 lineto

 113.3384 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -17.13748 ] concat

 pgfs



 1 setgray
 -71 1272 a Fc(mettre)209 1272 y

 209 1272 a 209 1272
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 209 1272 a Fc(x)209 1272 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 353 1272 a Fc(\340)425 1272
y

 425 1272 a 425 1272 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 23.43724 12.26903 moveto

 38.1074 12.26903 lineto

 42.9494 12.26903 46.8745 8.34392 46.8745 3.50192 curveto

 46.8745 -1.34006 42.9494 -5.26517 38.1074 -5.26517 curveto

 8.76709 -5.26517 lineto

 3.9251 -5.26517 0.0 -1.34006 0.0 3.50192 curveto

 0.0 8.34392 3.9251 12.26903 8.76709 12.26903 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.66277 0.0 ] concat

 pgfs



 1 setgray
 428 1272 a

 428 1272 a 428 1272
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 428 1272 a Fc(x)428 1272 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 572 1272 a Fc(*)628 1272
y

 628 1272 a 628 1272 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 628 1272 a Fc(2)628 1272 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 425
1272 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.28864 0.57408 0.05649 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -1.35248 3.91267 -5.26517 8.76709 -5.26517 curveto

 38.1074 -5.26517 lineto

 42.96182 -5.26517 46.8745 -1.35248 46.8745 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.48863 0.77408 0.25648 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 8.35634 3.91267 12.26903 8.76709 12.26903 curveto

 38.1074 12.26903 lineto

 42.96182 12.26903 46.8745 8.35634 46.8745 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71 1272 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 116.81207 -3.47368 moveto

 116.81207 -22.31631 lineto

 113.3384 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 3.47368 -25.79 moveto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 113.3384 0.0 lineto

 116.81207 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 3169 1519 4 255 v 3578 1316 a Fg(4)p
4024 1519 V -128 1774 V -71 1526 a

 -71 1526 a -71 1526
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 146.00494 0.0 lineto

 149.47862 -3.47368 lineto

 149.47862 -22.31631 lineto

 146.00494 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -17.13748 ] concat

 pgfs



 1 setgray
 -71 1526 a Fc(mettre)209 1526 y

 209 1526 a 209 1526
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 209 1526 a Fc(x)209 1526 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 353 1526 a Fc(\340)425 1526
y

 425 1526 a 425 1526 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 39.77052 12.26903 moveto

 70.77396 12.26903 lineto

 75.61595 12.26903 79.54106 8.34392 79.54106 3.50192 curveto

 79.54106 -1.34006 75.61595 -5.26517 70.77396 -5.26517 curveto

 8.76709 -5.26517 lineto

 3.9251 -5.26517 0.0 -1.34006 0.0 3.50192 curveto

 0.0 8.34392 3.9251 12.26903 8.76709 12.26903 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.66277 0.0 ] concat

 pgfs



 1 setgray
 428 1526 a

 428 1526 a 428 1526
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 428 1526 a Fc(x)428 1526 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 572 1526 a Fc(-)627 1526
y

 627 1526 a 627 1526 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 22.83887 10.54549 moveto

 38.63419 10.54549 lineto

 42.52428 10.54549 45.67773 7.39201 45.67773 3.50192 curveto

 45.67773 -0.38815 42.52428 -3.54163 38.63419 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.46146 0.0 ] concat

 pgfs



 1 setgray
 627 1526 a Fc(r\351ponse)627
1526 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 38.63419 -3.54163 lineto

 42.53426 -3.54163 45.67773 -0.39815 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 38.63419 10.54549 lineto

 42.53426 10.54549 45.67773 7.40201 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 425 1526 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.28864 0.57408 0.05649 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -1.35248 3.91267 -5.26517 8.76709 -5.26517 curveto

 70.77396 -5.26517 lineto

 75.62837 -5.26517 79.54106 -1.35248 79.54106 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.48863 0.77408 0.25648 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 8.35634 3.91267 12.26903 8.76709 12.26903 curveto

 70.77396 12.26903 lineto

 75.62837 12.26903 79.54106 8.35634 79.54106 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71 1526 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 149.47862 -3.47368 moveto

 149.47862 -22.31631 lineto

 146.00494 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 3.47368 -25.79 moveto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 146.00494 0.0 lineto

 149.47862 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 3169 1774 4 255 v 3578 1570
a Fg(5)p 4024 1774 V -128 2018 4 245 v -71 1791 a

 -71
1791 a -71 1791 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.5412 0.3333 0.8431 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 236.50652 0.0 lineto

 239.98021 -3.47368 lineto

 239.98021 -19.8855 lineto

 236.50652 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 -71 1791 a Fc(dire)106 1791 y

 106 1791
a 106 1791 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.53674 43.75594 0.0 -2.21669 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 1.99252 0.0 ] concat

 pgfs



 0 setgray
 106 1791 a Fb(reg)o(roupe)106 1791 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.8 setgray}def

 0.49814 pgfw

 0.0 -2.21669 moveto

 0.0 9.32005 lineto

 43.75594 9.32005 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 496
1791 a Fc(Le)g(pr)n(ogramme)g(de)g(calcul)h(donne)1726
1791 y

 1726 1791 a 1726 1791 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 1726 1791 a Fc(x)1726
1791 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71 1791 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.43295 0.26663 0.67447 setrgbcolor}def

 239.98021 -3.47368 moveto

 239.98021 -19.8855 lineto

 236.50652 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.63297 0.46664 0.87448 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 236.50652 0.0 lineto

 239.98021 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 3169 2018 4 245 v 3578 1825 a Fg(6)p
4024 2018 V -128 2021 4156 4 v 0 TeXcolorgray 0 TeXcolorgray
-128 2249 3117 4 v -128 2418 4 170 v -74 2371 a(L)o(utin)18
b(n)174 2347 y Fa(o)218 2371 y Fg(2)p 2985 2418 V -128
2422 3117 4 v -128 2741 4 320 v -71 2514 a

 -71 2514 a
-71 2514 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgfsc{0.7843 0.5137 0.1882 setrgbcolor}def

 /pgffc{0.7843 0.5137 0.1882 setrgbcolor}def

 0.0 0.0 moveto

 18.50572 10.68425 36.28949 10.68425 54.79523 0.0 curveto

 153.18765 0.0 lineto

 156.66133 -3.47368 lineto

 156.66133 -19.8855 lineto

 153.18765 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 0.0 lineto

 closepath

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 -71 2514 a Fc(Quand)k(je)h(re\347ois)578 2514
y

 578 2514 a 578 2514 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 34.1912 10.54549 moveto

 61.33882 10.54549 lineto

 65.22891 10.54549 68.38239 7.39201 68.38239 3.50192 curveto

 68.38239 -0.38815 65.22891 -3.54163 61.33882 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.46146 0.0 ] concat

 pgfs



 1 setgray
 578 2514 a Fc(nombre)g(saisi)578
2514 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 61.33882 -3.54163 lineto

 65.2389 -3.54163 68.38239 -0.39815 68.38239 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 61.33882 10.54549 lineto

 65.2389 10.54549 68.38239 7.40201 68.38239 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71 2514 a


 pgfr

 restore

 restore

 restore

 save

 /pgfsc{0.62744 0.41096 0.15056 setrgbcolor}def

 156.66133 -3.47368 moveto

 156.66133 -19.8855 lineto

 153.18765 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.82744 0.61096 0.35056 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 0.0 lineto

 0.0 0.0 lineto

 18.50572 10.68425 36.28949 10.68425 54.79523 0.0 curveto

 153.18765 0.0 lineto

 156.66133 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 2985 2741 4 320 v -128 2992 4 251 v
-71 2744 a

 -71 2744 a -71 2744 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 144.92902 0.0 lineto

 148.4027 -3.47368 lineto

 148.4027 -22.31631 lineto

 144.92902 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -17.13748 ] concat

 pgfs



 1 setgray
 -71 2744 a Fc(mettre)209
2744 y

 209 2744 a 209 2744 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 209 2744 a Fc(x)209 2744
y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 353 2744 a Fc(\340)425 2744 y

 425 2744 a 425 2744 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 39.23256 12.26903 moveto

 69.69803 12.26903 lineto

 74.54002 12.26903 78.46512 8.34392 78.46512 3.50192 curveto

 78.46512 -1.34006 74.54002 -5.26517 69.69803 -5.26517 curveto

 8.76709 -5.26517 lineto

 3.9251 -5.26517 0.0 -1.34006 0.0 3.50192 curveto

 0.0 8.34392 3.9251 12.26903 8.76709 12.26903 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.66277 0.0 ] concat

 pgfs



 1 setgray

425 2744 a

 425 2744 a 425 2744 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 425 2744 a Fc(7)425
2744 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 559 2744 a Fc(*)618 2744 y

 618 2744 a 618 2744
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 22.83887 10.54549 moveto

 38.63419 10.54549 lineto

 42.52428 10.54549 45.67773 7.39201 45.67773 3.50192 curveto

 45.67773 -0.38815 42.52428 -3.54163 38.63419 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.46146 0.0 ] concat

 pgfs



 1 setgray
 618 2744 a Fc(r\351ponse)618 2744 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 38.63419 -3.54163 lineto

 42.53426 -3.54163 45.67773 -0.39815 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 38.63419 10.54549 lineto

 42.53426 10.54549 45.67773 7.40201 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 425 2744 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.28864 0.57408 0.05649 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -1.35248 3.91267 -5.26517 8.76709 -5.26517 curveto

 69.69803 -5.26517 lineto

 74.55244 -5.26517 78.46512 -1.35248 78.46512 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.48863 0.77408 0.25648 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 8.35634 3.91267 12.26903 8.76709 12.26903 curveto

 69.69803 12.26903 lineto

 74.55244 12.26903 78.46512 8.35634 78.46512 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71
2744 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 148.4027 -3.47368 moveto

 148.4027 -22.31631 lineto

 144.92902 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 3.47368 -25.79 moveto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 144.92902 0.0 lineto

 148.4027 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 2985 2992 4 251 v -128 3222 4 231 v -71 2995 a


-71 2995 a -71 2995 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 102.65799 0.0 lineto

 106.13168 -3.47368 lineto

 106.13168 -19.8855 lineto

 102.65799 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 -71 2995 a Fc(mettre)209 2995 y


209 2995 a 209 2995 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 209 2995 a Fc(x)209 2995 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 353
2995 a Fc(\340)425 2995 y

 425 2995 a 425 2995 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 425 2995
a Fc(x)425 2995 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 569 2995 a Fc(-)620 2995 y

 620 2995
a 620 2995 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 6.62517 10.0897 moveto

 6.62517 10.0897 lineto

 10.2842 10.0897 13.25034 7.12357 13.25034 3.46454 curveto

 13.25034 -0.19447 10.2842 -3.16061 6.62517 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.85555 0.0 ] concat

 pgfs



 0 setgray
 620 2995 a Fc(8)620 2995 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -71 2995 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 106.13168 -3.47368 moveto

 106.13168 -19.8855 lineto

 102.65799 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 102.65799 0.0 lineto

 106.13168 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 2985
3222 4 231 v -128 3452 V -71 3225 a

 -71 3225 a -71 3225
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.5412 0.3333 0.8431 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 236.50652 0.0 lineto

 239.98021 -3.47368 lineto

 239.98021 -19.8855 lineto

 236.50652 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -15.60027 ] concat

 pgfs



 1 setgray
 -71 3225 a Fc(dire)106 3225 y

 106 3225 a 106 3225 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 11.53674 43.75594 0.0 -2.21669 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 1.99252 0.0 ] concat

 pgfs



 0 setgray

106 3225 a Fb(reg)o(roupe)106 3225 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.8 setgray}def

 0.49814 pgfw

 0.0 -2.21669 moveto

 0.0 9.32005 lineto

 43.75594 9.32005 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 496 3225 a Fc(Le)g(pr)n(ogramme)g
(de)g(calcul)h(donne)1726 3225 y

 1726 3225 a 1726 3225
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 1726 3225 a Fc(x)1726 3225 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 -71 3225 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.43295 0.26663 0.67447 setrgbcolor}def

 239.98021 -3.47368 moveto

 239.98021 -19.8855 lineto

 236.50652 -23.35919 lineto

 30.34657 -23.35919 lineto

 26.8729 -26.83287 lineto

 16.91013 -26.83287 lineto

 13.43645 -23.35919 lineto

 3.47368 -23.35919 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.63297 0.46664 0.87448 setrgbcolor}def

 3.47368 -23.35919 moveto

 0.0 -19.8855 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 236.50652 0.0 lineto

 239.98021 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 2985 3452 4
231 v -128 3455 3117 4 v -128 3524 a
SDict begin H.S end
 -128 3524 a -128
3524 a
SDict begin 12 H.A end
 -128 3524 a -128 3524 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -128 3524 a 0 TeXcolorgray
-26 3604 a Fh(1.)p 0 TeXcolorgray 42 w Fg(V\351r)q(i\002er)17
b(que)h(si)g(on)f(saisit)i(7)e(comme)i(nombr)o(e)o(,)e(le)g(lutin)i(n)
1830 3580 y Fa(o)1873 3604 y Fg(1)f(af\002che)g(comme)g(r\351sultat)h
(17)f(et)f(le)h(lutin)h(n)3228 3580 y Fa(o)3271 3604
y Fg(2)f(af\002che)f(41.)-128 3635 y
SDict begin H.S end
 -128 3635 a -128
3635 a
SDict begin 12 H.A end
 -128 3635 a -128 3635 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -128 3635 a 0 TeXcolorgray
-26 3733 a Fh(2.)p 0 TeXcolorgray 42 w Fg(Quel)h(r\351sultat)g
(af\002che)g(le)g(lutin)g(n)1098 3709 y Fa(o)1142 3733
y Fg(2)f(si)h(on)g(saisit)g(le)g(nombr)o(e)f Fd(\241)p
Fg(4)9 b(?)-128 3762 y
SDict begin H.S end
 -128 3762 a -128 3762 a
SDict begin 12 H.A end
 -128 3762
a -128 3762 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -128 3762 a -128 3762 a
SDict begin H.S end
 -128 3762 a -128
3762 a
SDict begin 12 H.A end
 -128 3762 a -128 3762 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -128 3762 a 0 TeXcolorgray
-26 3861 a Fh(3.)p 0 TeXcolorgray 0 TeXcolorgray 88 w
Fg(\()p Fh(a)p Fg(\))p 0 TeXcolorgray 41 w(S)o(i)19 b(on)h(appelle)k
Fe(x)g Fg(le)d(nombr)o(e)e(saisi,)i(\351cr)q(ir)o(e)d(en)i(fonction)h
(de)h Fe(x)j Fg(les)20 b(expr)o(essions)h(qui)f(tr)o(aduisent)h(le)f
(progr)o(amme)g(de)g(calcul)263 3961 y(du)d(lutin)h(n)599
3937 y Fa(o)643 3961 y Fg(1,)g(\340)f(chaque)h(\351tape)g(\(instr)q
(uctions)h(3)f(\340)f(5\).)-128 3993 y
SDict begin H.S end
 -128 3993 a -128
3993 a
SDict begin 12 H.A end
 -128 3993 a -128 3993 a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -128 3993 a 0 TeXcolorgray
121 4090 a Fg(\()p Fh(b)p Fg(\))p 0 TeXcolorgray 42 w(M)n(ontr)o(er)f
(que)i(cette)g(expr)o(ession)h(peut)f(s)m('\351cr)q(ir)o(e)h
Fe(x)c Fd(\305)10 b Fg(10.)-128 4122 y
SDict begin H.S end
 -128 4122 a -128
4122 a
SDict begin 12 H.A end
 -128 4122 a -128 4122 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -128 4122 a 0 TeXcolorgray
-26 4219 a Fh(4.)p 0 TeXcolorgray 42 w Fg(C\351lia)18
b(af\002r)q(me)f(que)g(plusieurs)j(instr)q(uctions)e(dans)f(le)h(scr)q
(ipt)f(du)g(lutin)h(n)2266 4195 y Fa(o)2310 4219 y Fg(1)f(peuvent)i
(\352tr)o(e)e(suppr)q(im\351es)i(et)e(r)o(emplac\351es)i(par)d(celle)80
4384 y(ci-contr)o(e)o(.)566 4240 y

 566 4240 a 566 4240
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 1 setlinecap

 save

 restore

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 3.47368 0.0 moveto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 149.8017 0.0 lineto

 153.27539 -3.47368 lineto

 153.27539 -22.31631 lineto

 149.8017 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 save

 [1.0 0.0 0.0 1.0 4.98138 -17.13748 ] concat

 pgfs



 1 setgray
 566 4240 a Fc(mettre)846 4240 y

 846 4240 a 846 4240
a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 7.04355 10.54549 moveto

 7.04355 10.54549 lineto

 10.93365 10.54549 14.08711 7.39201 14.08711 3.50192 curveto

 14.08711 -0.38815 10.93365 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.27394 0.0 ] concat

 pgfs



 1 setgray
 846 4240 a Fc(x)846 4240 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 7.04355 -3.54163 lineto

 10.94363 -3.54163 14.08711 -0.39815 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 7.04355 10.54549 lineto

 10.94363 10.54549 14.08711 7.40201 14.08711 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 990 4240 a Fc(\340)1062
4240 y

 1062 4240 a 1062 4240 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 save

 /pgffc{0.3608 0.7176 0.0706 setrgbcolor}def

 41.6689 12.26903 moveto

 74.57071 12.26903 lineto

 79.4127 12.26903 83.33781 8.34392 83.33781 3.50192 curveto

 83.33781 -1.34006 79.4127 -5.26517 74.57071 -5.26517 curveto

 8.76709 -5.26517 lineto

 3.9251 -5.26517 0.0 -1.34006 0.0 3.50192 curveto

 0.0 8.34392 3.9251 12.26903 8.76709 12.26903 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 4.66277 0.0 ] concat

 pgfs



 1 setgray
 1065 4240 a

 1065 4240
a 1065 4240 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 save

 /pgffc{0.9333 0.4902 0.0863 setrgbcolor}def

 22.83887 10.54549 moveto

 38.63419 10.54549 lineto

 42.52428 10.54549 45.67773 7.39201 45.67773 3.50192 curveto

 45.67773 -0.38815 42.52428 -3.54163 38.63419 -3.54163 curveto

 7.04355 -3.54163 lineto

 3.15346 -3.54163 0.0 -0.38815 0.0 3.50192 curveto

 0.0 7.39201 3.15346 10.54549 7.04355 10.54549 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 3.46146 0.0 ] concat

 pgfs



 1 setgray
 1065 4240 a Fc(r\351ponse)1065 4240 y


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -0.39815 3.14348 -3.54163 7.04355 -3.54163 curveto

 38.63419 -3.54163 lineto

 42.53426 -3.54163 45.67773 -0.39815 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 7.40201 3.14348 10.54549 7.04355 10.54549 curveto

 38.63419 10.54549 lineto

 42.53426 10.54549 45.67773 7.40201 45.67773 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 1472
4240 a Fc(+)1544 4240 y

 1544 4240 a 1544 4240 a


 pgfo

 save

 1 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 8.0901 10.0897 moveto

 9.55504 10.0897 lineto

 13.21407 10.0897 16.18022 7.12357 16.18022 3.46454 curveto

 16.18022 -0.19447 13.21407 -3.16061 9.55504 -3.16061 curveto

 6.62517 -3.16061 lineto

 2.96614 -3.16061 0.0 -0.19447 0.0 3.46454 curveto

 0.0 7.12357 2.96614 10.0897 6.62517 10.0897 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 2.55087 0.0 ] concat

 pgfs



 0 setgray
 1544
4240 a Fc(10)1544 4240 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 1062 4240 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.28864 0.57408 0.05649 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 -1.35248 3.91267 -5.26517 8.76709 -5.26517 curveto

 74.57071 -5.26517 lineto

 79.42513 -5.26517 83.33781 -1.35248 83.33781 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.48863 0.77408 0.25648 setrgbcolor}def

 0.0 3.50192 moveto

 0.0 8.35634 3.91267 12.26903 8.76709 12.26903 curveto

 74.57071 12.26903 lineto

 79.42513 12.26903 83.33781 8.35634 83.33781 3.50192 curveto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 566 4240 a


 pgfr

 restore

 restore

 save

 /pgfsc{0.74664 0.39217 0.06905 setrgbcolor}def

 153.27539 -3.47368 moveto

 153.27539 -22.31631 lineto

 149.8017 -25.79 lineto

 30.34657 -25.79 lineto

 26.8729 -29.26367 lineto

 16.91013 -29.26367 lineto

 13.43645 -25.79 lineto

 3.47368 -25.79 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 save

 /pgfsc{0.94664 0.59216 0.26904 setrgbcolor}def

 3.47368 -25.79 moveto

 0.0 -22.31631 lineto

 0.0 -3.47368 lineto

 3.47368 0.0 lineto

 13.43645 0.0 lineto

 16.91013 -3.47368 lineto

 26.8729 -3.47368 lineto

 30.34657 0.0 lineto

 149.8017 0.0 lineto

 153.27539 -3.47368 lineto

 gsave pgfsc pgfstr grestore newpath

 restore

 restore

 newpath

 restore

 pgfc


 80 4560
a Fg(I)o(ndiquer)-5 b(,)18 b(sur)f(la)h(copie)o(,)g(les)g(num\351ros)g
(des)f(instr)q(uctions)i(qui)f(sont)g(alors)f(inutiles)o(.)-128
4592 y
SDict begin H.S end
 -128 4592 a -128 4592 a
SDict begin 12 H.A end
 -128 4592 a -128 4592
a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -128 4592 a 0 TeXcolorgray -26 4689 a Fh(5.)p 0 TeXcolorgray
42 w Fg(P)m(aul)h(a)f(saisi)h(un)g(nombr)o(e)f(pour)h(lequel)h(les)f
(lutins)h(n)1662 4665 y Fa(o)1705 4689 y Fg(1)f(et)g(n)1893
4665 y Fa(o)1936 4689 y Fg(2)g(af\002chent)g(le)f(m\352me)i
(r\351sultat.)g(Quel)f(est)g(ce)f(nombr)o(e)9 b(?)p 0
TeXcolorgray 3987 5895 a(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
