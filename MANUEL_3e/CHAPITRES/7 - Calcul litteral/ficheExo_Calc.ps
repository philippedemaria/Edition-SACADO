%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: ficheExo_Calc.dvi
%%CreationDate: Sun Apr 15 10:25:14 2018
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Utopia-Regular Dingbats Utopia-Bold MSAM10
%%+ Fourier-Math-Letters-Italic Utopia-Italic Fourier-Math-Symbols
%%+ Fourier-Math-Extension
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ficheExo_Calc.ps
%+ ficheExo_Calc.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.04.15:1025
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 918 2014-05-19 12:32:37Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.16 / 2014-05-07  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%
/Si { % integral sin from 0 to x (arg on stack)
  /arg exch def
  /Sum arg def
  /sign -1 def
  /index 3 def
  { 
    arg index exp index div index factorial div sign mul 
    dup abs eps8 lt { pop exit } if 
    Sum add /Sum exch def
    /sign sign neg def
    /index index 2 add def
  } loop
  Sum
} def
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
/Ci { % integral cosin from x to infty (arg on stack)
  abs /arg exch def
  arg 0 eq { 0 } { 
    /argExp 1 def
    /fact 1 def
    /Sum CEuler arg ln add def
    /sign -1 def
    /index 2 def
    { 
      /argExp argExp arg arg mul mul def
      /fact fact index 1 sub index mul mul def
      argExp index div fact div sign mul 
      dup abs exch Sum add /Sum exch def
      eps8 lt { exit } if
      /sign sign neg def
      /index index 2 add def
    } loop
    Sum
  } ifelse
} def
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M   --- simple version ---
% /SFunc must be defined 
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /x k 2 mul 1 sub h mul a add def
    /s1 s1 x SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /x k 2 mul h mul a add def
    /s2 s2 x SFunc add def
  } for
  /I a SFunc b SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
5296FB33A7C728385CE3A6CF8AE664B90042462B94A015D5E8704070AA59636F
6DC7EF0DA3F7829296DCB0F695A236FDFDF7F6259B93A89085A7E9C818578EB4
A5B62CE7194D5AD4ED8D7C0A1593641F0609FBBBE7EEBD2D0C6FCB75E7A5907A
D7EDDB8B14D3295A425583E66138AE558807F859688E51C1788E04F8FF6AF035
3ED1B6827637A8043A451DED8B6A6F25C04968AAB2910DF1314D1B4A010CD4ED
2FD8455FE6FB032968765E65BE3556338A12454E8BCF6DC82DF9529B9BA37245
C3A13FA42B9C8A9C98B34D79C82F9E61598ECE57E551BF193BF37ACA22B901DE
D22B528806F4D4A0BFA0253A5BF89BA1451F39C395A8026A725FA8746E36EA41
C57E7E0A23C7592786987A899E28EFCEF81C18AC249388867DA67DA44DF3E926
AE8AEBFDFDD85BFFA477D990FECD8CFAA40F133E5B492B50B5B0A56669AE03A0
F69BA3A59693416B6758A4EE5CA1F3AC445031ED0B3FF53DD57E53AB4918EDBF
1B76FFC1DC977E95A4B4BF0AB273EAE0E4C1613540117E10965F800C4D68FC6C
6E6B1D1D19023A9F88A39807511D45410BFB50959821E14F973B43BE23DD4755
8EA0E536FA063D6DBE5E0587A1CCE422CB13471E3FABC48437040563AEC3FF18
E73E781CA45857DDE560013B3B394283B77D62FAEB6119E0E45D3C997CF952A4
EF7713EFF5620309096E21A686825B3FF021709810ED004976DC33831D413CD1
10DE5D757A13E41BC82D0980459AEA993B1A885E53B69F001742690F9808BF40
F20BC69852916113CBB5158E5DFC873FA6B0C2D93D9F77230D85A609807A5168
4145A8BE6A43975C6889379218C0E12D931BF34FB85047FB40947EC4EF31C974
2197948EFB982E4BB6CD532F97CED47EE0E668886402A70535A4371470C8722B
AB5391269E14D63966F24DBE98209AA92EF9AABC9701C6ECBE840C85B32460FD
E9600E322B3A79E6A6B00721DADEDE87A1F4A7A71EB67A333895BA33E5B0AD00
45DC63C3051C2FDB94BB577C65236F7AF7590DF6DF7844709C82580A887AF14C
267C1CB7286C5B95BFDD8148F97BAABAE79B5BCC56001A05F2DB86521C91F96B
329779E9D608A68E94392FAD19640C59CB2243CF52BFAF0D5B67BDEA736E0647
6732FB24541F109FAC277F474AF8A3CF51252820E23FEEE145025008B9F0E479
329ABD6DCBB4B3F18A240EEE9F1299D00518FD9EC0423F951E652F7C69ECCCFC
E1A3082D61C3A1F38AE34906769C9EB7CDE3F861839EA22B2C942520D8CB1D59
CA27DE88361E23740B6BCA5C7794420B43FC862C057D5F7778F34B70C9E39E6A
99ADE79C367DA074BDB86D2BCB48C69E074B263DFB6FE5B486450C36C74E3C80
0BBBEB94ED43124B42F0FB0F26398FE89D87392BB09381AD5D402CFD5817618E
CAC20ED17BF136B008A744F921106509D02C6FDDFE7DCF86D9ECFE5848CD54EF
4DB6E9698459E3407BAEADEE68B108FBB77E4CED0D96B41727A72FC5E7843269
320918CD87A1DCB885BE334806070B6162FDB3B1963C774947AAE7AAB8B2113F
18BDEEE8D0D57B09EF8A8483FF18714EDE7CB1ADC78A862CDFBA97A8CCE52857
FF049C4D7ACE99FBA6A695023DAA179D9F9AEA8F8105EE8EB72F30468065D190
724EC6D503D66D14E107D39E139E8DBFBEBFF676A80C637A695AC3623EB60147
B9CDC8E8762893BF85EED01AD961BFC92C9ED8B4CAE1564F2D3FE99E785C1A8B
2631C178DF42B2C54E643C9D238EAFE23E790522806FF9C2495C7313380C41FB
FBBDF8E4E4B8E8E1418DC2437133F753DEF6853DD9D5BF261DC55FCC28529A20
B65F4E2E375762090472DB1CFDF98D87B668A04B3BC3AB5787A3C1838C92320E
99B9F219D67CE6072F7D8530D4601BC0E4A06B18F1FC0F2C91A190183E09E3B8
0685FAE9728C31F96D1D6108D7369A8D1D975A3D6B7F5E20BDC0D2AEC81319FF
ECDD178D4F777D2AB46757936827B71F629BE084772A359FB2DF0ADD82358B86
36309B752A13528B64141314CE48952F29DF4B5AC7C1EE1C4293A042585EE99F
D49D0BF4192FC29AA985BF75316C4B1A39F7B3F64411CA17B1F92DB7887A6A9D
9F41C2C3F1F4F5DF0540063E9C06B00EC5CB3FE06DF4A4289EAD07FE65F1F05B
4A6068104ECEE23E1680B00422D9A279B1EEC38156D7D39B1850133125574DC6
47BF633C36CB1B2A24E0AF065890A92679F58C396BB6887B45ED1ED8BB7870CD
FCAD9723E9BF3DB9291375419250F92D6F3E6C2D25595969EB32227A3AF83E24
0A07F5A53B87B1ABD2507D64E8E7C5F4B99A9C154668DD6B562F704455B72B4B
B608BA192216CCB638709C49EB674E25C630480A76AC0F3C1C2F1D7EE40DF168
6B466E628A1D94FA933299263484D37626B8BF3E01297F680C1D17B13ED5608C
6F59F17F80D469753A50CC0E74977CCA25757A795766249580B771CDAD8021BF
B2DB4F04CB6A05C039C111B346B8EC57A4E8CAE557ED66360644C5C6B7B5B214
A96AFBA73D0C4E9DF81B2CF4F451F60F36AE38D8E6E6B9718F924EB0759ADDDE
B32307F90F564ADE09F1B75C68933300F5C03070C8948995F6F36A3419B8260A
0A5F5658FB1B2005D5D7DC505CD4406771F7CFCFB62238D8E4FCB02C9DA4C2E8
DEA86C3C43930D5F5C2ED993E3FE9C0565E0706456364133DB95EDD03199BEB3
E07619E049B00F590EAF4ADCC1D1195D91EE44B2F7BEEB5A73A98F10D6AA4CE9
239453A08E69E5F314912EDF4315E2215F737274D50A31534CBA7DCBD22AB17D
E85D57CC54F273399DD313C5BE04B7877B352358EE311AB6D671BCF14DEED225
4650AE01681D621BB47D81EA1FDF8D6D1B0C388F1515D380A4D8928453F35F29
828D7DC9581B195F7B8D3C5722A4D943BD7EBF9A5B660BB90ACB7C7789622F49
1ED94B4CDB40B573A69A61AB7A65167B9C6E549B3D7FFCC12CD63BE92C62C105
3EDCE4112DB863B9A620E8A295099855CF6A738562B9247BABA4BC1767FFED5E
34F70561FFD4DE9530722864724A9BC50C14DD8CA762118F86884EB49A72EF70
B3490F717EEC3C2C528C77903BDB682A8AF7821AF55793395E144B148236B550
33A11D36723108265DF004563C399F0FD1EF2E5544FC9C68C3F635887A2340E2
1AEDE9D55C8CBA3EB0BC0F896A0064428BDCD23FACA304882F2AE8D243EEDB95
5513F41C0344F32EFC6AF81134ADC1A6B6DD1A51C4EF9878145E5B330EE04BD8
A1DC24E0081D645083CB8CABF7E237E0409EADEE3D3797B33682A51642BA27FB
6EF7A00B678CB486986D95DA08AAC25A0E32F33C1F531B0D8E1EED8C56725ADE
544EEE1B5F966BBA971E35DE1AE3EAD8854E4313E3F66BD06EEFB601E52DFC41
F77FA139722F8E88940A93D2B357660873FB319691A62DD5B665D01CE52F345A
87CB5A7603CE81B8D7F818939BAD025954BB779C8F87509743C3C9988C4CEF61
9C590C25679E0EF94E603D88211616619A1902B7FA0D3D7F319846F0BED6D285
851621F38703A910C0C86FD39D6EB5B07B3AC6B36D2B23677B408A3F7CADF09D
8FCC0744C6E66618CE3C5091ED6C0F733B312E0315E7E13A069996842A8A7B44
9FE1D1AB77DC266B84B6102258E0AB0AD7AB9C7E7FB498E88120CCF8B7FB7FA7
1528AD849443CA06C0F2D9E6B8CE8CF9C12D288635D50355749D08C8C57A4720
14F90553441659F3B636DFD18839ABF1E9CE08A242C5E0FDF6AFFC09271852AB
2FB7AEE9B46C16B14A018B8109A42B37BDFF67A18288DF6C2C8C65C10FA7399F
ACE02A9D0DFA293BE262D6D221B7905A62CE11E8AC05D2A5D06B580C3A67A90A
BF4BE854F4A06CB5D0B529CBAE4AEB53596D23D81EC5967D9E50627AA650A198
8615D9501A3014CD898DEB1A6CF2320516B77B9EB60BC8E8E94C39C18A26349C
CBFA85D1686ADBD6A302E6BDFF90DA827BF8D402031570E10DDC83CC26CBB47A
3174B2D1BC64F8850E614166AD9B50627AA65513D1AFFAECDE3ED51FC7A5923C
507E83E8AD802D6B5DE9B02E6A612EA05AC10C32D9BEB21C6D4FF1901094B584
55F1A10D6AF5B17985160C65004C67881906142B6AA54CB5DC796F4478FEE968
DAAAB2896FFDF569070C62EF5D602A07D80121801615D6C37B6C475AB50B0F60
6603BEB66198920E77E7150CB9A33D0F92F4313D1449B0A8D6F3EFF89CB90D93
FA215065ED2C78DFA3281493D7A7903FEE8AC04618D40E0CFDE36CFE964A70EC
2280B29BDAF4F610683BEA98EB2B4E3DD2E25F1CDA903944B8CC94C832DFB948
D077AC7B57137873AE88D6EDFB540C7477B6CF0E76FE0A9305DE4283D9697D00
44E557FBC52704235FEBAC54190F94F2B5338FB57A37211CC8F005173D78CA38
0FA816B0DA46893208EF88352E771951C9E67E96EA825E89A232B2533A2291B2
6E5849AB169B7AD332385DD7A64B4CC91386C4ADDD575F1DE93C4CD573958616
DCB6C591E015E6119EACE6EAF5FDB41752321B9B31BCC8065CE83795F3D2292B
D7F49F5D18C3E585EA2008B638A4C935C8D282FFE9A5811C0009D0363830D1DC
4730787677BDBBD26AB5EF90FD1EB0BFEF4338890525A384A8CDF19D5AC158D5
3D653D8B072C3F11CF15F6AED61CD52A78B4BAF7B9C9344D588C874F557C3965
CC759617E70BF9A44CECB4BA45C3718367C52B835DD69709DF330A52379C8399
D02004227B1F17190B640F80EC4A178E52B2C31D44BF1CBE0B1B9D79A7650433
CDCF08803C36C1AC11522DC68CBB25636F48E6960FB51396405A4C9D62DB7348
5168AA3FCF6D4C15CE203DC6C75B23CDD5E5EB29C178C0A3B942DE04125016C4
1ABBCFF6EDE499861F4FEF440302D3F50A270F84C3A178796E85518CDC021CDE
783456BFC48FC528813437A0B8975FDDA4653695E5136479A65905FD328E0212
94FBF13BB21564ED0E596CD93B93D454599D85EB7D35201AD31699F97382CD18
445A66CE9C98B199BD156464C681BBF1AEE9AD70D05FCBBCF1464AC91D982CED
26A2EE08EC67484EBE7EDE0A050EF258952ABC0E14777F2755D41B1FA11CCFE8
4BB798632CA9E34E0B842667C339AFE7A93373016B77A11893EF1E9B698729A6
37B9CD63E79FD8BB62B894E0077709663797EA6539AA9F6D7DA480EA18870038
B6EA3C5E734EEEF91E7F43917BA6CCB18094E5CBEB2D332CFD95F8A7D45E5FCB
9A7D3CC82A92464393C65279014BEC7A100C7CCF0200DE0DCF02A127923EB301
481A3CA2FA7EADC461B00BD2567BB07BE7B670B5C4CFA70C2785DEFCC5C21006
B71A4FCF2D9E126230B7B98A6E6AA2689571883A1BAE00D2D47A478EAC363D0D
75733F84F13CDA0B66EF7B0A2B0BFEF3C54BC4CD46657AD1267FC4B53A93BE52
371BD389865191EEEF657F5784D0B66AA0C3A0D880AF6915DD52C89C5D7D115D
20335F66E7F073A95344839B743E8850A697558AC6061813A413A9FFE1D69D40
6B8802E58D01EE519ED1159C00BF64F5721D50BEAD471D93B6428C5E1888B32E
39E39270C3A6F63F6683CF6F2A2D34233A0FBEC8AE654BF23BDBD70A6D6A62EF
CA6151D29951166E7842FE7EE126411CDB15E7013B7DE7BE5C9C782EB39A1068
6137AB4F58C8CDFB2A34FBEB28F43F95EBD8222993DE36956CC1154681CC2ED3
66E93E5C8B5F2421AED9A0E81AB0F7AF191B35DC1F4296AF0A927D5C7DDCD229
5002855338DE039B6BEEB1F8D58F0CE987E3D85FD25296691FB077A64CBF2A6E
724CA5B0B05E30A6AEECE3726EEBBFCA1001E1EE3BE7FDCD5D253FA3D3C4C0A7
48426DBE636EC65C70C3DF29F224EC05FB4EF2A1FAE0D25E6BEA2AC08CC47B68
F1334652408290D0DE835DC0BBBE5D9EB877A5CCAE879F762BF7CE397F9349E3
AD8C2360CC47B187EBEFA361512E05D95A051C413245BACC5B4AD33B69406E37
092710177BA2D1D7F775BB024B68A8AAFB585633EBFD486669942A41A2DAACCF
781BE5361425C154949798AA82080B0B0ED37F9EFAE47FAA59A572D381F7CB8F
B959709895000A49C06ADBF2F0095AB598FE6F70688524E0B4D327DA01637CEE
E4F836C1FBCF55BA91F051DB2A0AD2B7867B6994E2BA2A720AFB762C0398C423
83BF31B6BD5B6BC8A98257918C0462D2C1D17FCF4E84390FA73207E62033C05C
EECAD13A37454729025F144DA5F05D37C5352FFC63EE757648186803F4821182
D7A3486C3ABAD61C11EC619B23DA45C25091EF2A7E3D6BBCDA6525C35B1752D3
58E2528443F75E131CE693731B3E602E392D96D92FC5CCBFC305764A90386362
56EA885CD9DF121101D2E1AB62E30EBA19D8B0BC11A422C42CE581E82E6AA96E
1C796E9F30CBF589AB941348EF181479A7C6A39DCB5A20E395AE649B531827F6
A24D42709DA9971C3D335A8A64AD4BE970A6A9D7AD2F714B5D0F78C6927C14AE
8ABD0E682FB01BB3684D27795A751CBAF829926FFD47254E2F2B8E50CF991BA7
895FE9B3144ECFFADA31473529A1EC2E8AA14636077ED01A318468CD1F57F1A3
3CEB72AFDE7ABDB996582B5445138B798423820CFB27203F06727CF0F5C4530C
B1B2C5ACB70752AF6E4D56ADE830F2F68C45ED7AA5F09D532FF5C52AFAD70B7E
DAA1017B180CBA3A798A1B06D63389A04DCFF12C954F71276A1AAA5F1598DEEA
0A248016B895E46596CF4E35D6EE29FEACB730BAEA462C2031D3CC0DFBB081A8
C18EF04FD9A426063DFD74AD771B5974944B2CB6A5A7B1E640A4C09191C0AD4D
82A933ACFED9A88E8562BABB89F311F38E8071C8CEDCEDEDDFF546C1AE059684
6332E5FB95EEB51255F0BBF983880B83902C20E4E4526ACBDE6CC483930B76C9
7C2CAD0B5F6C0086B82026653E500F71B628C8763BA4DF2411F36A5AD05D483B
99ED3B49603BD57C512C2C6548985B3315DF03EC226A16A7822E6D60BE476655
495E9D7890AE3461EC998773A095A03EF3F4FF58DC8A4F6459915B63628E494B
EDC9B9C7B69236129A36419B2BE4297770A7D562E0FCE27467A1E452B07E15D4
B246A103E324378D1F0D07F66AADF8977011FBEA53A64A9ED286DD04EC72C7A3
BF07DDC7B84C0B4A8233C65E51E34A1C2D85E9B4FB0A5406108FC48BD6B7D4DC
691B535CA6820F38B4B2ED56EBE62532EDB316D35183FB84A1171E4D5FE896AA
75B1140775ABED1360636FDB06AAAA06379C91D6A134411DA6549D32519C5E40
A7C53F853A786275A3206C0B982C2538FA61229224CEC5E9A950C7D09839B0D8
9F46F90924B9FD409ACD4DE9FD467400AD07317657050B628E30A9CA12F38FF8
A2268C0DC6434C00771CF4752F6B56546D498C0BE42DCB47AF0C379B3477DAD4
258572B07B5E6DA34432617CA1F937D8242517FD2CD6FEAF0A323F4AD8F8CCC2
BCEB8769DF9250770DB3C4ABB698901CCA4D3EA7448B9CD0270FEEEA7EE27641
BFC24061197C10CABEAB08F7EBD86D1BB6833EE451493C2FD3734F9B446A40D3
C13B884F5DDB8B4928E24EDA66C9C1C9B2F848102BFA4FC35F3E4266B7D32703
6C55C06788269F434D0A2A060E0664A35CE2BF47E0933FC342E5C696F1C9EF55
AB680FF2F234B79DC66A801D6CFEB35171951BAC42A6FEF7F2350C62A1920117
E001C96635E3D47EE75855E5E7EDA445CEE41CA2ACA7FF6B22CDC0C4A168653C
74CC7989229F6BBEEC92EB12E2941F296C7D1D0682E9F5F2B36DA8A4A7FE7976
EEA01D5E43AC3BD8E240AD81F1145CB0D5739E7DEB295678A89DF5158A61AED1
49F70B1570F9FB747447D41DF7563A998366F31FA2B963A84BB7333422336A95
E7B14FC57B499A55C22F022EB8221ECC5CFF339AA13DCD06BD5E16FEA5EC3A63
B95C7E71FFCB65FD5B4B1DCA2FB1C399F1F19833713A491D6D34C28FA4E73B68
4D3A3B7857C7AE9284B599C63F2F5F88FD000628CA413788B5BF4C4C3CFD7581
BDDC2773B4DFCE60ADFA539978118B095E585CAB4068CBE705CF81C8C029B3C2
39F96D2432507A361BF7F77453E33D66F8932A66E238ADC69C9C2B5091ACA1BD
827F2479ED2C1C9BDA95D269AE96A26A2E0140AFF29B96E3E3EAD19154D4F64F
43652E5DC1D3119B73F04F4013253710CEA18B716771C3677AE5CF99D897C5F4
204F25BDF13329E11BB270AB9A83619FC51B9D519F8FB49763FB2C722F5E8B33
002978A062CE71B753853DF36DA9DBD994324104B6C241CE3DEAA1AACD8C7A90
C0F40AFB90E75824DCACA2AED4AD3F1583C08AC60F1F3E65DE8219D10BB4F476
94082239DC409FBDB82529B83F94B92178145800DF285D92580B5CD421A9877B
41D7C10543571D52C6E0EB8A4CCE273E6911F48FAC04181EB1179AF442E68017
26CB5F05EC5C2CCFEA38D0B468D8556DC2121A2B5B1467C1DEBFB9B880160C1A
772B1B5F69674E70720AD550E425A1CA7CC12F1942B0FCB6166EEAFEA964B555
006B3D60F0400B9B5BA9968923A35BA37BF4193DA9207F9A2F8198DD33CAE548
3AA1DDF4BC665F0DF19DF454DBDF08655EA8A1EB42188D4D29FB4340E95A9F1A
CF9E74388FEC68D06F3D503F3C9D965B440F2C37B2EEC37431267CB6EC7AA4D5
9758523EFDD671111D5BBD99C107EC6B0AFB4A6350C2DF2870A6F21C327D084C
393E987373F67D8052F4E09866B23FCB6C5717BEF4730EC143AF943CB6D70C9F
19738732E7462DC87C34A211BC44B5BAD53F16CE6BD0EE3562DCC09CE2E3A19E
290BB4078ED622A72F5529C68566EE7EE029DF2D290B7E3F0453923FB8AD5D88
6B7ECA93C6E09E480AE0FFA526C97CBBC4C4AF32683F382E3F56CAC592034D34
2C0866AD33FA1DDEB499C71ABA3F076524E3865CE6144BCDFFB7CDEBE93FD560
362F159BF532B544F056A8CB982C430BA369CCC16A8F7B3614E8F6DC195E944C
6094FD22B32B83B7026AE03629275EB5D0DB70D6267256B2E58AE395D9E03C06
B9FCA2A2FA5B2595B673F12C272BCD1950282AAA0FA2AF035F56B9173413703D
3488009D2C0C9B3002C1B840858D574ECC2A99B10326EE1AD0FBB705DB05B4F4
ACF7970E60724CDB27DBC1BECB57D409E28279158738894C16FFFEE09C6B193C
4E5CB80644208DCA3D9F8C35CBE0F46E7EE5D312C42CCC48CC39F01871EFADD6
F228E98C99FDF1349BF59D3F1396D0DE4FEB9CE2717BC367F2EF36F4C338D6D5
129D47E9E5E62200C6B8728A3A3D335A601F1FEE279C4825358F29139D3DFBD2
8F175E8301DB49F52F259087936FF2927F94998CCC0D9588224B68F1365779B5
9BD0F4EA0B7A88AE21E2274395D5974CA5A8176B3A54A84D138C0E2394D1DF0D
D7D3A37807C0DA71047AF380D268AA69F8F47B3A163FFBE3370CD5A7E85C6B3A
F370436D8B76E381CA4A3DC88377E21EED66886BF167AE1F8F869D7AF5D67F36
1A73429A86C81CE8D77D4A225839729E50C3A25DECB05AF9C2D24BD478AE7932
1FB67061D59D32955A5046BF2602B1527D439BC23543082B178BEF3613F5C8C4
AAE4AE282B2E9250C957CFDDFD99F36419E69BE238029021EA95904A17043398
07BC80BCEB177BBA42C98DFB0B9659AF1436622B2243A42B2AC8BE636049EA99
3E9E1A43A819874D581F1529FEF5E1B76F7648F9ABEA646AFF8DE9A3F5B5DF30
806FAED2250D2814FB6FAB91344033886AA71F27CE5A8360B5F148C89899376C
BE4C0FA45C5EB8C4CDDAFDC9B06BFD3F496159EDB225E991E8B6B9B0696490C4
BE7E57A5AB69704CE85F5ED2C88870D04E719B4568E7A5834570C7ABC6136BCB
30BC6BD6C4851075D088D2393383050517232107B05D004BD3D9B4215CEE04B3
0A9C0E647726FCC186FEEE598C290A579C28893079547535FDD21126A66592F5
283A2D06C72F48DF06ACD6598C7B485B8EC35101545F08D2A39842936204D20D
C107EC24EFB12A1ED6ED115A85A7C58E01CC8B92C5DC5117584A2DCBCBAB1010
031B0608A6399C86497496F29387B48875FAB81266143406A8A147C46F26BDF0
1EC43A7C94E16CAC4819E0D6E627F32C32513A1BC686BCFABE9598ED68AC5954
0A54C667BF4E38CFD99BB16D427D702F7CDD51500CFE12CD3CC76BD84E3B8909
63D5D06DB1786BC6431628AC104357BA8F6D972857876EE55822544B06D3167B
38B3D157A5684C941E81C9BCE17060DF4EFC3D3FAE4844975AB23A7C7FE2A131
34F809C12101CC4E60327B2242F9D9CD6BC06864866531FA98918730BBEF7AF2
0121E90F6826750E2F2D2B71774AA1BEE17D04696548390721D24F8878A9AF3B
9BCAA8D0FDB224A8D9BC3CA1C13B7716B81A5BA7C26AAC9B62EF29ECBB0566DB
87A6BA45E24BFEE2FB533A6AE08B1DF0AEF9A9B805BB0DE503CCB522F0E87809
3DE16C42917CFACAB3BCD6697C73B689CB665C0B85F5A5DD82B442BC2D2D66F9
2DA462922DDF6AF9F7BD03C4D31652F48F076B2674E5A67AC4B70A4C3E813D11
4349060759D4C6BDA43FCFAC21FF5EF5F77D4B978E9616FE099054A409AD0AFD
1A723A2687F822C98427CA61F1FD70B3F30E64CB7CDA4956EAEA3620ED47EB50
C41B4F9633EC5AD28EF3AB0449AA9F0575B401A1E45BF5630E02BB7E23C2BE48
E322ED57F26259089D6F1A0BE13D29C3C80F99E1AAA3336516B5D98986C5BD62
54F7A9B7829D1597ED82F8A7F3C4E22EA603909B95B32BE9B08A5FCE31E881FC
8A75FCC99389C390C0AAF406FF7CB18577103CC038AD7ED830886331825F1372
C73DEF951C5336F360DE31631FB45BE8A200FCBC90E46B93D36FF2F6848CA10B
676E57818243AAFD0A2F0645E99A952D8F6DDD95FF4A0B0F5F049153D3DCE5EE
E993495A7C8E7899DAC7CB1AA2FE20236CBB0BF29F76419945A9FEFB8E2F2860
942F1EF45FE6CD98BD6D5FF591F836BEB5C43A4BA366D6DF78724B9BDC886A17
DB25FCD5FE0F968E48E08B800A809FA47F17B6E1906ED6BFA666201A11EC9F71
074FB686FAF6666785B281C0528738C6C6322E9F81322DE1740428D54AE67009
8C3C738A0729244CE41E72088366BE4714DC4CA1129E63693D5FB07B37857F7D
517CF366B627B992C83F177F30C804FA9048731516E16044587A364E5DE2EBB0
F23DA3F95F1E3F613485AF076CBEC49AAA46964C9E79205FD96880ECE94CB8E6
FC4BE5212418F0C93A1BCD7D53DB0804970815447D5C22A59D2BE3EA88B500ED
C9D10B20DFCAAAAC4C9B0240D3A96663026E35297E1CB52B5A523877A6F26F3B
D817851C886CD4EF6C1BB6B59FFE3798118BA00BAD6ED1ADC2EDE0778C2D79BE
ADD9216BBD7FA6406B23B4BE0B7F48367621B52537A9F8EAECB7995AC5C6AF49
3594567D1D35D903B8EB96259EA0C1E060B1F61C1A74828619679EF9FEE49775
A177B1DD3787D67017DDD6763149868183FD0E43FE320560A08E575328B48518
8FF653608555F1107BE6C5D98BD5B3A869AF9839E77D207B1684EAB1BB059964
8D6FF77B12E5CD997D9B58879264162A61E2C6EE439B853CB18446B33D7C01D7
0565B166ACBD5C8E975A0821622348DD0CE41D7D1AE25B11B78D8DB815BF6D0D
000FB33B8CF8BB7B474D103A448E5A85C9FD028456E7EDB69CD9B5BF80D70B0A
490376868A180E9DBDE213E0B44DD574337127F69D225A88DDC68C679C7BE24F
F89AE2D4D7F54EAF4C7C6D9D856CEEC4AE99240434930FEB136809A44B979674
BD449A9B6EFA986AB93E8EC34DB9606EE26BFFD25B575C32BB049062B2342251
135B7217B1270AB00D4EDD0246B9735280AFB3EDC77BBBD662D2549A760A6987
DE22FB4EBFF833B44D3D2C9AD29B376EC387535F29BE7CB3FFB77D3557864F79
A9DE7A38EF467C870B120634A901522876A0068761B9D2A51895FCD6040653BB
70A3AD0E78C5B45EAF62A3BA32957E90636DF67FD449071E7946D81AAF7B9B8C
D7887F20BC22B88407574E91DDD6639B438D4C185DFF76E344348A09DF1638BF
53122A4EECDC4AF411809B6420DBD10FC8C30DDEC0ED5859540B77BF7E4B79CD
E50ABD594CEDFB5549CF429189A06CC9AD75EAC4E936AC5E932722693145CD30
5EEAF0C4AC684B8974625B1D98B8C176ABD526228E4117A800C88766B72E803C
54E0338DFEBD97BE50C7E876DB77E17041687AE684B7BF01DB23A47D836F3B98
19A2248ADF384E9F0E84B5F49E04AD49A2EAC67FA563CE4648B2672A382136D3
019E7C2C8DD688272500E6EDEEC12D13EB364BA6F7AAFB38D51D5CC4B92A609D
CF16C79417C8B09EF1F9A981C7706EA87CA1248E5B44D5A4E5B09DBC4F4E835C
1C6ACF1B1238884419A3CE581EDD2474DF22648F56EA12F52EADC751134985BC
01B6AC51A869BDCD9422EB15670297FAC447DEA1DBBDA064AA6303A7C381CD1C
0779AD823DB80C2A01895EE36965C80C28EBA294E0C0865CC4E75902D5CB551A
B2519447B3B6295FA510B7881D684A63B28D3ED38BE9FC216D68FBDAA18888C8
FF0E48387C0C00EF0A705DE5B21DFDDF9E342FCC7064616EC0ED6D39275A6202
2539FAA5100BAB63F9AF9F216F7F66055E2C7E90D9FDA699A9F5A2452AC7C576
B23AF881D2A539A4556B9E824A7DD855FDE66638EBA401BA643E8BB905516B0C
B68CCF4260474A12C077CDACF5701E6CAA308DAA5F5DCA211BEA08FDF766F2D6
77367993F1B4D5AB738930EB771C412EC29B8DDA00523B2AECD6C068A954200D
869C5D1C17577895783E0894616BBD96A330389BB0DEDC36C0CF1ABE4A888FDB
9A31DCB471BD07469ABC995F7A93917BB0AE076E89DADE3071398354902357C1
B0EA08F35A4669D967DB811ED4C507F893B279979C7F024EBE188F8A87EDCC3C
17A339F4D405B60FDE2BA7F59A94047362467D29AA77FEC3F58B93E970033F40
ED7206186F960D05B6CA64C2564BD1502C02F0E15DFECF38C971A7218125D618
B6F832E45704D7A2599562C507ECCBEEFFFF4AEE72B2E570CF566F7E2C9AC223
DD2BDE56C60B28775393AFB2405AFFE33AA2ACBB5E6548497BD922DD870F0685
108972A98F61AA40A1D17461280CCF447499C200537A33487F2C0FCE0EC43E8E
F6A802051391F0246769DD4F41D32008709B4CA0F7BF206988A198E2B87B312C
B2CBB9EDBB1D5B80450F8F003630139D04CEEC68CC6D72D9C6CA864907D316BC
E605568BD5E0CAE932E08D9C99F896DBAE36B056F379BEB0058C713300A97585
F53B8DEDDE1923AAFF862419D4B6FADE678E902E1725A6BC1E9BEE43BD9F0E5D
642CEBA1A96B858F610D9D12EF8F5EA4D11AF4CE1E9EC9B0C3F3379E31A7CE8E
50260F23FE113CAE94ED8288D9F606EA3B3B07430830F2F7C4C3A46E2ACE7CE9
22E05D99195770A97E00E2B2259860E29451D9BD79F9CFBC0374894E5B3442B5
F24B198229579233D0EE7B7AD161832809FE62B4259D5956D8A65B7511F2F1B3
DB2D3B91A0A95573AC08A9C368200A157151F7626C77D191F62DD60C314AE704
72A11FD4F07A583179D9E37C8646D0819C83633A11F04C7175976226525FD4C9
51B26609102693B8A78A580375E134776B205D448D5300BB08D9836C15952599
5C8F1AE71A47B9E18E7AFD37163201B8AFD7766F459352F82904A60DE8A4C809
368684A13CDC756A78C08605E0FE825D2A0AC7663DE230AAA101505830714A79
B827C9387ECFD24E2606BEBF48CD0CCC200A3291F4374CD9C703D1E9A793EDB4
748FD033E2B686C1E1B06718006FF90060A2AE1CC2C70CE3A02E8E67D3C85F77
BE92D83200033B058FFC69DE139D7806CDB84508BCDC71AFFE512100FB1551F2
10F909E11E2D4887C2A88008EF91D5CB2A2CE854F777309235000DCB46824CAB
ADE6293444E11A9866BB60DE952AC2ADE3E795FF26A14C4A9C258A157C4318DA
A775211F548A3638E3A2CC624CED521E8E832B8A2A3F14065289753FB233128B
F199B484466F153644B9E29D6B4BD3606543FC0AB44D0D1B4A01E31C07B4C6BF
44F28EF95E64D2B3966DD78AC62FA582C2B325286FA241DCD597EB379524FDB6
2066359B5E6083649B737B83F149276BC50C9B24526FE6363398049D11D5316F
1108012E1E0049B45E87293D28E4E79B82E60C9BC0235D03DA3450AD6001A875
0E65CFA3D7BF1B04715D0E87C0F30F08E9199B2B3D0F1B14E182675A04DDB460
FC2FBE395B7F0C6B823A9C600F165DD2C5BFF6A07B8424C57B60F87EE3CE8767
AC5D5E180E977F7F3E8FF4458FA040FBF38E6C573C1A9E4EC4F1E8211D0ACCF7
5DF472586F9CDAF0E214DE22C6BF6EA68DE511E9A9908E4422794C2A72D41C08
448D75FD696EB9920687E769A5E5FB67F224C535AC412690131651EE44AE8F6E
8FA8CF9622A3E6FAB7AE67483119AB2A532D446F9587CD76268ACE24D5FC8144
2592257929ACC201E7BBD8688E2FEF43625FD2C74D08EF756AFCE8AE0B6BD66E
2DA7B0018A6D982D3729918CFF674A2C9E1FD630EAFE56217000895D74C0905E
7930DC208044324D1E1E8D155888110ACE27CA81170DEC406E4B69000082D67F
883635A94BE47625A8CB60EE9919B59DC6DAB0DDE7B461558783124A4480340A
B8333ABFB5EBF012A04D335FF8BC3456FDF83E5952054EBC17394174797A8722
B9C171FE6E1FF6DD0B866BEB91E8EFBD36661CAD8AB93207EFBD018EB404CB06
FD643E73CDF9855C99989F9482A169F5043C4C6D7B760CABD2365C0CE8841FCE
18876EB1BFDFFA0DE6860D1C4A9C74D6A29D1E85A4B33A24D74821C1BB49F507
4F1B22D0F955C7BA30CF4D3D984C3C354F9977EC6C49B261A82292397AB43B2A
FF817702BDF65B005B098B09D001060B3B2D9FA5A9D792119DFCECF37CB166B9
870ED279D399ED1D749221659B7BDBA0CE0FA805BCC0B17DDCB7F9738750071E
AA966AF457348426D2926F38B01372061CE2ACC584E8640AAF12EC79DE8AF0A2
E06760A405F226B11266F678219EDA3ABAFADA66A562E666411E3ACDC58AD396
ACA8514C855810A583350409FD98BA8E534F0404F8C3D5CA308227100C185148
6668FD2B5A20FB2F9560B53376D930CB742D10D3F3DA5A36656CF7582722F0A6
86F85F516B953014E6B70F229F2C825CD7E62099335D26CF02F5FA37E04837A1
3DDBCC26480AD6476CCA6896A738D935DD276C685AD5D500232CBEDC48D54141
37C14D4326B356C0056957FD8909FA1B6282DB72C6919968862DA8A5065F9425
D2C446B17A3AD8AAA888DE9B6C03EBFCE59994424DAD6CD8280BB4C1C2D67A75
63EF1F231D7A47AC799076C3BFD079619D2E47D704E1EBBEE7AACA6C2E16261F
E1FE28E7EF0ACE3E2ADDDBF59419243EAB439B9A48798B2E13ABEE6346E3C90B
F93BE480C99D35C84EBB8CBBF21F46FC00C54664B772833BC782DA4D00ACD4F3
B2051B1CDE8B020D7A8C4390261ACF0EB25CEF7AE70284CDCE2F8DBAC9F178B7
9B7BBE6894C1BD2A4787BF1D45E48106C84104899D1995EB2F699A7CC77AB671
501F558743E720E7FAC46A865CE56FAC38B315944834A7F68E1915C641CA516D
77F02CCDEB27C69DC93F2536F66086D3BFA906ABFC48E3DCC701E3A98313DBBA
94417BF37AE80D37621EFE9566615ADCA7C815B471FCB812381E5FAA6A513245
FBBEAC71E1894F15D5D6D539315387814BC14F070576AA8B5D940BE9D4A37DB2
B4DB41E984EB843311947592700BC7C0229A38D470505FEE6F9C4D40F4A9F5A2
76207A2E2BCBC04B8BCE76DE891FDF90ED52FC981C7E67619DA8CE837E0BCF36
1919C22AD472031CD265A9E5E7915B201764C157D69B367BEF522FB068144F38
C3A02544BAABFDA26AEDA9C08F13D5998B72165D22C53E5350135CFC83C48E9B
2C411B9FBE244657619ADACF66522CEDBC018952D5B759588AF19E59E7CC6CA3
39EE0FC8F14FBD03DB7222B87C9EB338ED0198CDF9CE28C66000EB8A14DB3E70
9734D399E0BD9CF7313A2738C32BAE5F54BBEC4C707779DED800636328103DDB
6A5CE518E474317E2DDAC89236A8FEAC35BA8BB0C8AE4D879A6D2735698408D3
83E413D1CC8ABCB6B3E42CD88A708EBC9CCBD0EBFF7E0B0E91A391444C83E5D9
F187FC8931FEC93B46DBB6AE7F4096C2B7041B5B5A4B77075D640621652F2D8C
81FF50E9D35A57465A44CAFA660BE3DC79789AB4D0DFF4042DE1C32109968178
9D7E21944DFE9B4CEABCE89090C09C25275EBCEB4D0B81D67A6B449377CE172C
80A7B1EA2F8E14B2A78F342D3F951A5581F5A1887A5892F6FD55D67BF195A3A3
1BB4F929E7292F20B109FE9809B8CA91AB208D11060C0D10BF997D9D0F10ED28
59E373522200FD31D85B7DEB38AC7BC1D3A53A4CA11C349F538C5020FBF97C48
41947F6A922F89B418C86F0F505D15FD6672EE6964050A18753ED3EE05F7F9B9
57DEE889970AC99F1CE8842BA1EAD1383A0BD814AFCDC026930A76CDCBA0302F
A8839C75D849E71C89A586971D83E190332B63FA9CB7C223715198B0C4C63E43
6F2634D488ED213842A6C167A0B560D097336C2AE151259B778565DA03CA7659
F70CE2B82E9E72B0EFBBCE948083783D0F6CDE28F8E9501C932AF1142563C579
B0D6074E747BC98917B0AD6CA63A048DB4AE1BC9CB67177583B092CA70C33619
7595A8404582B8FB05147DA68D402B731C831AB516C95153ACE48F1DBCF8AA01
8A6BF8DDAD3A8C363E237C4E7D026DD1E3D80467A81171AF4423119CA41F9ECC
48CDEA7A9B11BF04BADD5C01B99DF5CF3832570A5D3821675A2DE1A1FA39119B
D9FF18735A4B2A80836EFFF9FC2286D4A408CA6B39D953C1EA61867AE8DE5002
537259763C713F1DEBD67A99632A47CB4E10CF7098E581C49AC05520E7060151
2A98D07094AAFA65FCB7DF4B36213726E317378FBD5B0F7B058FB5D54AB1A612
A03E57AE6EF435F47A4E8DA35E404E83342CBEFAAE54891E5C313898D8D5FB1E
E8F0685D1B64C2DB37762FE8D0ED74E20D4F783453EA40A7647794B7E3A97806
4BD8AAED8D5D1A34A626995CA55971E4FFC4570751AB87A2086BA817DFA86ABB
6E2FF801DBE06CE10BEAD97D37D9D8D7979823D6A46F81D62DD22D5340BE2A25
ADFF911D7C5411B4936DACB295F89CB0D209AC1CBAA9A486782F3B374BF92CD6
E1E1E10ABE014455D45C354990BEC9143D9C25DCBFE6F976420725655BA0DA93
B7B363CEB3DD540F3A3A9FE3651882360AB6478FB06BBB033E9F7A1805E98475
F45B4682BEE6C95148148222CECDE05F06CFCE28E86637F1AE40A4285D6E30F9
B29409F3BC58277A5CAABDDDF9E0325D47AA0B937D8E715DC58AF95B0C27555F
A421D49A0024619D867888606545CC294E2E054316E96639CB8C02FD4B810D66
672A4302CE6AD93DB811D6C73E81AB7A5B425CA6FD2F7CA9CADB3EEBF313529C
1F7F061C9C68A36A2E38A8C0D3FFEA9FE172E6ACA719E3CF24B3A4E0715981C9
F75146BBB3420091CB6F66ABD61D8B8D01B2B43112FDB0B81CC755397298809B
9B20F2E07D4F0A9612B65567FA6C8D24A9C00C232FAB926C12BE81255C5070EC
6E95D575030E6F10B45EB19BE46677B38909D5822F022ED93E67A72D2DD883C2
7B1D4A059E5C865AC7FF2AFDEEA05581D796D2F3A67CA850415647C0212CD442
A8C631702F8F6176FBAD1B10372D6E317329BECEEEFB74976DBA7E5F3DFD7DDF
E30E4F8ACC73F3B0F3D74ACE532504E4D02CCA6B12CBC8A1B430DD2767A643A7
3E0165985F4B528599A45D481E74C0AF3E38F99BD1ADE11E0C50833546F05548
72C3BBE846F40B070FB71912C38F94172CA24712615BBB9B0C695E79A6532C3A
6BD56AC3B963699C37BC6164E220648F96CF7C785BE66232E29561C5D3107427
550D1667B73514631909800E27E15037234BB23AEF6DBBE0F77E035E95518FFB
08608CF064AAB4CCDB2CF3AC84DD1057C112A1D35FC10D10C71B0D98F8AA543F
6E297B657413B1859BF40E8488A6E63D36DB9B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Symbols
%!PS-AdobeFont-1.0: Fourier-Math-Symbols 001.004
%%CreationDate: Fri Jan 7 18:46:05 2005
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice (Copyright 2003-2004, GUTenberg) readonly def
/FullName (Fourier-Math-Symbols) readonly def
/FamilyName (Fourier-Math-Symbols) readonly def
/ItalicAngle -15 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Regular) readonly def
end readonly def
/FontName /Fourier-Math-Symbols def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 112 /radicallow put
dup 161 /minus put
dup 163 /multiply put
dup 197 /plus put
dup 198 /equal put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-34 -960 1001 847} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB07D441AB
0467A1BF50AD0DE4F98225ADD1F93634005664EC4D3A79AAE931F7496D4AD122
EAEBCBFB4D4AC1B8D85E9CBE4ABB2225405A9DA5AB44E12A710451885D4FADD8
C3F48A838573A733544D6AD3B5C7B3E16F8F777F1DD842F33638F7D57C0C9212
0C6560A06445FFE43730EC1895E85874440C56BF079DCF6C249978AEC565369E
E2DE0A62595334A70543753553A4D58895F84C9627524042C4B480C4654D6578
67B2C0CC4A43523BABBF2E8BB693003339A7DD77148E4C146BF5A7AA602A3908
5300B7C1798206E16AAEC1262E3B1DD7325659679A19229F75B0A7BF816E1594
68BE15C3F762C51595E7902AAB117057F4EB1316DC1C507B857AC1B1BE38123E
4AB0CC69F0C42D92081FEAC1259E24E696131A9170053DED6CE28A4D407AE241
675620191E5953CB96967BF04CE1DCB7B9089849FE477F73ADDA94B72632B5C3
E4B12701C044D3B666DB24E45DF8FB89C5DA53188D7C588C1F9DCE353F3D357C
212D5E0CE43B242313912CB809EA23E8158049754D5A9129419949A7C79BB1C5
17FD49A1E5FC3A4095D91E472B31D7A788DB3D0D0778C6D96F68C849FD58496A
9F820DA8C2E98BA0DB5D0EDD60D0A5EF062D122D5B440DEEF97172CA0DA38AC6
D8AE16E16E62C3A99D3B1DF9F1BEA90163879CEA5BA341CB947DFB0C41B08B06
946F9C8A754B9FD193F9EB60CF81B8343A759E5D9641BCE58C2D8C0BF5CBB461
88E32829BBBEEF6E1C8A713A3A614565A4A9AFDD566D081CE2954D486E275D41
3BB9DCEF1E66E7EC178E370757EC626E6E82D294BF3E83ECC0782DC63E319DD4
CF867F340449A0A245430C101F3E5DB92CD828ECD21A2B602F26E72FEB38368F
DC03123FA421EEA747607B26A3030C048BD160A39735FB6B8836B8B5A4D2AA84
96C5E265C58458246B1452B308A022655587FDF933817766BE8A1E6C29DC4365
DC1ED202CBD81E0339EC4C3C57B054EADA2C699385B3CD763CA06787E96684BF
86F7BBA7009447D8D50167498735295CFFA5358D068EA503BEBC2D3A7EEDE760
BBC03394A6B01B1AEC021C9F06834D1CDE5DED19A5A1F909707FB51AB2A7926A
404FB4F214D97439BF8437F2B4EA1229AC5CEDF552DBBB63F1AEF6F616AB1C31
34D1092793B2AC47CF8FB49C4AA2FB0E7FE895D7689ECCA25108EAAD093E5A2D
4A72DE9A27FCA328A500634EFA5627CE77A0B0404824BA2919802CF41A9FA81C
49DCF2998499C436F712402DCF0730B134FBD5B7C6FB6D33F045A1FC625D0C9C
33995378D32C6CAB2DC591C58B905270A18A4B6684B936DD87E4A9269E01F8EF
AAA92CA55E87E5D819FBCA437CFE91D55259210F0D72906475F61BFF0E1F2D04
E35D57F703C81265EE06EBBF52ABEE3DE72772889CEBB2AD17DAF82593D7FA1E
84987E9D144DCC494BBE373C54932A7069CD93D9D08A946FF8EE207E83DD3C6E
9BFC257D9876E263D9DECC8B8CFE151AD4D146DCC885CAD14494B4ED639220F8
0DA6ED4BE7DBD3EA1DBF0D1954A4B5B397777021DBE0A3B10C16EEF8A679B444
8F2C6DE58C544DF86A544F7136E8C5469522D12AF91BAEA9207CBC3C15034458
DDE2A95B81B4D3B59FCE43955AD088BBC0CCEB756D8EC6EC4EE5EEC3AD00B447
1179844D7419AA0F8D48C7E800A64236E326E56794BAB7776473470F72FEB98F
5F855A785EA42DD0B7B8B383F2BC880C9759B2231D087BE28F05F3402A4D1851
E95AEB66C2614D041B5442F59A74790956F1B7566B726ABC5B5FCB6A8BB32C3C
2C08E113DA29895E003FBB084D21A701CBFF1EC142FFF8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
654C51CA8472E0FF71158D1D3285ED72ED927B7F750F99BEE45F5C77300D0411
A3D81B0A9C8F5865B057F75E8D97E77958D3502994B90340EF5362A99D9750D7
14286B362186F0715DA5C6039DE18044B8E67EB1152D6C0DC98D0E36E6D3C331
C817257F4D3CAF8AE438EB03B04E8597046197D67105121CD8F5DCBBABCA9FC6
55EC17EBF96D17329B7C8BE8F7D3062E20E83FA6AF45A0C932B5E6EFB4DBB928
E4511768F708A03FA8BEA26BEBE94936A426DB77A8E800BF093CF53914B71382
019AC58ACA79B9DF64946EA241C84569F2A13CE8AEC335F6B5DE8C00317AC6EE
983987246EB7659537AD0F945CEB9EAC541E02AE257377258E81CFE33CB66A9B
EB514F04CA9AB516CCAFE56EB0324AB192EBDDA61E0792EC1857BCC062666338
0089C3A9FDEB405DCF235A497AC316B132B3476551DCEBA0560C18F1BF84F1E0
1467DE59252B169861541BD6774161EA8F9035787CA842050E2089AAEED6F37B
2D16E2C6BECBDFF50C5FB1D6720AF2384F0DBD21AB6E390C9325D57D1775AACD
A56B4A76920B952DAF192932BB5E3326ED43239F03A8B73FF0FE5D93569516DA
8E9C1DFD7B3D3A4C3176F7F6FA9B8EDB0E7F7F3A47AFB4F0AC5C7CF849975C13
315C3951A65D1A4750A73024B3FED34DE657F9BDBA049D054AEA5883AB816A12
0E708826E752C197FB8DFE9CD002A96BF0AD0D43A4C7880EC0BEC0A02CDCF664
C304A63322BBB47C88FBB7CAC0ABE7CEFF5C1B6B9A203EDA6F2FF5FFE4F72967
3CB52E9B41DA56E73354C27AE2CB7BCF068E5BF05D259809AB4CBD8E54BC79E9
4A589818B539338A66DA6620138BEB2D0F666C1AFA99783A4C690EA45CE592F7
8054187154EA5218BD3AF89EB00690BD41CBE548847AC42F9BED75F513A511C7
7689DE1EAE73C0712445907BDAE13D65C95A3DCD7C99D3DC79AEB9C37A0691D6
A228C81FE186A3F7EE975F7941B7E0250B5195817FBE0C431CCA3176AB14F488
14332AF14A0CC7A43C24128E9CCABB963DAA808A204830CF8A38E6F13E977E18
8C575A83EB1B1D925D32AE6CD2829494E60851B8058E98F8936F88CE48AAA932
B7891A472735116FC53BB1E720C31AE31F8C52A968F9383F51063F0B9163F629
0CBFC16050E33497DBE63B067D83108E0FC735A9A8BB5DD6ADA7A7CA16646B05
811A947FC3B69E75AC18595CAA6C23D8D1956D39096AC72270EB7F406D1CBEDC
EB6FF59FF5EF33AC0A21C2F715143C53C7834A17CA0F8BE0054AD3430F259C89
D875D49D295AE1EA875F44B01CF5B7A6F28A6A63C3AE562161091B4EB20014BE
6F87159F387A9069CF2AD8050FC9A135B9919D52D56DF58C2B84154AB1FE053C
D1BC4E240BAB92A57FEC2441894B216C36166B4C976712D7FCFFEFFE7DB36F0C
937626DFEECAF8FEDE64452000A3D2AF5A07D595B0768DAD40F1CC2557889FC0
8A35266315EBCFBBD8437DAA23C4E4EE39DE3AE8B7F5A3E0322BED2A4E3A9C42
BAFC3A4B93E2EB1C8B0CAA38BD13E4D466059C88DD4B88DBB4682C2081463250
BA0D58A8E4B1E0F6C9E10E5C11459E27271435B0BA85CB12E0B4A7B4B4FA273B
FD8F5E7B0972D177FB26D168E25ECDF79A10FE415076C16267CF8592208FBA39
7BE15BFF928E0A767E0CD131259BF2411A99405564453B8C906B79531090CE66
81FC40733FC7489A0AE275A41FBE70FFB31F73FD9C5FEFA85E7E106BAFB3EBDE
7A91E01F89E41AE813CFC3B611AA4C584BE6A9BA58DCCD0D7756ACB4718DF283
522BF3FD082C7C276A617844071CA1862056F9D6E48BA527A6BB5A78898AF066
727EC2EE226C1C1F3B65A27391F218BDBCEB92700ACAD8E57396CBC5E8145119
9B86D7D4EF16E113B410DA5D8248CA26CF6FA509AD7F79BFAB5DD4E4DEB8DE95
40581D19AD5ECC2A4C962F235E0C5D0AAED5666A0CC453439D141C31BAF01D2D
43AD2E836C410899141158140A2BE30CA449836A62E0985A59739E83CE1430E5
4F174B83C84DEBDA670785A901D3BC3B9468988B08320A34163D2268734E1115
D2A668F428C060EB25A5B6C050BC8AE9030AB78DD678EE678897FD078891AD27
8EC54549F3A0CC25042275A1649F286D1667CF5AD09A6C7F14146AC482DEEF81
11E7DB615F3CDE0ABBD8D6B0FE9BA34824B7DE2E03C2A5F58F3EEAB500C5786F
F4D9E8C9B5C81D19BB7B207A2560375835946E674D0A93D228DB7BDCD04C983D
8CE5AEF6470BABFD9AC5D7740EF4A8A96FBD6CB2EAB4E3C8B1BA04C5AB28D1E8
887A8B4850A96522F0B649D57D45FF863BE5D6C797559384A209EF604165AE45
F84CAA6E578A7762D1F36028CAD7BCDAFA48E019F13CA5B8964FB6A74DD8C8A1
0A13716B5B452FC26902AC327B0E41DE12766FA2AEA1312BE685ABD1C1D18CA8
CE4F6444F93C71D459F16304B743B126846038838A4B6A694BE54B38EA0E3A81
204284FA48455E196C9E67FD4B27F085591F314861BBC6F1F88791AE4F207B84
A1E9B27D287F035F69B0E9F00956C29E1FCE2B947065A1FA48E699AADC2BF18D
3D59B693C9DB9025AB832B52BDD4E904B1CFF6CAF7F9EDBBD2C3C99B8641B435
C576229C8F2D8DC534903520086E26043DFBCBE44736B54BD6DA809A4B982924
8D1C8A69D8474134DC600B1721E9A2F3C11C5DD6B9676A91007B4EDCCAAB44FE
0202899C79E9AAD4D34CEBD5EB55B545E44FB4EB99E8581EEAFABF6D005EA077
1D95143C7DBCF7629C7DB42FDD905FCBAD49877F9ABBFA88CF6C4BF970E4E404
F8A08B5C6434FFEF6D6AAD6C70DE555DE8FC94DCBC1CA5136753451F75F4BA40
9B2892EC8D5DAFD29B15577425161CAF6091818CBD0C030D2EA16FE52C78C62B
86F8DF4CA67C11EB65D7E9AACAE66E0BDB1DCDF295C19A504298B1982AF09DCD
0CBC78478DCFB5CB7A371357362FC32CA8E01BD6AB63B6C70E5609DDF79827B7
E17863D04B8C1584F28AC97DDC3F530456D6A10B489FB7C6E171F6E4FE48CE89
16E93FE20BA51D483A67B681F724DF75877357BE63257273B2422AD37D5B0309
5333CA901B6ECBC7834931508D0849D9AB82132FE1FFDDCADC493BC57B98EE58
9F149DF880A8A52E244E049857F869D72BAF2C5EA9C2281509CF7748FD0B3683
E5F261DB06550A91DEAC0C3211AFFCD769C28FD9F66E58628099ABB56EA39DB3
1D6B9F7F3B8BEF192F5C3A22BC2A60B0E70D62649724432CD6DC8A06A1247FB2
AEABD29324F09DAA46CC156E7185D00974508ED53F194AC6C8D5F8681C60BCEF
8EB2364447C04C82D0CBAEA3EF2D6DEA11699716B2CFE68380144DD5D92789D4
C151447D110853FE01EAE72E944C0B4328AA27FC339660522AFEED9ACF788653
3B314D3388E1B4AADEC80D0AE216E8EB06AF2DC452B6C47ABF76453BD4CD53AA
3B0C0D6D9A5698548EC65BF2B223D61D35C11E6AA8EF0E42AFE93436D49F237E
387347293E07BC5711AF703A2806CFA126D53BAC13528A57D3910677A5948660
01F55DC092924B8AACEDD4629F2AA15C483AC6673C8A1775356215F0FF89D4FA
DC5A8136B6349FADAAE5F2E037F5A80361DBF7C7293DD2AFE7A2521703CFA3FB
45584414BCA564B13D44BB1B16B66CD22CD0E7E8147D97997DC2FE91A8644072
2ECB522E57CBE4CC7F8E9FB0D8C2D43361EDF5AF59BF5727CC90D9033768B8C1
F9CC1963F6B79AC8744ADEBB7E253D759F3050F0B868781C6190E603E63E9E51
F36469EEBCCA15B15CBA0B3BD5318AD2205DFF43925CA827815F88EA78642FA2
C9480B7701BFE10CCAC5301617E19E0FCAAC6A6917012FBF0F5A4249A32D6CA9
89BA2691D917B4FCAB2DD69D4A5EF5F1957DF13EA68783468325701ACBA47136
4376E3EA97A94BB9907A7C4AD2D121116193DA8D317B2053BE67110EE3183E56
A714531C9C9F62F40D2F04ADF8ACC02F58D7D6AAF09EFA9F768FDB68DD0856E8
B6300A8C5124CC52D0F3C56DC10E2C1828EB992A3EB6E7CE18534A315CF63ABA
129DF05914D50E03283C127B7BFA874B5DB546A5CBFFAA5DBF26CBCC86F26070
E8E4AF6FDE4593960DCF6AF931F9ED780EC00F31D09F3F30BCBBB0B4047E235B
4B64AE58AEB983E7830F3806C9A0E8E64A517C4BB0512BCC496D460D94A16F80
ACDDA68AD95466730B2D309C218E9DDC8997911FD0BD1EBF0B0AC249FA68377E
0FB05634FDC8720F72167FFD218AAAEBD4DA711704E0A25464E0B8B9C25F879D
C47DB1C68973964AB81D0CC23FE3737190DA587B09E521D95C8E37926B0720FB
40561AEE80199852C68127400CBABBEDCEF167DCD30C40C9969D6A335B2BCFA6
E2DEEFA9099E5C524764B078EAC6361B3B701689B011BF6B8EB1933C8DEAED75
6798A4010CA45DE86D64C36B9E9D466054FD2B3409AF0E1D356361BFAE0DD740
199C6F9B3DB1914DB7385EE2E910614F0C02A189F7F96B93EC014162D6404196
B141B8E134DC83E5230BF283B612AFD290FE4152F2250B7C6831F55407942080
2B29F9AA7DE4D7993D6DA86070985E831228A8E64D8F940E9C2EA78154957799
D24AC9D5C68EC4A4C5CBB5E43A04103663EA1E6B9DCB188A534455FD6E807CF8
648E8D49524696DFF7744F0A8735C32447E24AB2022B67952E9CF5B227F9FEFF
382FA7B9B08612B1CFFCCB601D38E9AA449353D3B4E61241D3F711A5C1709C10
AB04C69F6DF7FE7B180A7BD31593329B74EED145FE45B8FD6C22BD1038690900
696B7E92522545301EFA4A39385C1A1D24A78FA9C119C1B71848AB0C2F6B8DC8
1FADC77D6CFC419F724349DB4BCA03E87DF709183A6F69270539FFB4994ECF21
6FFA89E0C2102286DEA2A1E2F8AD4202ADF2649DBDBED9F158B99410AF1FB6B2
0F3D92C93AC1EA1115846E0DE6F1C154FC29623F2BE4608857D74559E2CDFCCB
AFB695AC6A1AE872633D9A257753C569B6D3A3EAAED8003589138FE0B0A2D7B2
A1A21CA1CF57D674717EB85F20BA70E64443709C0C4FED927CAFE783452A7DD3
50988B0FDE37884CEAEA603A0833DB0F0235D303D51AC8C67243CDE344AE4BF8
7D2B394D21F9264921AA9073D8B2FEC3A50C954FF3EE097847A7F342ADA8501F
CB6ED95A9A084D2D1798BABD82494D322DE3779C4313F414304BB5A45DD0F670
7DC7496838EBC4A31630C17A17BE8039E67943792F7344CFAF5505DB8C330421
FBE781B10D1A0F3247039946F546213FEC611A6166F44AB68AF71C4DC905B343
BB40CADB88397DB60565C71112F336A83F7A9EB2311906CC5070524D184F4436
F9E6DDD3B3097E6C8E065EB1DFDDFCC6DD161E196137818380C17E320FB9A044
DE624694FA389C373919D310B357D5CD54121504393ABAAE317BE5739FB56A80
A46FC5DCAC2042AD0EA5B5310A0DAF0C0598DB74E4342113D558AACBE2337EB5
DC8F7DC87CDBEA2C5FAADE14027B0134FE419D23FDEDBE356E1CA050F6A532F1
EBD4B6AD565E77920BE1F25A65582B0CD831CD7B29471FAD1EAAB824262070C0
5FA7599948E4D5E2BE6CC5A55DEED4875CAA0DB7405B86983B43095E92E22518
994DAA5A4745550FB976E5CDFFAC370822E2790343CF247675B2391F46227374
C5EA086AD63B47B57E9D5E82DDBC8118D9EF35C9B4E41A80817313860EED3457
3F88B809C282A75808666C11C1BC7AFBA7D9183CCBFA54EDDE178B40939D2ED8
069FB562FA5FEE05050A509E529407836CF1D067F152B4802F367593E78AE025
D512C6F5B230B4FB4F329405E4B091CF201E4591E0A4D4AC85DCAD2F2ACCE324
1BB2F395E46DDB1C8C0DE7F8FBFBD36B2031894C3C4DBD337886A80CE4D0FC0C
C4A121C38FABF1714CC0D53123DCF82EBA6EF34473250995CB6F6F70BD2D1AC2
677508BE3F1D8C36ED37BBC077BA85A91DD6902315A102C3F5E2999F6630A79F
2EF46AF9BDB696284A5BDBA567E8CF2264C6E6879648256634352707B1BA6A2F
2E3519037249D37D499DC8F41910938C5BC5DCA1C558C7DFF94FC425CCBA5450
3EAC46A0D8ECFFDB9273665229F184BE301469223AA021975104CA7F4386D273
D1CFFBB88A41A779FE30DE86B37B01CDDDA2CE6B6ED7BC8AF289478F1F676AD5
0577413C82F8E27AC1D1BCE740E73D8F4082594C8D2B9AE88A7A4C9D199212EB
0F4A0091AC7B5638873B8567357ACD37E69FF96147F750255E6DBE6FC611C411
B76CADD1C2CD85B2E615996C118F8AE0E11915AB07151C0F5F8881BDCEFC4B65
9E93884718FC3859F3135A4E992FE20FEEE489C7FC5E44101D873F0A7AC9F302
F36A7537C45C3CABF374685C0793C26287A77C5DE575A78AEF35394D7EF737E0
27594F99F206791D576CE2808F620F8898D339CB057D0CBB2C5A1C9675BEC4EB
49C71752212D64423CD27DFE7D88F87E5E193DF4F9E193EC8C4123F0FAC85927
D16C209D48E8721F47F04C3991EE9CF96073C3BB41D0B5653373DF47D924FD62
A9D8C620B684C57458BD17277C289C864A34CBEF0315A6133C72DB239FD7070E
228B1095657C36AC03BD4C0024CE208D5B96A4F8E4C41FCF68538CAF68B12B69
E599809D29631E16085DB94B57A71E9D0F24FFB9B70D1E79C494D424A879056A
18E04AA75B9C1D7C51EF9E8C252D67C718C2A46B8935C577AACAEE803E645631
4E65083022A07F2D990392C923A50DA17A586013271D1378DEC6CAC16736526F
5680F6A5B769F981A7CFF5E2DAA656D1A9846B8D685F972CDD7E6F9B3A29D00D
89E2F3A40A8B9AD2B2B97BAB801F842935750A321725A54FE587E55C314C27FF
32A5D03B6D0ED039117E12CB9DE0BA5184A676E87AE3D015FB863E9B5FFE296C
3845EEA16B52B004E8E5F1500B3F05B2B36028C284F440B9BB0EFDE240BADF14
954BE763A7F422A61C8347EB74948A27E54329B65E14F068C24FA84C1A47D8C9
60D6B0A97BCD7EFC7D827400E9860F4434C49A513811A6517DBDCF1F649B3D50
1A8A9C420111FDF53A22A7881910194CCC7FE4A040254F3D819F2DB409F2715D
093D707255ACEA830AB445D1B2BA23C87EA6AEC3EA65DB0FA8A0A803D1DB88B4
F162D6CF5DFE97F0350982E9BA29EAB994E9C5F39BE6928BBB277F68A9F7209A
78DD10366BF12E4E9A4DE91C306B8506D3DB84053EE97FC6E1CB89FF20C1D356
EF78C8161AC3EA8A7968489819EC81406BB6C81ABFB5DDD864AA53FEB2030607
A5B0A1FA84E55EF834C7B146FD3A05C81E9A94074C4A2343B9BEB38BB883B455
0C5B6453155939BB2E5CC464428ED2D730BFBE048CE142EC8EDB45C10EEEE37E
7634A2C093C91972C741F526E63D76A5D46646E1928885FADD5A7E6B14F7CF50
3D84938CF6B209326206EBEA61BB1340676CA76BD865A3F1CC692113B3555068
4EA6FBE3575553153675A67000FE6D8B92638E4A6799C8449E97D32873563D5F
80297A4944A4F5ED86177DB014AB4D46E0483414B9C54F3D00818331EE0C7A55
182881305530A6D5C0E60A25504464FF6478BF0066259FD5D079F34F8023B15D
46DD45C512E3D57E037FD3F259D968A6AD0CA0856BC409AEF3DEB01D457C9223
404D30E4D1AED22C2EADDCC9B1CFD5E1CA74D1B87F8E5A06F99D1FD8F749BF71
82E1253661F2D55B0BEF461C74A8EDC509992BB0FC87EC1FB20A82B1BAC77877
4020DA9A6A7A1BC4BF5ABD29EC53627F8694402960947D9168908F0B8E1A0981
663FE8C9C6867BC2938609EE60D0E107D7CF214286307061984D779BFA8022F2
36329AFD5F6E12D0A46457A08264EAA8E94D0ADB13896149F59CF0EAA73C6A64
555EC24930AFF437BF74C605EEA3F8D830084881B65EE0A3C17C89601CC59600
FE03E37C6624E62F923DBBAAFDD30AFB5B8AAF6FAA02DF953C6EC97FC8AA2C16
746FD49F830062209A941C0C4A0A0099D3B7BB8711E69E3F91191AE0D2C2D544
33588CADED95180F0680F19F5F9D290A356AE84363A61124EFAF30F498BE0403
9806CEF58B7EAD68373C385FD72FDE4D540B63B9974F77633E3161FA6E64600D
48329329AEE78EBFCFBF3A74AB067E6F73AC20FA47D454352890211F5BA47783
9FA7E5884507930BE21EE92FA7DDBD8F393D9D0435878C65BAEC4BE607D004FA
A236C7E85EA1719FED581EF0037710F3FF18A65A50B707D51680499CD4834758
FD29F2F336B59E5F6723A99660514E909AA6CD351979A45FFA03C4FD8BD4B64D
6CF00E0C2DC1F039E7E4240AF8806BA38059EF45779C86C255699208E332E7CA
96D8B967FDEF871F3BD4C834709C46ACD6BDF5E6256F3582FC66BE6FAF805B82
D82899588A62D8A2E7AF05465695EECA988FF78073667BA50C1B01FB77BC1215
DE4806624F2F67BEA526E748F113483CE09EB97502231AC4E5F4B907E0338401
A8E5200C8E55AF488744DA6BADFD9080099E356BA8020CFD727246ECBF68F4BE
C99A93EAF0D9FD06815E3FB9F4B15798534545FED725469EDC278EEEF68C9D42
7623F127D313C5F25C13CAAA4016525936FC2CD04596B20368673E62366655A8
103616721DA8E48FB30F77B0B4962F0A3BD8F56F8D1A8AB6873AC93D51601607
68C2044BE0532A16C23A5D3BB424786E2E2E16F72561FAAFABF68D610C204C5A
41B28D8F01B98FE3AC97881B17B19C20578EF75EE39F474C1E5EED2224A8C1D6
F86424DD11DF16CAE8035F67CD7EDA6ABC9869F22ABCBA5E76C696FE31C9A165
7AB90422DAC93F0B4BB1662F9509488BD80F813A42539B01F9A4C1F9426657CC
54F273399DD9CBD42FBB4F936090BE377ACF89D01BF4077658E01451C4F2EE1F
9797FA4365DF4F55AC5C1889FC40CC3A869D79EDBC183F7F9BA821511A62D7BD
B14726C12E2717395093A6169BC32C651792DC0D848A676A327DF596A1C5D71F
A6A57AB65181852CBD82C786DE99DEDE1718F94E0A6BC2D236E72F468E2FC69E
2CB5D4E6E58BC19CCC7C2CDBCA2761CC643F51B50F5A3EFF846E288394870219
16CCB07FD102F9745D634923ADD3F095C710E2D53E928EB70F423E4BECA9CE3D
76D51B7F4A8422F841579C4D381D5887F0A86D7FD5EF905DB2D33F3E74A3096E
E3FDB46FB81EB1F97AC326AD6ECD1706912792326DEE602DC28790845859C1FB
DC20B61F1D20F38A3E20F9CF5CE127417D0B24842036B5DB251BD98550F3789B
16BEEDC1046C6503271F98623C938962795B04204BF0632E940B4259D1CB5DF7
DA0C7629B3249C37E53A2C7D274808A51BDFE8BC90496D25308B4C43DB2C52D3
B2DC3DF7FFF168D4BB1BECDCB23458C4BF461F9025088A6F46CC8D6A5018DB60
0D061DA9CD493CCEFCB8DAE6299223DDBB333D4332AB08B88BDEC7EB6CCD8BBC
25D1452C54CF72255D5DBA04F52BAA143AA90C48AD253122D56835016A77DD06
60523A2BB31CD6EF9FBE586A54E531CED164DE893071CACC88E460F294DDC392
01E44E20912B03805FA5DD5DCA0849A63D22723A0ADAA5A562451068E82E921C
ED10B5A82624DD113FA78F693F38F041DD48429F74004AFAA6D14133395C65EB
7E5DD2FCD47D8425BF7A804F72CF5D424B3F16ACC756A6A483153D7D485F9520
BCFDB6FC9425FB2B4F9BEC4880B7CC9EF5096B401EB3F31079354D59A8B3843F
CFFBFAEDEE6FD11927CF83ABADF2F84AF40FC9B2AF85689FCAFBB43CBB7A5956
41978BCB2387344A42D97DDE55B330842B5EA4869F55E227BF0DDC55148F98A4
D99992BA8D3B88BD6EEE3BA8DEE4B2048F1340EBD1584258759ED6FA36FAAA05
56A443F0D2F8CEF15A94A6F6CC918A8C8A18DB8D59F317D6C29221315BE64A36
FA87330423DE1F7C66FCE9FC52B8F0C3C9BCDF9DDF788CAC137B5141909B626D
FAD956EA8353E73F5B8935EB648E497FB04C03224D719E1B85A10F900F234D2F
3A87BAAF04716CE875FE10E99BEF44A08B7E6D06F921AA4A6CC96A8EB5794980
67C9DE6EC172D6D06484CFED29452072687ECE44C76D80759D452860FC9F1D21
053BF80ADAA5D56B542F2F874B02CD3B87E3127FC2BC723304C3D26B9475B81F
C9A97FE0B82318C6F54ECAB5C59CE8DE1C0404B8013685D0771FAD907E6A5686
82FEBA086A519BD975BBD9DA440D1FD44AB9D21F779F5EE3490DB7185AD3F8DA
1B8164C058DC1E7A7564622271071CAAD98763FE0B5E2CC4AAEBEA8E9F717452
291999BAACB0B978A58EDB66AB99C24025390D93374A544F920B89C833E84160
E392B2711285B001D05DD3BF14D2DF420120FAD9A7F7A6CC2597C9560E91F4B5
2A18124CE84C1CAEBB2E0F6BAB50B95AE01DA9574CA9EC2F52C4EF31C9742197
9483CAA7C97AFDE2CD3F5A953BD9E92A0310DD612A2A09E54045867F21251B1D
3735B67FC61795C412FF962952C718EF5A71E20409CC4BDF54621C853825CC29
A097F54A59270B1CA4E6B68588B3FCC7E001713A4563C72AF17176C8105906FC
5848F60D778820050A61ABE75D0752DD37CA1D8C13EA18D8FC348679C9DADBBF
86634B44C6F10A7FC8919EF9BA0E0106006E84D21ED9E7CD8CF8C628F6106309
C8035695B31BF8B18E1BC6D41CEDCC432D15F5D60F27A8CA90E43F8F39D0D470
2B1CF100F6B20D544AB12BC928924D5AFD1EE312E98687A93AC976EB6F5D9AF7
15D308A82DAB15267C8AEA3E827932C66C3F845F2FDED1F71373B86B8267CF1E
324549F30EECD6067462AB110DE644AFE3D658CE2B237083A862C492ACBA6027
D8371B51C70E3F12D4054560CEFC3F95E0F8BEC1751C8C8BE852ECD53747AD7B
A03FB6342696F9F151FB207D6963AF645634CC60F2F51DB2680255D29CFE584C
520487BE7BB826A0275182FB9B33A4FEF8ED7C623E551740E760A719D1EF62E0
D4784BD94D8EE489823581FE43DD2F38E2402BE7998364CADEFA394863533CC7
9F802A045A3EFAD9B8CD1DF6F9E13BAFF3971134699611725B6BDE434393BA92
AEEF7586E9A6CBCE31671809CE9528EBCA86F9598146D07926EFDD07EF842F26
54E15956D3A5C405D112E824BE8A41247AC7D16285C5760ECD41927E4228C24C
01ABF13076204CC8C2CAF92B8A330AA3D47E0DBA1ED7C4947B9E8B874F03F423
771560E30A519A3AFBA1CEFA6110993B566A6BBFB76A265C4B2012DB59B3EAF4
D3AC8EF220EF37ED3C8C5BE42F6D61E596C8B5BF87329F6D05DBF57784BCD075
E174E4043E2D0382DCDB0F6641C26130932117BCE78351328A742497D693DCA6
2A7512D5D8AAD1466AB9CF71643507F5113F58747D73A89B2DE868322CA7C523
F89B881C37905AC943CEF061EBFC68FC218352146CC52BECF1B999219FB9F41D
A12C14D868635FBCBF3AF5A3F0DEF6C3130FA6B510DA029BB2226FB32CB968E6
E8C4BF793DC3D22313B6E22882FD7A7E28CA6143F63BAA6A8ACE63BB83022264
726388FF9054E0C3A9FDCD4DDDFD3BE4D8322C5C544BC83CFBEAA6C942C0764B
98432892415ED07A5FB531C91E24D2ACD43EF3F4FF58DC8A4F63A2D34476F1BB
CC6741DE803E5B5C57E4EDEBCE7F9F9E4F07EAE12FFA602AFCD5D372C43104F4
BBDBC85BF02FEFEA7E0EDB33199A2838A93298CF28125A4E7A3408041AB21B5B
CEFA118EBDC9F954B8F2002CA7A3ABAA76EBFE56246770B5C0E15DE3AFE8FF33
107CA2F0E7A46A6ECBCF7C9FC3F79A0127C4B6132F4E14F6FC3A125315D03558
5B347DEA79E545D5506A5B2150CC79CDF5B0A6B661E07DA1BA9AC235AC60B07F
188A8725EAB318C1A52F3D5D3D28CD81B67FD3838B372C086AC53A83700ECD45
CB4EABE3C9DDFCAF4D61C00705ABF205E12C13BEAAF61B4AA04C4A2F8A53EB1C
9A8942AEC14D7B0C6C5E8FA2AEA2A84733794504BF7C7376C08B3634B89E9FA4
C3C2E625CF4C7DFCC5B0FEDB5E1F588D146858E31EFD122A8AEBCD11E4C5E5CD
F7570569E9120C2F5909E4946E18764C0E772AEF9A038FC8EAF6BF64536C8BA8
ED9B7B6C6A3BFDD473C5735615C1646A70F7996AB13D85061365147F24C22C6A
364345641207A6BD4D7031FFAFE78AE7B53FE4677EF19ECE32EB0A20D11994F7
7EB13D53825DE1ED5D8CA10C02199D9F1A3C05D7D164CC7B8F78A02D00477B5C
3B379E1E4868E8D7E0D9E628BC4D4552655D10346AFDA0A5A8673B0ADD671B74
9B3E40EF10819E7BBDD536C78EE91A23A3728A7511BDF22CE05248DE1C2017D3
892FC4B71251B5EFD8CF633F6AAD9BC9CD8681BD9C2C72637C8B1EEED76B8A5F
959CE9271CAAD9E08C5B2CF21B6236573DF69E8CAFD6AFCF91EBDD55C6317B5C
D2D739721E6267723881252F93F7ACD4A3B0344D7AF34CE6BC56D04BF3CA9B03
6392AB776F1FC60340DA21015FADD43DB12686FAD1E9253C9B160D225C1D31E4
4F553B5A2A3223F8E8556F4227DC96828161F2C1BAA5AF8B6D99605F78558E0F
78417E393B7DB475F2313FDAE4433D31AF9D69D040B75E584D8127D4410E494F
F1F225A8C7A7742DBF270037C9B5E515A7281B4089D7C9659770777EC0601347
A5D6278D4827F7E6BE525405FB7BF22B87FB266DA908D2E59C71234F59101C77
524F43E2B6B4126A9075A67B68F60C451FED64CF3792193E67DEA78F67F1C1BC
9FC17542526F5EE3F77F4BF62E3FBF4DDB1A0CDFD449F3AD13564E9254BA278B
60AA12A171289FDE84DD1B240592F23508EAEB0DB285787FB5EBE14F8303569D
0CE5E47432CDC71727199D83D881050AA55FBCD87B6F1BC4DCCB6B3085507482
B780466E37769CE4F56C7DE27B8F43A76952FBECF9EF2808AEFDE072D819EFC2
7650A8B341912FF979B270DB08183FFFFB18B305DC55C304CF677E638BD77A61
0F78891C4551DA2D2B61DF3830252748F4BF13E2B805947530FA7F79E7B97BEE
E75D019689C16D12901FC4DAD558E0FE79C07C7ED5F498377254C63C3E977486
6BEC3E0E7102CF7D5683F6166B9DF23AB35C3115D9B805B05DF8433806B636F1
D0A5CF510ACCB0AC83A0B1E0CE8CC45B574AB03A95CE546CE6B7BC2ECB0FD789
F59A8A13D4C872D577D24C51A8323336B9C09585E5898D04C93B13CCD484ED89
6985DBBB56DBCE142D17E020DE2EEDAA7045E7A9BB9C95F6F5F242016146140F
2E8F26DD1109BEFC016237548088420854A15DF3143D534721A8CEE5186292AE
634A0188FB9ACB2BCDDC99643FF17F838BE17076BA4E8B393A5125CC8749B07E
22533DFA0A8FD56B93CF62F8E99185B9AFD9BF39014DBCC1906BE609764C92EC
97DFAFB1EC238FD93D275F06FC6ECD3F0BCFB9FD20F5F1EBFBA2EDE43E477926
E40828CBAC053B55C31B42B0914C4044FFCE4D883BD8E1104AEB16F6EFD4DF19
6C462DB526D845330DD220035E98212856BD0D5415CDBDEA473B7FE40E32859E
D03A6FCA1100147560A9C38361AFC191A4CE6D820E4B8DD327F9565749443A22
E21A46744037351D95B2D3A405B39270BE80B2439AF94D2F99746CD367FA092F
FBF047F136CB29865B538D351174F8D1DA9D11F02D63A507A70B978F51964145
32FFB46F36EA6280DB6F7D11F1A5A3D54E73B765E5BC1F2962BCAE65F3A9EE9D
F464B01B73C6822FDECFF5AFC95D9DDC6C9AB62280711DC5BA739AA5A389F716
783271D29B62703BBB2C45C6219BEA335F8DF0070FC0833130C487C99FD9B1F3
E105BBE0ECD0CB2345DAE098131A8043E064BB5357CF28402E86F2B4FBEB8F38
7F3A5F2567D87981F4D01BAAF5945DAF8B65B349B619B4B3488C05343D24DEFF
9B27253F9B5E40BA8943CE7FA2C24E1146E154C2DE69EDB790E61EA176EE9B3D
203EB11EF46B73D3EB81AE1C0978A54558815F1DE5B9A6646B1336F71407A14B
E568652A111259986C8C80366F39C710C58F0C2158837ECB82DE000EA359F230
FF7B05FFF17977A828ACD96F41459C034991269548FBC1125B6BF4BDCBCD3AEF
A4941BAC6635D77ABBE3F05FE0BED47CE528E71026A9A7C9EDD4792E6AAF8818
74949C1A3AF1DB2E00CD61B2487CA6B9922C7897EAF1DAF4A497575368A367D1
FC76296361FD780D21C4F14BD04AC854BFBB0FB5F4DD67DD7AF6794DBEA8B6AA
A75A72C8B0A40615774EC5D2A53794B4B8EFD3A7D8C7490B2D09AA2E4CB87386
7C8892FFC0EA21732C5AEB4C54EAE0FB68F94CED4E4ACBC5E42CBC99C06C2333
59829C92F6D8D98F0C54FC2E32D42E041B54C26F023BCE20E905A69DB579A3F4
3F4AABFBA346C949C257B433121303E1863D4979963DF8E102DB0A40018A304D
36E6A5E5A5525C6AC7D434052F0AF1815F1ACF9D10AFF24E064D18A99E0C5F54
61380B90EF27FE1BED6B0CE90EB689696FBB73F3CC2054026D94E2FE0E43D537
0CB17071FFA6B7780839724DED51F35BB0C43821F045721FB091FC3CF884DD04
621EB121D556FE5DC912EABC9836F5BA896BA4BBEDA04E162D470D7D008029B4
0EB8F22408BB0F79650251C95A42157D77B83AF9BB120C091870147CAEF216A5
A6E7592CF3651C628BED3916C2C61E5AA79FFAF953EED48EFF2EA4BD68A483B1
E0A4A0A99EFBBF0D3D39D2B3846AAD97C23EF17DF034C982D73AF9E5265EF536
CA71E2F401A664B43D21BA719C14D80A9B8CB97AC70BB3393A5E75F5ED78CCC3
78BDD964EA616729C0029C69D984734C5942CC5FF6DF13C878ED6DEFD8648F36
FBCAB30EC2B8DD86A2EAAE501CDBD5E259315A8FFE0C4C07F90B1D8BBAD62E28
96666DC93ACDABD6456AC68A321E05ADDB80A225B56B04AD9B17CD49A1CF43F1
47D3BF58D791EABE8006FCA2A1F94F8941176DBDAB7732A388B6E5EC02871527
2A329A055D49B492061F77121F09FF3C6181F1DE6F637ED6D16D53AF87AFEE9C
7CE4464F063D7256B6A1DE2A141C4B62174ECF4C6C2412D152C244D78BCB7AA2
5492F48B320BC844F3FBFB8D0AC4FAD49C462A2B3D6B1541CA57D12530564B51
87A6955D8F82B0D403FDAE24300079E65214FF661B76010E7C701601D1A1F6EC
842951C63BC73A5AA0C15CF69FCB9AD662150A560A1F3664899C1E05ADDB80A2
25B56A5B3A1ADC39C4E969648DC16C0B532AE614FE37543791F346148A60B2EF
0AF66DE4FE9BB56CC104E42FF536BD233911655BBB063ED377192301151607FB
B1B742D04840EC82FEEBEB93A6B67E743AC9FE9D9ED1E99512F509180E51FE79
E5F084446BCA2EBA9EF6E4597FE4C975C3D80F296FDF1401EA7E63416CA28909
547B46D560E3291357F258DFF2EBA9D5EC4969A9EF331DA14982A59034DAB873
9561ABD6335B826EF949C9A41DCB260E8A266E892FAF995B47EA551F93E8E77B
17095B94B5CC3E2876E4737C394004E42EE52E92A7F8D444C4EE912B680C9B2B
030A856B93A2A24D4697CDAE9CEE2CE030C128794757C64701269B96C0B255D2
3D91F120AA037532E096A42169315824D0A6890252808F6AEC7D1E01B13E499F
2E9732C3BD5F069617E61B44CD54697274060EB4DCFF52EEF5F7D3C4B91ED58C
3D1A66525677BF0312525E5435E5A6F106F4ABCEE5CA70E196820A06695A39BD
FB2EDF7D6A8B6B5EC44CD039FB3F677DC4F398DA22D5A2C8DEC707DAFD962AF4
4267E1B8C536DC390FC074DC50E3EE0AF39A032A90C7B6E18DC1ED4800E07552
1A8C020D24872A36989F6FB84C0B2F0F6AC163D70BB5DCE51C53571457F5CA00
BFC62290EABC36B85249035BA22B647BC0DE56334C235921060448BB2C3E50CC
7F00034B283438218EA74D6EAE6CC8B55455FAA3451D9096DA801F324A76E9E4
3B40CA650C47ABBEC8D3ACC5A6CF98FF96D591A64C14218F47D4BACDCD11C976
0FCEA2A24B3F44CB2A7C3B4201DCBC52FD82B7B75E094DE458B532C024D59C22
230C8EC683A2414A1576039AE00851CC4F1A3A9B114E908F02F5D602A35A4F92
1FF32AF9552FCC1CA04AFD2DCFC26F231430289CB5FFCE5D9CB8A228C15F77B5
F49F4E5EAFD897D5845EB5C54F8F58284A6CDDC1C89E4ADC1B9E436AAB9508D9
1C2D792D0D38A9C76EC79E8116B7A1A2FEDDE3DE08967A7194919D5FA836C343
2CCB32CB8671BEACAB47CA11FF28A91639057008F00CEE9EE1AF930AA91367C8
A48EE4C5F94DC0FB77B992729152841D7C8229223D9101F4027C952A306E30E7
62FC00B0C4D1D4C808A666228E9D0E86CACC17A9B048DD55F237B606A25A2A72
AF7E9F52BA625B3C9B89E5B333432A9BA7EA99EE80D7FEE4F8C804C1E02F055D
13EE623E0A7B8ED9245C90D490E9843F1CD299E98D157E7E617D279CE54CBC15
00447BEB31564B064CBA6088FC2BCF6271B6ABC1D0390820A1BDBF64896F667F
A52822AC4B6223D6BB6DF294878FACF10285CF7F0798A1766E41FF99EB3B2DCC
A79DDA2C95EB1C46AA0A24C6F15C5A746AC9AF34E6F58B42DC7F0CC721B7006C
52B391C426FC257A3E8813BD701E47F45766FB2EEF6C2C1DE831B4C869FA504E
94411E5159B69A89D88AF546F39733F4B1EF25A6C21C405FE74526E6C1BCE3E6
0C6F2100CE044E79EA8AA79DF49B4F1B137B21EA8751CD53772DD64F300A0408
163B734293DDF1098F0A3841C105C026D8F80F0206EDBE1F57F2A943D2A19171
BBCCC75EEA003BA8208740A536798716A63682BCD9DB29A91B50E70B6CF5E207
432963B5D90F550A6F43CC0088D706C049D741CA3371248C5B230A89283F42E2
74508A3F360BC19337AF35E9DE53B17654A9BEBBCE2A1EDC355B7002E709487D
074D85D0EA20C57D5D5DE7A7B7D9746D80FA735409C4D5C65D5A81403C4605F6
D1FE727061E74169A0A0701C5F7CE4A67E06C8DB5382F75F543B911A8036FBA0
BC1D9AAABED294333BD0DFB8710AE8C130B2A49F8A233C0962905935FC4F0AB7
41142EFA788284E2A78076D119735AF1F8E2AD80EDA487D5E2890FE391AEE787
2406DD5F6DF5A7E1EADE134FFA3643C763C50D7814E19DD86F13F22AFA10C230
A4E8E136A2F259C8D13586F982EBD392D944698D8761F600EC7F3F8523D89A7D
C38CBE6D6513D3B6D4659BC4C6EDBC0DB21B038592EA84F5DB8D0FA16EBB9829
88A0692113AF10B1F16E7D8DE0F580E8EECFA3D1E103038878C510D9B68B9E09
A326826A6D6BD95CE12B8A9A1B7D4A61586CAC279D10BF60945FAB37871EF732
AFC4AF60C2964AA28A7FB66B2D9362E77C0F2922240B8C0C1FC5D0C34D3DAC6A
1CB2ACCAD8F518D8CF4C70CDF0A404ABD42352D0B7B3A875C1B74D6174C7A9B3
0542346C7E472F52CB9F33A616E15FD4180EEE48ED3C14996760C9AFBAFE9080
ABBF3F3D65A2335850D41DE1967DCB5670C6A55B716435C1911A49A1D5038F07
BE78DBDA4FE1A6AAA259F4286DBE18829685336B55595FF5B74947F9521F70B6
A3CB2AD4E6164ED670DDF70837B84988E3D1256791AAA5609AA7B1442A9817A9
18AD71E5805CA039F86EC95388E0FF0B58FA3B2999B4717D602908046ED4FD6B
9C2DEB20DA25A664B97C87245B1D2E5A0955DC07453A87BA41E9F3E0BCBBF03B
6846CB6103FB03882927F7B93B9CC285C3B402F20EA6626CFA0D3BE732FD7D5D
63B82046C52E04A7CA2A775D9901EC6A3AD5BA4D76715122D6E60D74AAB534E7
B9072DC637BC3658D6AA26E5EBC27B6AABE31BFE63B2A4DD75EABFDC46BF2158
5D2761E463B537F1D02E7B14B81B61DF0D6BDE625E2C6B9C02DDE661B5BFAB87
C8D7AC0DF28EC8D05B98971B5024BF4201511C31809956B89F92474A9F88C991
B998A410B988A1F0CD472A197651E96FE018EAB00050D2B57B996C4577DB43E1
2B01D2504A9BCA30223C05F9A6D266210213F6288C5C1229CBB261BBB2B601A9
D74F0FD65AEF944D1A22ECF0DAC9841070DCB31C4C60E4EF7F5F3C6B1AF872EB
5B1516E5064FC68FC37E2A10ACC1F2284E1A54E29426C3994B7954744FC0BA7A
890F57F53D816F0108FE6C9C02A5FD24E335E56448E9BE97B9A9A0FE0E9723F2
C7B190185438268F1547779A6C054E14EFEC98DCD3207781CFB14372D3E2535A
74190B00907E5C9C1CE1035138B8E8746769413A8E7028FB77BF7249AE82546A
9BBD5CB0BC6DB1F2591BECDB69DF8A9B0F43A0A285D4B462BB6373E70725E9E6
0272E2621EFFE962B3FA0001D230B141E18BBC7B851FC08553F56C221B2E7517
B361604CB430435E3F2E87EC3BA9F82AB44E73B41FD1E362A98676868426A934
291DF73687B1521F3C2A49EA081753EF625B042F9EEF53E273C7285D1B01C59A
B875E344B5F41DC8484B17FA7E112C0BD1CE0D5F24E2BDAE778909D8A8D7B3FD
66266A03AABC7FCDE63C04C2F3F5764EB2FFDB1F49E9B7D20D4D21F55A09AF3D
7E9413CE643101054F2A5CD0E77CF1CF41B768258F2591E45BBF4952C7E0446D
C02789CB2D3CCC32472CD42A78F75CC74EFD9D2589CB5186E5747BDD73DC9D38
B744DA1DB258E2E07B85799F08E0A8A6696E8BCF7150F08EEDFCD653E33F0F39
08DA195EE118CC7E3104E04B314D0A829444D3B52AC2A1A0A18936A742B23FB9
E306D7200D5D7B01B1A0ECE1C65825CE7A9F248266CB6A1DB2BF1F88BE568090
85EAE8B5B31DA23B029960ACC778E5D64205D4B4DF3C1777FDE3EE8E9469D020
E4F916CE12742409EB7C0A1D6366390F4A401F4F090727C6B6286A2613E572CE
11D9CEFAFA085B064287F2F9FDC995FF1792CD8E6C43BB7BE7345D1987B08AE9
96AAA1399DE61EA6E0834E73962100E212508EB5C849B70A642EF8BD72807933
4041413F59E370B39FD6BD47004F25E569AF0B007CBEE35E026D9DD1F0E822DC
F467F4436B7523BBBF33746A7E08424C3B487AED532A2689ADA0F4A35B2FC238
57D2DD72037B8154E41E22F2C482B6AFBB9302F37F440043936FD0F2A449170A
98BD8F6B0C77E76A250F5DB3001AA0DAE15ED0261F6E0EA965B3ED17967C9543
E81B247645FD6B12E7E644D49D69CE9AF11CA76DE5B46F3DB8B96968A7ECCD02
4FA1F5A3EF81B76AD595540C00F3B0630B0D6341B234FB014B116F109819EC8C
FD61D26C9562DF6A1D44A945E7ECAD1D6DCD08E7A12990DD409AE3A1769B8CC2
05AFC9803C0211121E7283C23A6B3C20BB61624E88404148E237B33EBBB8D251
D0DE73CBC8B018DD9BBE302E3192E3D87A5795515F6B76FC5F0967C1B261E587
1B628DC9175A131D9688C813F565A495539C9E0830F826276936A5AD302D41E3
3770AEEA52F38F338485324541F144B3037BE8A96CACAE8C478B24566582A420
0AF9E1293E975E148353BEC82BD1225739D73B969580876EE9FBAE443C7C0BAB
3728EEC855B9ECF29930F85E45737A8A04B5D1F9A0FCFF2C63DC8E890EB909D7
61ECC6F562E7606A98401BB42A1074ACB42EAF1017BF1757FFB7A2CC62BE9959
88F53908935BF0ED8D17260CED852B79A5FB91F3504673D47C234E1890FE5479
E795568F61A59860AC1B6FC1475B7DB88E2439E3CA9CD0731FF9D97FC5D354F4
3767BAF460BBBE69E5E06C86DF792921FD1C151C92FC8C282183CBBF0AA0F97D
DA5071A19CFE7D9CD4EB3ADB7B1C6FE3B29FCB51782063EEC05E514CDD4B4BFC
2049668265377C293A1ADE854661DF5A9689AA300A6780873C17DFF75CA85CBC
D39D27198AA76A61E8FC54083E5E59794D1F2619556EC1FF8397BC7EC1572CC5
AB74AC9DF5833EDB153EC47007D96D1E16247D5CDD12290F20FBB82A6384AA06
E1A8953569FF1D3A77A0760144BBF93613465E99138686393FFC1E60B1042231
5F2F49398D47DA3CE407FA5738C7BA18D771A46FB08B310CF897969DC3AFEB3C
514DDC9D060EDE6DF20F789508415C5BEC734A91A84376F4EC6D58512EC3B249
4E65DC49DE1AA4FF465885EF598EA2CE59EDB31BE37F32F0EF4C92704913C318
ACDE380715EE5CC7C039B42ADABE61B1D79A646315DC0485BCB68BEEE1282826
9B113930493AD8C79642F28548897C67AF7F97A8181CA21A00DD60EFF8DABA5D
F3905A45A4443B3C62CDE0C0ECBF991C59E9DD19CC10587C5F5AD124DF722631
30EF0483A2E86F40D5392C7DF5C7385E9B7C7BE8B263FA8724BB84025329FE9F
078C9A39D0E983AFA30B13A9B2C3238AEECFE8EB54E5A3CEFFCFE1DC98077554
16137352B1873A7DE709C3DB1A0BB9DFE01742887BD6425F5D23ABDEF700A8E6
AFFF72FD2DB16F14BC54085E372AD783500A577DC8CCF7CC5BDCBE030E88FB38
678DBFCC4292D9137B501B7FD7814EF926C7D7B5525370DD492FA8787326DC9A
DD3EAB82B95E9D3F9E0414D45C9B9690925EE96D61C6DB34EF3C64BCFEC9DE9E
CCB548B011B1E63ED4403C2A97F601CE835A3CC203F543A6E83F1ABBCFAC5EDB
FDD3FEAD3F73AFAA8462A3E1234C1A0F48E55374784F2EAB8F1AC249E8217F8C
F8243A0FCBCD33AF1B834CD9830DB4CC953C09111465EF26B8E9CAD4858B84D7
63BAED7ED8A91B87E6BFFDEF9EDC8252F9D0FE0196BEC2B3236B9EEDCBA553BF
F90E71F3C91896E9C36ED5FAEC9C2D4649309A75CD8146D1F17A4731FE896A28
C73BB91A51AC5649BC2D53AF11D0B832D281A5BCF9146D5BDC0CE8D7CEBB4668
F2B4AE401520D7FCCE54D48D4EA64162DE5640726BE98B0A04CD388928F49C3B
7710A30EDBBC33A04D6CD176DB0752CA4C0DCDB6DC031259E0C9F6AFCC6D38BD
454F08BACB5739260BBF555AF5E3C13E8E432B53FDADC91F82FA7973FB036E30
712285ED106CF5C5A6195C02CC9B3D947CFD23A1BB074EFE3E879A23B7F5FABD
F56FD5BAF74734DFB4B6F0BB9D5DAE0C628ED47C739C9673D0B934347465B56A
0DE229E54C49E76ABA4C085E4C9542A66B30BBF7A1A6E2ED0357A8B7D2C66323
6C81D5C88147CD1A79DE8FB2741EF9BF627F305A034F52AE4A94845BE77BF936
781AE957C72CE82396801CD6DD387BFA34795007B9EC89F79B00E4F6D9493BE7
0B69C8B9F76B13589A7DCE09BF22847725614295E441380695D8B473F2199086
ECB85C93F0F01891B9A94A670A706621B1C7F79DE5F5EB41C1650483629F60A0
2F5FA96AD2B1FF1A6DCA63C9E9C8EA23B2CC7F83403D7D25363F4D18C2623446
4B44B08E37CAFABEDCCA0992A05B5630DA31355BD0BB7A4B3290E5AD7C24D060
8250CF4749FD7FFC745196C7309B15282CA3488736ABE18DA74F88C5926D9CDC
0249EE741875AE627C81A6FF26CB32012D1349F14E9236A468BCF22C897A683B
4A140388DEF89DDF022C1EE40249B3B08199057EABCA13B82057DCAE940FE3F0
87806709607184F834C915A25E1B1B6E4762F829647591CDA8CEA3DF8759F3BE
14C9005E64DA286708301D330DAF3FD1C377970931982AE9DA583A2E300F161B
EC04537599AAAAFE3F9C68209219E2356494412449503004182B410E7BF10A20
59194F23C5C1607FB4F44120D326C259D738A688D713181A666E1BE57506E99C
EB267D808381DD4990729E7E6B46D794A8123BA4D403D0A507E9735CA157C1D1
2D77C3F272A0EC2B58A2480E49D32701E6C6C73D4F5F7CDAC2734D03B3C3ADBC
87E76111F52D9F8C6A9CC6516881B35A38235714CA7FCAA356299F86072F6C01
CEB5736DF42FC0C771D4A4360EF663D18D670AF2184B00FF55D36198DA3A184C
B8D86BB5F755EF020119F38E0C76B0D2C48ACC96DD3D877E1DFB511B6ACF379C
9C5C7019DA95986FDD497D25710AC2C8E43CC2BE1D1E3F7A0CB1F8E7575615B4
6FEAFC58A9007D5EA97A928F938BEE0D384B647F9661123C4367030EA2118AB1
CA4CBAB34744AAB721DC087D0A8779F17DCA95E2592DC40619667FC8B687C94D
61F8CEF67EEF553C85D240DC382B4E0069E29551CBDB9C9F87BF55F9ECE2BC3A
489762756C2D00AEBDD53843335837210E31CC0BB6B48928C6B915E3BED5785B
2F5E33E728F920D8727B42ACA32BBA6911092FE56AED4C71812CF05153C3C343
7354BBBDC378C1F7A8E0C7767DA7162A4CF68911663DC3AD10111A4ACEC89629
4161ED4482C044F8DF4133FE106544BCF4CDD381EB87CEA1ABCC575174F73138
50257F01CA7A80E34281D4192878557570D8E8940C2E02D4AE51BF5522A85738
F3156D1FFA388732B653A4D9DA271D3367A6D689CBBE59FDC4E020A52C4B53D6
E6E1FF5078A659306F277E17366863079D2CAB26A803A375A1226BB47B303C83
23F83940763EDD5219F39DE1EE5DC54ED67D1E744C4F7CF1A843A0E17FBFE4D6
1F357461FC96FC9326864340DC05DCC72D02979C2D8A8769CD41735494473D5D
739F0B2CE2F68ED8FC5C1E2AEFBD206115FD57F0AA46D1FEDC5F97171FE3C16E
0A34FD26253464E75945E33854CB0C175D95195C3D067568118805B07A9B614E
BCCEFA1F892597A24CCF02CF19D38420DB51D4A1718D192466D2813F47C3275D
42C31B1444ABF348341DB75C834C8F8E6433AF5698FDCC257FBF7859B573D6EF
43E81A3099E618096D63230992E4000E8655C6E99900B74E090B24959FC7D4F9
E2C4F3227AB68138D3940AFF994D2ADE7026A2B16810E0195F5282BCEF25E600
BB9214DC989924FD971BFB0A6B7FA5E6578F7486BC16726407D291379DE17626
D3C4A6559E5BFCA818A2C4FB66529ECBB410308B43009BE4B77EDBCEF62B593E
A0126B39E2CA18C49B710ECCA512CF666D5F9D0188920B2FC76E0F161A00754C
6197FDF59A6B1826C697FDC9C493937663C447D4D05ECB8C59FC8A4095E1F73E
8716740A772DCB6462BB6DAC9309A62895CADAC2FC5AE7C57E4C5C2BCFF07589
49350D1066EB23B38D9C319EC100D627311E14E86EACD5C6D00DAB3F74B0D9FE
050379A2EC63440D64C0877C35EBC98FF5302745335E2525108A04BE04155F03
2A39A2F9B018D725A048087DC6B595CD861A8D3DC6B8919BD6EC79E56790E14D
3A3C279CFB51C673753C351631CA38233F97EE161E981E3BC4510B66307462AA
2EE70C431658A7F7D226D6DF8C08646335AFFC855A54931E02F87C3DA7DE45C6
F87CEBDEFF2B80FF050266BD74DD05273A432D77C40A4EB3AF7BE9153C69EC57
51F8AEE264764C765D2CBFD57A5F36A68359E5395D9469339149522C6E2DB741
C1B609F51A1023B224B563036641A1CBF65285959FB807DF0E4D464E7BFDBB07
D04204F87813BB7CC968E947B8162B990541E6B821B0799803ACF09B65BB2B70
9C56E8D0FA999A0F8EC69CC67BBAD411A77B19DD755551F51AC46233A56C233F
7EB22F982C46D27AFBFE12DF6B9DBEB89C390F2AB84931B3D42FB19FCABAD8E3
09203A6D02C00C6B5997669350D58B7DF5AE402FB5B871E57F9258B7C804EE3B
55C285AF9B688EC5D3D3D3668787D5CE357E98860CE324E25C67CEFF4F448E0C
F4C3511B1819575D5194126093354432CACC15DD5AEDCE4AE461FDF18B26D07A
52AD5E670D45B55EA8082A88C971080BF583249AC222B1C7360D61324C9136B1
28FE1404749CC71AD5C0E2203D4D9A56A8EBBADD70E549256217DC228C80947B
CEDFEC6CC70B9D5B7D34885A15E6A91052CD33F5A42548392EA33EA9C7A11754
C1617CEA852A3BE17131B3127A6978377AA73E9E95DBEB1F439ECB4A005EA2B4
2F9A360B98F1E6D4D5F78D985C93681532F27FA49A2EDBBBD3664088FDD63170
923BB7F017EB62F2D13B6F840ED7EE5298702CF330FA1BC195835167272483FD
EACE62D18A03CCB382CC3D1496F46BF5B7D62493013D85DE0FEF5709FCCF5439
7D713B46CB3980ECA513DFA476D601980210A33C2AD3876220AC9D7B2D3F5519
49B80DAC0A4E7F54E631A2F5426079884772447C36777477A28C7A853B2BFF05
0FD01B71A583A7B1DAE15DD5336F8E41E0FD83D280EB489C45AAA351033405F1
385C9DFBB36B1549796DF7B75A5E1BE837DECC93366FCED5E097003BA44CFA46
B13E9FD42ED39D28147515B60701219D010A6208A28AD806B4E3CD76D2168F44
DF5B250DFE6E04A1BB1AB04B3E821896D8E9D87DD6460D1A678EEFB7BEA80BC5
EE2665DEFBD5E8897435ADC95C4BEC0B4BCF971C4C91A1610E0A1E19370A7242
E750B97259DE47A624A233114AB8F3C7154752BC6F1E984AFC919A5EC36C1735
AFDDD782FDDAEC800620CF98E9AAD9B30F47A485EA3365C52BCA3638B85C5116
8E592C17EBFB4CFEE34435DA1DA758CB4451A29C8C29BC96F306F450CF9A1025
FF88FB91EE2B4957525DA9793783982F2A5AF4AADB76202E6B49B82ED6BC68EF
0283061DEA077D581B9511C1F74CC0C062B341F17D6AEACE9AFA434A2A4AFF02
3755EA50CC4549BC692AE9EE204DF685102C3AD13835FF3ED116E0B53A94DC8F
0AE9E8DB9D9B5B26313753D51202BFD0EC25316A0A8C5BF958BE624346D143F5
31D257FF204061E746080A58F158E2ED8C01354366B1F6DF55DBE718C11A4E87
430619EA1078758536E2940988A11589C0C65EF25A9BB36DAFECDCFE25C9AAF8
1BDA07292F638344D664EF6B72E67FE7CEE875CFFF181E4567411E14D312A0C2
98D01C62205E1C27B704E9A5498413DB732AC9B2C12EEAA20004357FC5CDEB06
A0EEDCEB87A9DD9B9ED6A46CF27D60AD5836064A080FA3EA92BF315C0B5152D6
E8A6987DC7515DE72F1EFCFDD965715A77AC78B8BE58A29839F0A0A203138C7C
A1C8DE40F8DA1693D057606E4C9F7CD69518C4FB63E89DC1771ADDBF158759AD
8546AC9E9E9AB0C18154AD81CEE95C5B4FAEFE2B968A603F96F51C37653C8852
64154C4D36E4436CDE0DC5DF31312FD384D3F5E34AE397ABB326AB666F431BD9
E4DB6AEA7CFCCC939F08F60E6F33FCB8831A9E859B07EBC237BEE76F0278B85C
41E646497B8E26D1578BC7F8DF0CE458F7D1B3BD7EAC7DE43C87333B2CCE6D9A
DBCE1BAAB56E9A15818592EF9150A1226EDB3B3380B4756CDDA2A2576129E178
955DA5DBB062B0ECD365DDDC53ECE468B66AEFC00D2C70A279ABF8B8BEC16DF6
26F701C9EFCD98DD9581D1C4D40DA2B6DE9BC9B48BFF37A385C6DDB8AD535BCF
D7A44F1EB90CB8268D9DFF48957DEA48A4FA6D4AB9D4722034D1070A9E8669D8
275696205C67B2A2CDFF930F41BB832971723C4CE4FEDB4F66B82B1272A467CD
37FDE1E8623DA5F3781E25EF294BF017EE582237DC13BB2B01CE878855A25DBD
6952987AA429F72E9208718670E7661F46A62D685734A6D815AD6113CD828258
8B9C3394B54E3F4404B309A7CEB242D5CD0CB99222BA8D37AFE9F167D57CE2DA
BE795DE502795A4EC7AEE60831B241527393861098E0CBF63BC1296C2C2DD786
6495829B44F5F91C647A28883C984F12061E4E94E9200EEAF7857E6F85DEC496
D27526BC452D72ECF1FBA6198853DB076F001A5E41E95192768F8C742463DD06
AEC7A91DDA13A8ECA01F55DB21EB0D36A5FE471FEC2210BFB7A050878C362D95
8478AA471F5B3CFE4464ADB69FF128E15B4E6C1E2482F089BC81E14B05F51AC9
F82F9111C53A2E9D522644420E07B22CA8A2DAF11B2FFC64F4B31C493D437EFE
1D2B7BCE24B65E419A7047837F641804663B03191834D610B88D3819128ED42E
051E24BF394B8D44A6682CBE8E9F47855E4B9A2F23A7BB766FAD9918C703D879
9B1C6544048F679D5A7AA32323ED95E582DE3F07EF210E7C775CB308A75E6B98
F0538AB35806BDAFE74D57E0FFAAA2212E61388EB553786B08E02497B73BB236
6FFEAC031722307A4685F9030C51067FA76578990CFF055F14EF59C1A4C3D5DE
7EE2E58FE808EBD76FB982FFC09D70E449D6C87F069788D79F7CD15F2EF164DF
806E8C0B482395AECE394253204C39675F4DA5FFA76772FDCCCCB318DF56D8C8
BC6E05606D059056A7D1D457D43AE34CB4ECB2C0472F3C28BF238BA0E925405A
2C7883FD2B717811A1A72B053A2A933006B1AD17B907F02B125C4C36DD85E7A8
813838488034B03BB2E2FC4514C58B86EF2308AC430497E8ECE5770BA3A575E1
2E542E9B9A3B214DCF92D636E93F7E754A2992BFEC211980492197C5E53D32BE
52E4D8D37A23651BF5B7D183E507A6AFA4ADFA18AD03781E2476F797F0A98AC2
9DFA5FB3154C3FB130374D4531FD225D68838E625A02A8A20CB0B07CDE38016B
1017E59B9030C6C64CCA0EDB7E37571647D4E65190929D27ABB78C21B869B93B
E1B8F82309D68F9B52B9BDED26B77BBDC3A8DDAAF25AC700EE6AF238314423BE
78DFF9B47798927E3E077861BB655D99EB5D1D7FBDADF96AC104656AC92B1A48
F62FD80C2CDF765D14F65047D4080366D830A879107A8E68B08D9B53CFED9D38
96D2E815FEAEB3BC3697CA85A376F36EF0E4EB43B4739408CCA11848EC24768A
73743940385E28464B9705962642308A1A9A16F12889538260BDA3CBB8CB66A6
6DD3DB35F60520B286239C829F0F8CE9F32BBF47843CE667A963A9A209C1A30C
95B8C6CF3C7738B1A75065C634F8353441A81962A93725AA2E6585DA121D161E
F33809628E1CB70B61453D59E3B1C6BEBE0D50572C85E07A93C3B8D32E7FC62D
41F4749C95CD5C52AE44C499B55BF4C0C3C1EC72413D6E30BA52AD1636584191
21E066AAD84AC2766FD6A2A93A6DE87151047752D6023B041907607A519F9252
3406C2CDFAF09AB99C48DD47D22CDA87ABDB367D211F164AC6F42144C8DD17DD
71272C3940060E8D5A26692ACEF275624B7FF12295F6A67AE63B91DABDF3E730
D9C9909647831542DD0D377E79216725D440F775A9C7D6AFD08BE66F8A6EA88F
CA2849D42B258A6504CAD04B0DA67BD79FD116465D2F1A6BF8D4FB827664DA5F
173AB61C939B80967214A776C7C03338AA9B8C39B05B7579FC2E8459C81D9D61
D708B5F44741CE98737DE6CAC25B4BBB42B459355D1C9DAE187C1F781CDF1DFD
DA03874A5EF797BB30BA1443BCC4458A8767F5F72B44BA8BDBB6338AB0FB9CA2
4EE37D73A50C33661A20AED61307B01E814C5D1FC00F74E377C7CDBDD41F3ABC
AF5899B679C0622723EE52720870DD75C813AC42D518B79132A4A508C96E9C46
1A5141B4CBFE228B4067AB1DE4E22432D6D8195D30B2C98A567741FCF325A4D2
4608DBE9703BD6C4B9C85A83DFAF51FB497D47FBE9AEC90C7536D9F8932A5B13
15AAC3B18138B3A0988C839EED00BCC3966DB73E69BC47ABB038716B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Fourier-Math-Extension
%!PS-AdobeFont-1.0: Fourier-Math-Extension 001.004
%%CreationDate: Thu Nov 11 14:57:39 2004
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.004) readonly def
/Notice ((C) 2003, GUTenberg) readonly def
/FullName (Fourier-Math-Extension) readonly def
/FamilyName (Fourier-Math-Extension) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -17 def
/UnderlineThickness 3 def
/Weight (Medium) readonly def
end readonly def
/FontName /Fourier-Math-Extension def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 56 /bracelefttp put
dup 58 /braceleftbt put
dup 60 /braceleftmid put
dup 62 /braceex put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [ 0.0010000 0 0 0.0010000 0 0 ] readonly def
/FontBBox {-32 -2960 6882 774} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F6FC13F6
FEDF4B792B4382E1B8DD4D6B66F7698F4BD76CD673F74E2FFCF34A3EACBD4F3C
C6A935F0007CEC07779EB225FD87A32485FCE17DCF5D3B7363F4BADDDE608D74
12F1DE5225D1BC9EF64A528CBEAEBAB7C5CA75B68EE58CD3BCF098C552B2A1FB
75BF21F58BCCBC9B908C31E373408147528CAD183940FA19AF923D72ADC1836E
428B74A5B3EBB55F5B6E33E8FFA3025EABB8E4A824D430EC40A31F0D72A210DD
75759CE62844F0F7D49BA3D4BD6BCF66449B9AFB9BE875F751E394E0A4FCA52C
D8C522586A8B3F3C5C7804B68E3155F94CC622FBDDBFAD41C583E43FDFD10651
DD5434E0FFB349BDD07170A0FFCF4250E226F07D9C2CB416DDB63CF486B33CC2
389BF90C05271234DD30D97680F6B41F2F0B28FE0C84893AC64BF925683F8DC5
3DF4B96610E5CED82A6C57C1FB68FDBC3B4B88424038E1CFDC34157B77F9B99C
F81577EDF8A82CE0C6DC7397945E5E5C192725215EEEF3F0D0C2221C24A174AE
4D6E8C782CA8C003D204EF2DDEA75F563DD5FB33095F872BC457CA43C979BB8B
2E1C6DB52A659C726EF3BE8A44E2B2B189665BAD3029377EF989951855031A46
35A0F75CBE72536243DDC09E4D3B70D9EC465BA6941D05D1D74BFF1C090C9996
15ED42A15A4C030CD533FCF76E5546E83980D04F8DD9962B460B3C60A99CD0FE
7B537712FE685EE1FE724EEA199D4838F94802526E95371E4CF3286C1E798B32
A642F4291525C954A6B2BDAEFE1DAD4CE1FB64C375A74D82F10CD0CF9F83475B
A369D5E80CAC68B65C1FBA3BBF19FD3F7506F865DED7E3C2BFCDCA8223A756E7
A64DBAE9A000A5B1A7BFDAD6C3B8499D996F3AFAFA8B8FD730689EB5A2F9863A
C37F150635D4704407F0211A155FCB44F71B3987A2536531AE0C9664D6B142C0
06BB67D226D4263EECC79DD1C5CD4851F5752F651EECAF9454709210949AED5B
D427C6498ABF42B20E46F937A0D00449073BBCA2F54A28904D0CA4E1764964A4
ADA9A66FF9F26E7FC9C6178839074F428567FC388F9D3468D24BA414A960BEBB
ACBFD5770994206BD5B5F8B0D260E8CA79614463FE336F4867C8FC915FF9671E
89D351E5527D6F3A27D4B3F7A659D27D044F3AF6339B9695C9BA54F2350CAAEC
D866D11324BD8682BC62A5700EB14FD9588668A1F4AF8B15A14C5DF1292BE69C
B1629A39826F92F63176435792322DB77E27C0C747FC97FE9746B38B6ABEDEDC
112B8BDE7B0C333B67AF5D822F26A5701A080AADD9CDD282132A225EF97C1F59
915480500B4D4DFDBD84F29D27798DB6A9A4865E4CBA59E6CF29653904BE02AC
A875CD5199E6DDE2FA1A18E932326D48C8921FCAED36DD0903FB000DE9448A41
A83B4DA98FA7E93374770BE41EB1F29871C4C54A5A666E82E8CD0ED6F260015B
A6E2DA280AF8986D52A602E935538A775016F521C08D285D8057E4DAA1306086
93DD4E9C77966B1C0A6B2A9658F83186F969133A878419A174E4135F9B5BD766
35440F73CDE217F0AA14C7BE11A3814327003417AAB4BD5CA684CB2EE324C7FD
8E193F0DD7CB976C160B1F3E7E0D681E5CB20E7B3771603F0F9A585273F80428
AC0FB73E09BE8F6886DE87E7ACAE2514DBA7F8013C3138489495E64C8257C7EC
DF675AF42715BE6B686301ACDE9DF1F0FEE13DF00B040B636217BCA0BC621436
92119CC04AC6C8A1CA98203797FAD022527E2A048E6F2973F79525E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /square put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DE90FFC8EC5E93415
CEE8039BB28A5D76F9F68D7637DF098278D8A99D797D4F0169E9946893AFD3E5
7973A009094890C94D3224E75B576439749E63B7B1D7D501B561D3E184A4788E
3893178EBCAE7FDECEE4C72436F44B4F3452249DA4FF5005A959C34ADF2D9D5A
EB2B1483938BB1554AF95F7E0B679C0D5FE02E0CF9AA45628844A54272ACD915
2362D162698BC6F7535E14CF202C75FD9B58F3876009CC5D804B153916371ADF
860312500155CCA40C37B251270944DB64EEE0EB5716FC088AD867E935B40F3F
EE29A68FBAF8F95762FD3FF5A5A560FD903432A3A9A54A710D942F8A6C4128F6
5482D34E2542A74A0B5C7FE79F79CDC16D3D574A2BA722EB0525A5EF81FAFD69
99AFDE5158AEBF878BFD7FA9BD8962186FAABF1E2593031D084359B02ECE352D
E5D3D4331ECE4C3BEFD80599441F6C28F8FFC6DDE8EF94BE83EB86DAF47CA940
706D4B043040AA2E719D767DBE0D853B0FA15A4D58DEF4812FDF9458012EC691
73C8EAEC809B80D04EC0A7F06E07EBDBC6F9BC7733DE3F7DD495DAEDFC651D4A
329919AB72B8EF795FC391D1F4B1B3CFB3AE8D5BF42610E48E18C515610AA977
88FADE52905B691435176F4BBE80618AE6B86D98E1F393E24CEE3074DF7C7544
76591F390E2395BD735ABF43B96CDAAB034405E456AFA4A45DE9C0D1C9F4657C
659E233E6930DAE802AFA849346EEF63528E67F739FD8C584BF5F2330AFC6861
6FD4EFBC7133DC0B71114BAB2F1E01799A57F82B0DC22D42426A9C3A2032D7E9
A167A02EF8CB8F8567D37C24D129F55C89C3D36D2742C651A69C2272740E7B26
42E0172537224B8B442A1756F8A44BF8123F9442C97B78FC23239C6DD31FB565
92515D5D450F37044F72829669A06855415A52C262C9F00D59438435E6D69181
3CEFE43FE80E8301B091A9B0051AE24D4B97337D621768
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: Utopia-Bold
%!PS-AdobeFont-1.0: Utopia-Bold 001.001
%%CreationDate: Wed Oct 2 18:24:56 1991
%%VMusage: 33079 39971
%% Utopia is a registered trademark of Adobe Systems Incorporated.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved.Utopia is a registered trademark of Adobe Systems Incorporated.) readonly def
/FullName (Utopia Bold) readonly def
/FamilyName (Utopia) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Bold def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-155 -250 1249 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECD20651E6159D498F85DEA98
038CD78953484C2AB6579DE0F8455DBC490B5E1656B45A31736E5E2BF50B8F31
267E916812FA4661B391CCF31C1CEF974E371009854CCC04B88163FDD69DFF46
307B783974C408286274E78CEFDD99FB253F6040F96E4DFB000EF00A93CC110A
AFEDBCB7E9DAFDB19E29736CA84017FBA4C48D67F617A0937229695652772391
0B47379ADCE97C1A2272E8ECE87A1E0B35CFC9400B90A330FDDC52494432E48A
07A5427237AE7DCEBA59F06395833B628C8BF425A38348523AB24EE529E70F6D
E36B4FCA848B48F5D18F20D88818239EA04A1D52164110F10A861C7B7AA87786
3787FA2BB85BEF178696D7433F83886F07FE61A11DF621C607226F24F7EDBCE7
EF8B9A9C547562D02F4CD5A7C1C4E9CF749B6E8484911EB05DC8C54A020A5376
9746976D0F3E7C6D7D6D03D38DAE94B64AE7BCB30EA45A64C8A37114EA85F851
5E5F96B454764A111B571111C7198992EA306160E302F1BC74EBD30F86678687
F7FC00E9E3CDE46A18A27D24305A3C595197D22DF748F133F070C630ABB6DC81
263ECD7E72539CE014BDF4B6F329B383570C09CE92278ECC0B38FA0BF876EBEF
458119485A6A70B3C82D9CF63A2EA37E776AF51DD37736854F8CFF11413C0061
18E2A555443444908D6E49D23F564B971C26A335C7A93634622FDC1D98982CE1
CF21854B959F0E1C248D4355FD3C3479B6FD320669A68F8B4E14BE7C83F37CD3
2978597FA3D1316AFBBC16678C2C5A68EB2DFA8D4DD83DE61F3DBA36E97E3B9D
03598A007ADF0105B16288C6DA4E024850CE068524199B057DAA355E4536EE0D
736E89C40EBB32B4A86D360D5BFCFCFAD31C18487F931AB032487BBD966F0ED1
8D81410F813119C112B5BEFCFB76101C07F53D05B8BE04D971C724DB2668731E
96F301B6CC25D531E86677AACE3EA3A91F0CE66E21D7084346CD33CBF25CBEF5
D472CB4C7650DF6FD8B3B31F630AF5107AAC6C8EA23373D0BE06E4C1188B7A4F
E59DA23C2B6E2E8E94CFB4A81105C648AB572C4998ABA63A89989A282337B556
2C601416984C2ED0A887B5BE606C3882B8E6E927CFC26313FD9D352D3A7BB065
9B58D13BBD84E1216C8926D2CB3CE355D958E1FE80BC9701C6ECBE840E637E64
C347CC94398B881FD0AC49E530DE619BC49A5DD9F91B4766F06D0F943CB8861E
D69DC71DEAB42CFB71077291EA019468902186EEC417AA6A483E768886444090
2F283615BA3755E3944C8D5D5408531605BD13EBB44A71F76248B694684125A3
870232C3CCA4AC8DC1EF163019E6363883EC4892F625C6CACDD72C726E008744
F8383B33D234761DEA8497856BDA04DD10EEE7043BEB84C62D7B46A094EB3699
CDB1A9406679EAE94F1F933DE269C7AC15CFFBE660FC1E5A4758EA23EF14001D
4F6FC6FB27FFFD254B345C3C32CD7F70DAF4D48F9516794CA4BAF0827AB41309
AD1CAE4940E093970991AD11C5A830E17A51EE27F727EBBD0411E3DB595FEF8C
2501BDAF0235FDDC02683334FF508FD924B568EAF96E7344A56505D616F0F3B2
0F3DBCE8698ABD5DFCCE5B0C401638E89429249EF111164E99A03A35925BA293
6AFB113BA123BC143E5E15BAF95BE6873697845E184DDDB6760709182967543D
7D8C43583DF954ED78EBC44BE29E5C21CB755AECDE8F6111C9CF98D369E4C362
DF1D4AE695E3E7C9A622D1A9230AA8AED8C2040DE5F9ABF2868EC52EDE61B672
08A17B369AA2DED66BF5952BDB007978FF715D335E1E6824CF11E747B22C5E73
818015D417881938A3AE01A79665822529CC05115B59A4FA2CD4B2A389460E5A
893A388E151F477E637490BBE6AE236D550DDF4C8A9317F29E1F82CB1820E8A4
CB01D1754FC84C0D1BA9A40289180EA50515906D244D86D4FFAA1582B8C4D271
84CDBB9FFF2B0CCAE82E137E891246AA1BC80BC534E9EDF70FA8326B80A81C8D
F8261082F63A17F2F388CB001CA2DCC60317A9D364CE97068F7A1CDE183169DA
2D3A10A631D025A4FD53449F05D84934498C838848058B25DACD3BFE10C9A444
6DD56ECEEA0710564B2A5DD9ABB67E39C1E4EFA218954721CABDE2D47D16F4DD
25058439DDB367F346430D60D8F8A7ACA13BCDBD10CE09AD1C25F6634513CBB2
183C51EA2546A25395A8DAB011E699F46600551F452F273EF3B0C59A2644934D
5EE4F6B4E57DCE0DDD2C7625B225FB0AA7D41AEDDD16AA297732D7FC763554FD
DA115D16B2E47E3DFA592B81F8CDEC14535E2B8A7A6846C7B54BB161CEDE87AA
82D157BF7DC61B3F12A886EC057F2083AC6D70EABB2034D49D2BEDA48BCFE3BF
8BC2AD4286BBF6D5C451337AD27FCBC1AAA83E8FEA614D514F2A6C546FD77F16
F9D33A979A3D9AC579000611710ACC3C73F87CDF0D51B2F874A2E74119809117
A1CF9B75561327EA246723A182E955B4DB06F4317925AC9B11F1F52A0400CC69
2640A4F5ED86A29A4D17A63A2FD41F0BC185E9D5B18E333F9436572EC26A025B
0E76DA82042BA6302060875F8ADAF588BB2411AAC65AA1AAAB6BE7175A2ABE87
67598FCBCA51A76DE81AD85149630329CC417C08A4FB6D2DDA983FFC5F15695C
92C8F718619C367278541B8432F01876AAD2D6CE6E44AA8695CA5B4DE8386DBD
E3692C0A203ED6AD4295B0BCA19EE555BDA0085CB9C7888D2D783DABC24B5910
F2639818626B9012306D1A7DD5FCA2AE3C4E3D2E01A4D608408E54A4C3E15174
63D97883B4CF601F6FB7EC1886D9355384A7E8791F83AE1EFED4A7E62BAF9B12
1FA612B45EF7472510E64BCC960B0E89235DB38E3DB8700869711C3059EBBF0C
5793831B406457DED12F19A01B3F78E8F9D6D7089A8C52AB41FD521114F2FBE8
40DD6FC57ACFF22CE2C0394E81B8A8EF5FCAC1154498E0872FC0135192132940
C7B47AE63B91DA571764BB1E29E5428076E6C53C0BC80AFEBBBA9BE65D623C93
56808BE4D430149E37A49A107CFAE54B9A7C511141A1FB529EE1252F02431650
62AAADEAF942AF8B7363EBA0C4F6D042EC2070A03A1E0C13D318B07BA6B65F1C
9BB6D179592224E664A16CB67E663FB3D4CA3EA862EAEC3DDDBCF167918DCD30
2D6A3AC101B97A60CF1B232BAE69990D2CD82045C491286F0025D9D6BBE063DA
919406EE9390F64A24429BDC8ABAA381E767805FEDA5566400DEB5E4C3C457E9
75B281609ABBF82BFDF20B90193D791E95C17C6DAAA88EE618785D1DF1934B2A
C91CBBDB13FF3DD1B766C581569D9102F00B3C71609DCCF844AC7E318426FD7C
DDA8050BBE3DA967ECEAC8EE88C88339108F0636CB01AFCD1A2F8ACB2AB32B6F
D323FB68ADFB7558DD93588B4ECB69E71DC4CD54AF2B27C18DFC1457977459D1
EECE2BD3CB15182FFEBA0D0CAA5947D28A2954222631F1E8939793DA1408E0E2
F9EB16CA41C3D3C841C0DE06CB549750810CFADB76BFD57F9AF65179EB236338
DBBAA377F47C7E9A93A7AFB34E61EFCF53DFD55558ADFC1A2FC114052053DCCB
0C1C1B822962ACCF32C63FDC6483197BC322C92372F5F50B62E4E2F290F799DE
144D0F3ED2B0BF415B8C48421489647AFC96338D95A861664C57F143F1EDF84F
D6C24E1C1104E56EFCD462E07AABBF2BCE08C018510C95547C662B898F6530F0
86F6F7AD1ED443EA1F8830E81A42BC2E12ECB59AC04FAD46B7CBA56FECEF8933
262BA1E498B4CDC1F0201987B12D289B34893EB8C269C767FFFD8F0DACA484EB
41BBE88DA6408B83F4CE301E9D7448B5591C56A801DA8610458CB4BF80641C1F
34002AF2DC3E178351342531833E233417EF95BE74B9187630C30BEA0EBCF391
BE9C9D9A3B348F48AF134FDD043DB02C98A98A4F2EE0FC052BF7C57BF396A5A9
077FB46F0AC35097AF2C4237DF151A3096A5AF5823892428C006A3857B6C5C40
608203A5CABF0C89580C0BFD671DE591F1B56E70BE0140F639E138F3A4B1170E
2D84159447E0282F1A28CE3438426CEEA2D71D08B9394D1C7046BFE13E0E66D8
3FE939B0742F68709A54C7FC2D538A54565A74DBCCE7ABD276AEF36E81F04066
52D860CEADE23ADECDE185318ADE19505A25502CA808D50F724686B65FC64C98
F692A2CC1E40565ED5B772FCD713AD90D5C78CF5776F9D21B2AC70BAB901CB47
B8BED2BBD18664E3818299CE912061F80D8C0189833AAFD7C5D83F88DD5DAA10
3CA4B062E1DD1B323A767520EDF77A490ED8E91F1D1C3E2F39D53427F8F4DFEF
756BDF7112DCFE34D7352D8F4AADEA76674FA61B629A9A59DE36D53C08778987
6830166E3EDBD89DF941B276B6B0387099219FCC0D9B2F4560755BABBB0AB376
43CBEA2F57A59C78C5011191AAAF55B2D25021E8B58642160A0A7BF0106177F0
F2351674773B1E570649DCA8FCCCB1166D91B00C285BB65DBC8C60420E3AC55C
7435401F2429C9661A9239B30C45AC62C22AF4C5C907D30AE0A1AD4BB2A90877
B1B1CA3103CF2B562A200CB146DD8A078579FF94B7818C63B0C804AD6AA91C39
FEFA218A1991A4CB77CB209CCE6A4AE48E2A77E23AE3D35A9234A997054D54BD
85C83C036D1269C3BD6136F0361F1463A922E378F99F70BC19B2F547F31C13D0
010E4A0978DC39AB7CAF627FE95F231CE2309EC266D0200472BFF0E7C2CE92C2
FC929D11662C4261391B4EDE0BFCE860537BE05AD81B0EB43F71564EE2631788
B5B2A0EF35A4B850648FD2A3034BD0EFB0AFCEBECA917E25626C59DEC242CA00
0CCDBE672D5E83ECB2BF4F04DB181F5170D731F9B00E7615C5ACF1A9224922B4
A5F076A67920DBB5221C535D28243B9E18593DD201B90FCAA8C4DFF3B681B5DD
F1664BF5B9B6D54476489D753BFD738991C1F22D7C3F3FCFC5F81BFF234B3500
893D9E8BCF2B5D881F28AC25EAF82A57BB9900E40680505B3B4568598BDBDE31
6711691340C52E88644A7CCA66DB631E58BD647F5DDCD84A082C9BC07B078909
271C4BA31B6DC68924272676A161F461F60FA06CABD078E7F78FDF6AEFD2F675
17D2B1F2D0C9BFC8603DBB8D6B2A70A2C2F43DA4C576A63532F81D774AD4EAC9
FD4CF7CD1763C7569E58EBFD0BB65452A3175C923E567B225E74794147CFB238
0FCA3E7472AABFA15E9A5390AD5506F67838A192141BE5A620F4FD4BDD56F729
DEC052B2E6C725DAD4922FD78551075BB9F31D3FBC36E2954C7A663CAF54D9A8
2D9A43BF127EAA9A20CDEC6EE3A5F6A47308728FBBAEB2EB039AF828238C8DD6
CF07D37C2292792DEBBBE3CF3AD01D7138DA8832CE7F64649BE0858B877BE430
7D8A44253B8FDB3BF648E65894E18636F36E924EB967DD658657BD0E7974CF40
8D38C8E6A9D3E4B7BC93847B436303E25F013D2D61A5E37FDACD225E2307DC18
4BDE0BAB56828E4D91B70BCCC4F83F4F4161F3C78D7B48889EABA9149F815DE1
EFBE831278E59C3432CAAABE85FE2786437E5D796A23BE19479FD8C48F6D3BBF
4319631E4C662CAEB6294A4C6827C1FA657327AB3BC64D0E5E8BFFDF5AB948F4
78C09EFA71057DDC12832372B08A31D4168583BB46DFD95E51BC5466523C09DD
AB3D794484C49ACB078368109F20D90379B3DA9711A7366C4FAB279F4302DF9C
9D48B4958419D2A7F99777A3F38F7EBE039CD4FDFA8388DD5F9670ED556CABD3
F432E2D3D99BED9E43439B6C7C924202144243DF22AE9612796DD9343D79F05E
94988465084F4AC542516B6F7F7138D223A3DF7E176F022243F82E4426C2BE44
0312FC458591A88B2F519127B9F31D292B15E7FC6144F14EFA38B4710841BE38
7FF81613A02E1AC889AA3F48827DEBF69AFC502C9A16A6BC9645FAE9CFA91D0E
2276D5828B9A2A19558DF804734A9E3974FA1B806DD63091A33752C3BD610D19
5CF56735636803BF6FD3AD3A923748B24D078D6D474EB2DAC72E4BCE3C2DAB27
202B5B70565CE4409513AFE210DE226615C2FF341BC11295B2FE8226C328E2BF
AC6DCE1DBB9307FEDFFEC8F40704A1190B58842AD63201D6A82014792724FE8B
5F1555FBDB0311A277F3BE382D95FC3A2EF9ACD27A4076DF9C9448A778C66528
2F1BDCC2EAA259E1B0063B53DF9788B45591A5B700D4CE11673E927E2D4DE761
651CC8DD6791A3734B8EC9D803D0DE56AE12541818551C36E556EE214FACEC5C
7B9EA88738D0ABDDFC846DC19203559700FF2E10DA7F6F6E8D0C2C9A83412840
FA69D4FF147925610B870B20DA06468EF1DF9A36F6AD59190C4A0C9348E8BD68
F7A2C3061CE5041446DB157E147056CCF2A0DCE5977D820E70CB6572DD9FA0F7
652BF1C1AABA1E2AC9FE16FE502A429E4E7150D0E95427913E3DF2FAB6028AD8
84FC8A25BA640D4D2E897DC6E433A5C5B9FB4FFE29397D8ADC900730590F7541
9EB9D0B6E11CE71EE90CF70EF4A2FFA0B960C813097E14B83714D18FB60C988A
9F02D15B36233A51F4CB3B7143D941433B2376CB845EB46D28E24AF7238BF16E
0DDEEE9FE726C5357F7F712BE98F9269AA1EC0ED91C2D666E5767F5B35FFEFA9
801E4908FF0B7549D2D4897E07633CD822A654C068E4B565CBF09A14B7EF0399
4024A3214845DB7C9F7DA842B02813C841A26404D8BBB173F3A11AC9EC5AFA0F
3E89C29D1328B3BB5FCB8686EA2EF7DB422443EB3A0F7B0EAA38E28C5CE2EAA7
C8A723BC7227C23C75A187B562C5787604792585DFBDDAB01FEFA533E44F41CA
4158DE19947F7BBFD1A0315D2CF39185898AE491E1F9C61AC139B529B0158CE5
11819E6559E7F9B0AF89202B235FE1D53EDFF2849E4C3C7B503854FE184DA34E
7A837B8367327141F2B42864AE94CB06AF224E922EC6A4855B3B5EE1CD647E18
07EFE9FED819BEB1A9174498424780FAA7927C468EAA3975AF92E9606476F604
529CD60C2E17D8E22E83809D8080DB85CE6635ACD8D8F56E00DC045F3CC8D78F
A9222434A53A38705A6458CA9412993A4823E64537896B3DCBFDA8573A5C6969
BEF52613D585BB4189795DF5A8269430E40460CDEFA03710B3CD5050EB47A9F4
035C26BCB2EF155BE29A28D44876F8C2A5A242E84CCF0F75E8935FD32E4A6CBA
3BD002BE30F61DC8E9E2E355C05722A9C9EEFE8EDB02CCCE4407C72774F0E983
8216CBC34C700A17A84868FD387F1F6EE3CB17E0CFC0A21FC66714375B943E33
8284B936321589906A80CB0A38FF9D62A65507065C7ABE9378858BA7E6E92A03
10DD612A29566E803D256B54FFF64C9F2630CA8D2789A86A7F9DD5C7E449194F
984553B64057A6E9BF92C09593CAC84F777539142159D53F2C26FA20EDD6C278
4D902D6B2B349DFA26DD67C707F0205C3F9840CF87F65670B5EEAEDA48E59261
BAE4CB57E6FF0C99CA2CAC35CEE7456A559BD4CBE333F0AF507137C77D0EDB1D
F48D88A2F45784BC877854DD4FED1E8DB327A72991180F99EA7ECB065276D747
ACD1255068A22BB75B05774BDA8D74F38F1F3DE5D7F19A78FE5D40CE8672A37B
D8F6BFCD67BBCC954A4C76571C12AF0A55484431F2E22D3677374C15DBD178C0
D0DD1901FB65008C02ADD5259EECA24176A04A2A6EAD0F218DAD15479CA47604
5E4146CBC1239B00DFB1DB4E2202A86598B144BC6FC61B6788FA8F24F9FF1A9F
D7104F8612B0D8DB88F2B7D683BA137309F1569A5EFE85111E2916D38C247C25
CBECC6753754D4EC6D8523FC5708C9A6C12109CA189586EE6A85F1F3B2560343
66DB1F52BBEBC870F814EC990880EF56B9B42EC94C58208B3B46BE617201E306
D8D0AD5DBF140F4AC6CE4AAFE60A4453597E2FC32FC5DFF99C8B0E22D3C760C1
E3FC95F9BB776A32DD1CF456AD738C2801F5FB965434B529D57F922B7F2B2D19
12D5226F9EBEE3B6989C474D2A9C29AF8A992BEEBEF0B611CB7266DCCA05B42F
9B44248FBEF392A3783FB5F50DB5D1C75A824F521C69C0DDCDED8E9BAE8EB1C7
022A50E83276CC54E1C973AC9540C40220BE3940E3E872C2AF3F324BAD8D643A
421570F08B3081CADC74B52592F6090C2DBDCA93B5488A941C64D12AB3A778FD
C897C150B9189A72FA9DB3CC9C894CFD88C853127C05D8E62BA917E3284D54C4
FBE71F3C5EA414E1938A70480174A69D2FC7B20060ABF7E48B4DF7D945E7ACB9
2FDE66EEE16F920F96B5930B70AF8F83BCC894D6FC04A672E02132283C34D34D
A9D4AA971E65EF2F04CFB4C2F578518E37E431FFC2D3463B820205BF389F1AF3
84D87E29AAA354AB8CAB56FB40FD3D1869C1A68E1CA5C44948178F519238AD9A
B1DA75002C9A67FC2D7D8BED718CC8AFFDE288A3A49D63DC029934F42C4643AC
87818C3A71F3F0260A1C5FC6AC8A06C9C15CE4BEB8D224139C82C6587E9B0012
BC7243B8284794F9DC98EEE144F82D60D1EEA1CBCD4AA143FBDDFED8FA29E8B5
A4224FAE18630719155E1E61189B2D1E82CF7BA78F68B3F8B7A084B8F6B0907D
EFE6D89276E0E1C95CF6071A7428B88DEA3E357D62438B9E38F5263CA4D5684F
C828D5E608FB5DAF0F24F7E9EB36250456C487E5203787C9BAF9EA5E8BC5A15A
0E17453BE6C0AE28E33D3CACB586DFBDB4AF068033CCDEC034AF2658B3594838
1266C343F835907EA6EE4BE64E08E99866C20307E2BFAA89754DD263A24213DE
43FF223D25DE24E8A4DF96AACD60CF5AEDF1CB2527108979C144359A90D3BC9A
2ADE8312D15E4B4CBD78AF584A775DA6AA3A274CD9345B86E1FF16A09E90ABB2
DD55AFA36EEE54760ED92C968B846E496E1C930B7F9CBC7342BB7AE4B1BAA129
98A68D3515FE8EB345FCBDE39ADEBBF58AB07286498B131BFA0DB7C160886A41
E6D05497855E8A7D80AA223E221806D7B482697244754705FE5A5930C68F8E48
0F5074A475F0DC31AFA5B56612DA2944386207F57249AE01FA72C6EFA803FE23
042375D8A214F59463B11F678E554615E44A79508A26591C258697BBAFC357BE
37AE38B0F33976FFF1D5777640F6931747C69BAC3F0DD94DB3A4322CB210381C
03559D24438437B26D4B87C76B6468082F90F80B927A12716EFCB30C3C43AF8F
B560D5F237B4F453D953D3E43874216DD7E3141B4D1D9C61668C9696F798C5C3
0E5CF38BAEE47502E92FC65BB06B4B834751FD3CE65DDDEEA2D352E0A1E6DF25
D5B64EC16A3C632DF95672602E278087B358D2BFF42E60068D09020EF6C98D1B
4FEC3A7880D04284FE662F2EA41E2EA012B330F16D110592FDA58A030E05F982
2ECCC1668B606D4A116B4B9230E1C6E0EFD926408C9100E6EC35478BCA15D3E4
16E2CA844184CD94F6E02FD67119027EA1495801320811CEEFBBAC6F7D26BC2C
F94ACAF5CCA02C0D3FEA6EFFF93CA2A14FDD42BD9FC10ED09E16332C9FD309A1
B88862EE6CB972DE2C6BC1FBE4BF99F377435BBD98893DC8812A1A3BD535D272
DCB57578A88478579B52462E452F3E5A136ED8C8D3EFA451A4E411A8EEC5B53A
DDEE64FBB9C6F446AF69C74F46C5146F62E74056573D0961184955B674C9CE0F
E6A38B5BA54A693F26D2BCC008FBA19167B438A8437745108632A5E77A95C824
3F56D749EBEEEEB33D2ADF3C4AA8FBB823B8F51C5FC6AC8A00153EF8D2351C06
77571C6564034A31ECDD6CF5BEC72F502EEAEF83ACC2BC51A8ED14C5957E6483
3D67515B586B734184F247A66C9384D3EDA53F5F0775DA3E513682BF312EC3AF
7182EF2E3EC057CC6BAB23EAEE0A1E07D4D78057167802E84961E7AA5483E72C
71395FD6445EF2EE78CA804CC0FF5636C251A99C9A293C8B7668E391A4A70C33
0A44891BFBFD2CAE79754AF7A221CF7B8C0D92AB5A34B34057CAAC85DA671E0E
E18189C984C3AB6B3BD8DAF31A3ABC3A6443EB6543B64E6D888AC6FCAE510F56
DBBDCD57B243345752BA8DF9C754B32FC4ADBA8CF7EBFDA5F8F6AFD90CA4C28B
2D04F08D162A1357A713F24F92B8F8D2CB89693AAFB0310B6E46BD161574CD0E
D375588B6D8676745240477EA54138DF6EE25DDE28DFA26730883D61240B3047
03D213DA958FDDA1237F8ED56F134C4EE6068045046A7AFBBED0597524709CF4
3714406EC2049F7FE1A7CB71E8E095E32B7E902E1401A8BF70A3C3AE0AC4FF12
B3BE8D4A60383AF5CBFF57AE4C0A21133F97D113319D95D79BEA476687855548
0F9CA0CA58E77931DC3B1E799C4D6FFD994913C1F63E996ED0100CC105A76B72
AD821D920F7964D615CF7EC3A3C44F82F53BF2EBA99391BA7F39932165F66A93
7E9DD2DB9F998A3571C0DE41D6CF760BDB79D443598A6ABA445FB2C96B1A13EF
E2A8536B58480031919C9D77D740963E8BC4BDF861F539781A060830BE729498
C6CED31F41CBBB4C183F41E46F2C568EC48B856C1CED58D8E81C6E35763DDE83
67EEFB15F8D9AFA027479464A5AE2C7BA2118B840A72B03021FE5DD5678E7956
A731902959277972B1388454D2D432465233B1EABA45168A072473D9B0159E32
22C47918B9CB6D9903D1E073B4B58B12F99AF3190E37CB3CC1FD71152E40EE79
F6A63510039E8943AF5DF0071B5D1D8C5385BF11069E8430C516FD682557FC9E
F3CE80CCEF3FA1A388F1AA06009802345E43BF4739A1E166892EF9488771169D
AB523946D95444CFF40464A28D9360456C56ACC22102B844E9FA5ED68C95082C
D480CA3D4BA84BC911D294B4700504D20BA784FDCB4ED3D2166D8FFF24D8E308
6EFACADD53ECC0EA6BEB27D1E3D7823A0C4D7735ADC8F76ACF6B79D73AB6F7ED
C920E065ED472286FC1772475D3F6863FA0CE5238036C9A646C2B21B9A97FEF3
E359F8A25D43CEDE61378C0DA0107758FBFA88369D088579C02DF54CB49A89BA
A200E8C8F43832432EEA413DCB8FFA5A91E9A922F9657D920FDC58787505F98C
38DE5A8BBD0D017AD7C7E789852C349920CE6B42AAFBF0F90853ACE502DD9CAA
B1C08F96013791CE5A5EEDA4F42EA0BB030266DDABC998BB679C4699E2A1E7B5
5955981A847C4E8C6F3566F97FA7ED828C642A32E0C7E1A7F8C5FFE62A2ADBFF
3EEDE5E3D18FB0AF64B8AD4B53F562BFD970A19CB1975BB90754DB7715488D51
97E24A67EB7BB01909EE55639B948273F382AEC2EC67D0FE46560B44F83C04A4
54C2DF2B17C33CBA65F6A61BFD0889F1D4BE5B708005C98A1C687D0A9802B6B0
28A16756E2186F6BE9E72C7EE610C8CAD1A51418F1C16912EDD4BAC6A0119176
D15D4642EBB59B73E510A8F1E50DC6FC3C2C7ABA2529157D801606872F76C4B8
6F3EA353C16D2D9F44B625D2DA4E030C606BE291189189F6AE11CADAF36820DC
5FB70DE5C31981AED294B1427F16546D4537ABDD57498000D95EA92CE7C1DCF8
1F671AA51A68442C95573057F9C9B7E48524E6D8B8AEA0F7AE036988263E3E6F
221BA9AD098B32339A72A213391F092EC6189F2E1FF5FC2287844AC87DF500BA
C129F948962B0B05031400647CF147B8D098718150D38089D2967765063D62D6
1AA6161863D67A7CCCC1F5B3757B8179DFD26BE7AD8EA566B9E7926A092105B7
624052489B24EB2FF631D6BA46DABAEA8555373775979BB86CF9F5A61B55881E
2E6AD172B0A6A029F95B828F815680B622E0981CA92874A14F076F34D5B678F8
48B5338FAA0D71F817CDE24CC7C6D0DCEC652CCF0513A5DFD4C010C8D44F1CD0
683CBA4D1650004475DD450C05748CBE06617BED0A9BDC125DC3BAC7C86CEDB9
83B4E813A4D00897B27C32BD7A3AE638B980A7C3576BA33E55A8AD75FA46981D
29F7C99AF5A2D6240EB4046CB43B312E0315E7E1395FEC35135D3BA80CC6F069
36C89A3E4EFE5B16E4A920598489113C64BD1BA70F8E91489AF56ACBDB53065A
01E516B30724E94FE5B8B48C0B783851A0C228430DC268E9F50AFB37AE3BC60F
052E068B599CB0EB6CC17587AD378EADA4F37F0CE73E7BD25031B042BE3AD4F7
432593F58E162CA6770A27B5B43C5846E4EB074B6296774F04128BDD70A02C29
E2FF86EBD34DDF6CF5337E980E0ADA9C4D586FA5747AD398D29B8043CB490FFD
50535DCF5599FAD0B8A6D99B608B09CA5DFAEB08D82E665E26916A9FC0CAE43E
63D3014C0EB2E88A981BE69A5BF653BB091394C67A947AFD7F6E62406FCFCC68
8D6DECB960182CA00C4BF70193F0D495437176290ED1C75692E8222115CEFB15
ECD95B53C8F0EFDEA0740B0ACDFEDB4C6F96F51D00548DBE174E29CDF4C8F4A4
DC727A17D6B619BA773C93CFC788E19D7D08E7673CF54BAAB6291F41C2319212
9BF2E5BFAD4E58B1749A7F9F1B38EECFB8DF67C0462D3E7F261BE80807DEB3A1
6A92F04040E3EF30D05C14757F99246C6DCCA490B18E3D32735A75F20B94D6E7
03932B968ECA5EB6AEDDBC320A438DFF611879629D390EF78669C935078874BC
F6E110218748C77AAB07CCA92F68554D1C0D8D1A14E5B8F4576DD0EBCF7F8011
F3EAFA6F3864A092CC5DE1FAB2ADD05F8DEB37A070627273DFCBC734D80223ED
971C7238B7F7CE616D21CF003E52D5BB42335EBDFB51A690D73AC930A1508B0E
DD5A565E637A6D6ABD1C7B11300C3D697ADDA60AD2549948180D83A46C7C8A52
B68E702ED7E1E30FA4BFECD3D914AA3515E722B9548C7003676D210263598C96
F776AEAC83BBA7528FB68664A9F50F7D4DF02EF42FA66D4DE0CF70EE8D3A7AF6
DC4F8EC74130A2A5E2F5B41A4BF1D7178824CD9848FA3B409EFA81F6B5E8339F
14916D8DDA0E83119D2B4E33E24AE2625E4FB53780E394D9D2571D8D9740C3FD
0E44BB3F93D7F967428A2B7DFBC648018BE092A42894C78DDCCEE09CE38598CD
A38F286FA187936ED182DA5BBD35B37862E257887CCA933FCC5AEF37DB70A8E0
69121F3566A2CDC8FBCA8D7911AE5A16545E67B6E31BC9A983B14C095BDE68B1
80A7ED11B3B415C941F8ED299BAB6D69DE435F11F337847861AF5AEAD55EB404
2D30D14982CCE2748609AC80EEE9C77950250775728C0D082E512F340CFD39F3
08E018AB315669D9AB6FC7D0686B36694A86E84F02BAAAE7AB6E1B81C289B891
9A64A7DBD15C756839F21678E09D9D2EBD05C06D1C6C4890B0268E695E978379
FBE6B7BCB61AECBBE9EFBB171F2FA245302B71EABAC5FF0E516D652AA8F1B82B
395BDCE188689D9A1CCE52D3E27F002B5FB2C3CDF58BAD19C9CF9B3116814C0F
75ABB4056E9AC31D142DBD2E092483F6000824335275021CDFE1AE39F650BB15
FEBDC8CF5E2C45E258C4A6DB102054068412622084FAFA0C67866D1159688A98
7D615A0E247AB348C96C95080D2AAA56F92BF93AB067F461BD8E22916032AF04
25B8B8CBFECFC5EA3CADB4E7207DDAA7BA395B6E2DFDC49D61CD4C2114859F2D
9A9EA2796127625ABB1F7C4854B6771E01F1E0C4F6A5FFBB22BB3BB5615E3078
045EEC22EEB34CBE0FE99BED77997686265125CCE0A5815629E7F83F146CBF42
8BDA9031649FE4A54CA48BAB28A2C76BE04ACEA3E36A7D8F9BA33D6D410FC2F6
88EAE3829F9168FA0D3A34453689343388CD4C0CEBAA92D4F22EFC3557FC313E
A50CA8F8D5F3B09A2C48F425AAC0866A01BFF9F900938EA41F649E5E993875BF
D5651B0329EEB8270EE32743A15F8A915DD1F7823EE6815615BE0B65075422C1
87825A8518D36008ED658D753292407AE54E1817418D036811C25CEC72CE17EB
EFF8410B87C5FEF222D6A983C4FE75090534CD92DF628E12ED30673795E150FE
D035600FADFCD0B3BC32C36588D4CCF5548362A5FE64799BDA02F3FD130686C9
A4EB1080066DEA5EB5A1FB873DF5E15B2E3CB066989199CDAD066EF5480D2842
50012261B37EADF65179AAC94228D456D94AEA2A2BC3AD5C8FBD0372E3974960
0054A19B185D7D4F13CAC04F35C6895FD41EC18246BF07375B326E2EECD533E4
7AA9DBB3ED15AA0437CA7F9663DFE2801105710724A05ECEB13B02A2F617EF69
CF3FD8C4C1166BE858230FEF0CBE935985A186C67104AD4EA6152F9FFD8F7E1E
A749D0CD99535886B34D73F8A9777879F72C444B2D7917B4B81B0A67D4EBFBE6
A84F1F952184557DFC573A22891C9002DD2DF07926FEC30CE2BA3E87D05609F9
89252644D69CFBD2349ADF7351B0CFC95847D850A122F3D5B05A6D15D6517615
6624D8CE46268AA7A3701A99A040FE5F6D369AD5A8E9B7248F38DFF251DB7C95
C0AC298D9DB49E020E0A56219E858B67EEED7B17D13D707701DCA855A65DF2D1
299CD8D09B99F80DDE2B14BA3EF3322BF9DE58769685BD6C6004478FA4AFFCEF
702E44D71517C789CF02D07E6C48B715C1CE6E9161790F04F12E0BE5809CB3D3
EDD4A69A16BD6D3506575589D117AFF8679BC13B7748AB69CE47E3D8A2E75496
494D6EA9601024CCD01CADE8158BB4AE9A0BD0C1FF5FC7CA0A81857C1720B4FC
6C8BC8AC57FA6BA378738498BA861C38FA7373DDFA96C0E5A79C60863EFEF64D
785D2E6CBAAE69A71C038B71DFD040841AD9383E09BECC1604541AF65075D512
7695D6FC07A258594AE3ACB0EA984D93AD1AE5D4C341B1BC284C1211FB377A05
FF405BD3E5CD6F09067C1C8B36F036BECCFABECDC2DC87454C6CB74F09584F5E
CCC3D9D3B18477A990C93C8933B501A088C91C90FF214C9B5B8FC9AB5A7A9886
F733036ADE5237A6B72499A5D152FF9AE1D57C3955597F30BA44D1D2D813AB43
6C40E23545FBC9F795D5E1FA0EDEA7E882759BF0F2048D10A5316DE091F89A1C
96A427B9A41F2D350D398546BDD0A51FD059DCD48A010F65C372C080E4464BDD
24EED10DA9BF14EE49829E9F753B28EAA745D519CB211A48D16AC13894C91563
15D7BF174FAAC6A389D2182085EEB70D54D93AB3AE38E1E66F20BAEC0151323B
439CCE6BD4A64198FE3E78A4D5246D21E1C38F73C8A76D7186164E3FBB3CE002
BAD0307FF102F4AD0F698234387F8C1CD51D0D4E9A773A49B26FB3B2BCDA1D35
FB840012A33AC6D344B758FE09FCB2318E815E85B321BAF8F1AB0F9BA2CCD791
D1E9D49118B50553115D07020FD2369DB6374AFB191AEE750E9E72B24B8AD68D
186F80CA03EBDE4AA390BE7E5B23E1025D9E4D9732C2C5768F036B7A8E0B9305
286E320BE4C000003A88CA6B5D4AC79AACFCCBFAC64C74D488566A21BC8B1CC5
7A5D7F7C91FCD9921723BD81C4207A64CEBEBFE9DAB0877AE4AB3F4DF764CBFB
54560459B7CC60347D2DC74970BE8F383136E43498E324CBE9D12BC8ACCFE6F0
4CDC9B1F8BE89A536EEA4C917A1A94B7EEFAA7CB1AF2C3C8BB77BB7B2091CF10
2F6A579EA997DC00A61627FC3F1E7D04513F0A11CF084A7D6A1512EA28AFB297
DE54CE0B13629B9437446E22C6610010DF01720DB290E6E4333E0446D2C7A5CC
5A23F4EEA132138016BF7FB49DFDDF5E95EAF76ED942CF90F054C15C9B569D14
0941A61EE997A91AE7801F6E6A1FC60340DE0658CF8A6FC7C5E3640450BFEA1C
22C0285CEBD6ADE595B8F9CA60E7E1E522BABD7B6678871B99165C8DDEF25FA1
9CFE61B3F225C67AF73F7F5D396F2C3996FA1BF71D8CCCA3A58B88EE38BCDE88
79A37452DC158534A1006FBBC939655C2357A51B625B910A782EF4FDE6E855BD
32C4E779802BE67980A61FB0B0C52FB8B52E67FA017885B1023F1AD7173FF82C
81787BEE9A4BB67A37517A5500BA3BA86EC4421CD750C187DCDF9C7A7CF98927
F8839BCE260B161084019DF22523FFEBA7BA49A6B55D758302AC6F3041D7ECEB
34E776ECC325E35AD6058B841E6165E849EDBB1D9A9167BFB8B50DA93BEFE084
0C0DBC7503BA559C8138C3B52C5E5E746B86AC108EB97C8DFF8A3823B7E745E7
4F9606003B1E8D0DD2E4995D696FC055ED24ECDE579448D280958E8419250DEB
04FBED4D2DFA00AE5E990EA091A13754DD0AD90570B88733B6C4031AEC57017F
80314D6E21C8600740E9CD1935E8BCE03DD779C6AB5E526BAFFF2FCDA961F02C
09A19B4EABDBA0F42675493494652724BE775C932282B9F8DFF9C0D2241DEE82
3FD124B24E51A31FE6F0B70DA9A7EDDC5C954987D0FB0C1A33DA078511CF3986
131F1FDDE2EB2EB597F47C540CB0385FB450388691D2CEA84C763CB963ABD3C3
C50233C43AA12289C5E8D89ABC6D3564DB99289EA8E6D3D8C7B15BC24ECA6D67
3553D731EC2E1B4C8FE9EF78F66733E381BCBC6CC13DA91A744620F89CC8E80D
7B82328B8B07F4DD267B8F17B4E1D065D150855611A903AE8CB531D6670A5FE5
24D4FA50B8905411F6810B8FEBE55277D5DAA6E06D42F18DA387DE2524D7287F
0A2A5E7D4962627BB683215A358ACEA93783B09E3DBE04103A772B185984DE6C
C624CE04A6F78BBE5D920CF6F9AD125A56CAEE51538C3AD56D722011895EC7DD
9A976097D30F3A6CFD267326DB03F2CE0EADBF8E26E32168D8CF382A8F65EBA8
A3797F62BE7C04C5A7B20201C03FB33C9468D16E5708998BA1BEB5C9813EAA19
7B57C411DF6836D5C53063FF6FC97C154471A4A1ECE28FC5D2815053D4E6C049
DA624045892C4CF8BB111344740B6807A3C03566FBF3E9BDD1CB070A884EFE55
67E9A9A1B4ECBFF59B8F5DE945A83A6400B7D3CF3C9B1B487844B58D1EE3CFDA
C8E8811A5945BEBF76B876406AE5E10ECA11AD2F0FA2C76ACAA9BE9FFA43A0CB
CAE2CB3F264F0C6AFFA73D0737ABCDC60745A72CB7D5E7B22E1E1297649FCFB1
EB675BDEC0EAE1D4DAB32416A1580DC2D4811D9373AC76A4DFB38E1B9D0B563E
200FF507DAFC7F20033661089957A514A8B81B7E1B186DB74C33E4993895E038
D2017CDC52FE1C96564C6542D309A79EB12E7F4DCD2A8E4662A6352427B072A2
2A42D2B47C2092B2F8A49CA8E7B4A7289D09332FE3F9F1E26BD057C254FFBEFC
89A7CB13D4F99A353F69AE2247EC3DC5448FE34DD43C918EAD930EE4A54685FF
EAE203C008537C35C8F52C5DF70C31B84B43865585CFEE7F22E94F03EC852EB0
AF6AC7F8D0B393061C95D1F932CA9BA19793151BBC1CD15E4B4C101F30312BA9
BC2B1F6C955873C8118221517D6CD29373D30330F8BBBDA15032319852F04591
8C5060DE7693DE859FA9CF23C98EBF879D097522DAC24616FFB0D98F314F73AB
CFDCCA04CDDD950184DBC6FF1C6B57F3C6F5C4726A59CC149D7634EE05CEED4D
37E6A119E8A33EE425116F7D3B29910C3D9789F021F273C79C736A72B0855DF9
FF762AFA9219D9B65071F8DD61397C7E66EAC01B24FAB784F7CD90D142313B6F
C7ACA319BBFD75BD3374CE325712CA64407BD96695D27F64A2947C73F5C78C1A
92166836C12F549B97DDFE23999B9BC3955133C8560544CCFC892C5D3BB63AC8
41B42BDA156C39249F80841BF2379F646C78311B4449D0919C5C0EC65536D6CF
343A06C1072415F0227B145544956D1ADF54D1B4E663C077FF276FE999BDC4AC
86C3A94427B73F686E7CA7E4F4CA17D9322E12FDD77B3FC23AF175343FDEEE2A
C9919C80EBB62A5E336235401CEC92920AE80CB6E258B2FA51596AA95DD8A357
DD981658649E2EB95FA595741EEE5C3B95577013BC56E7173B0DDAA927BF0857
A1D487D9482C3A2A244F34E287BF49235347B750908E81BF1DA107FCA437A638
8917BEBFE3B8187A1046091683273FE84BA5059F895907C5006E346E41E531BE
4D31D04FF27022B71D0C30664BA626257563F63E7A9D9421A184AC1EE7447992
0E7E3C96B5461273146BC9341099A0263B4113C785ACBF91C22C8EE0F9AEC09F
C17E65269333F1DCA14CF40B71F80B3A98488CC0981610C1E83417854F7CE9D9
990DA6CF7BFE96831F8D1008FDB80EF96BFEA8DD69FAA2606B78B3F7AC3F2FB2
8CC42A80786EACF3537257DF2D28D2F0E0DF24C8DCEDE389DAC4A548668FAE52
15B042212940E755776EB9AC165E6B449DB5019657566931E1547FAD8AE1F04E
80DDDC279B56C29AEA3A83B35072FE3CEB930327EED4DCAE37E0FF39FD601D79
4D28537725B055CCE44633A42272F76F0854393F857B6D345BEB8326FC22274F
5B216ECEB440DF69FFB31CC219EEC8725362A817B2A7FE7E334764F425C9B4A3
87AD43E48A505EC5CE9AF19638A94D8DA0AFB50441EF6A7D5EB9FECBC155F41B
4EDDFADCBC4E30211AB3E0E8E7EB05E9B48CB97F9B4819786AFF8BD4573FB17B
55C080FFAFB094A3F8573B68995720AFF7DB2EE0C202ECE12A4C92073AE2EB25
74B14ED153A8F979B90025D71D3B1FFC3B608954179572D8415466C7C09176BB
FA2D508BF91F44C625F615DA8B6D9BD246BF75DCD0E9066FE99E16C4B6C0C85B
85CB56E1E53EF4E78FCBE0EF9BF5D57C83383DAAE9FDCD81CE653893BFF6AB58
CD1AAE8D5C7A74DF8F8F7787C5AABD70F9AC2BD4EEB2E7CD639264842886BCBF
6BC3E0EFBEA2C9F87EA0F5C27EA06C9E0B5A80DF92E1070CCD17B6D2A543605E
53068366E263AE9D85F8D59F47F699C618A05F1C706785C772310C3FE01ACF0A
5BD941A752240A38384C3D37BB3EA5D93491DD504ADCEDB7550AFC68E7AE1CE2
E1DFCC6C5F44924C7D5C628982032D1DB868A2B398AC7B1F4989FE44BF13660B
D280FF3D96943B7433D5F7E4F531CEB5CF7F38C019D977A03F9843DDF29E85A7
73D0DA1FC84652865F04B50C49612B2CC6763106D8623FCB6A3056A016465A6C
9D09CC71321D99E4786E1F1A5B2B21C7B2B5AFD1C9F7EFFB9A370CD30930769F
1FDCCD87704E7F933EC8FC8003DC7CB45FD31A7AE24578FCE78904C6246D44C9
DF5055220E1DB730C9D4AD9B5A20708B7443BF051703DC7970AC607B13DE52B8
70283536DA7AEE54415DF88A9D3E4314E7BCCA829D917B3E193A296197A89180
22F4D99AF70C94F6E5BA62D36F8A5F5F65433E91F37F9C82F1E9F9C25FCE7D9F
74F018E226CF30A1BEC37FC5C7E8D79C5A5A2F778EFE55357A1CA665D6665EAC
354350DBB8301FFE92B8DD9413DB44590F9EC87D8E39F4BEA89F6835833BE3D0
37D0D774F6061AAA593A5657609A7DD316C456DC7CFAB8FA5AF05BD4C5FC4255
F34CAC489640AAA3AA1C6D8DC0340CEB3B6DDE5C9EB689ACD359858E05E28059
FE4144A03AB9014437549ED7B639A6424BFD8AEBC7DD39FB33C547A47B017E21
E15F6B78A931F2BD8596187BEAF5E43317D83A6FE432E46B70C8A1C0FB201D60
C307AED078506E61E5EC3728B5AC444255961323258D52C9AE5F8FD9B6D71359
85F8BA98ED4B9537EB0FAC1E5326E9675D60F1465B6573EAF9C377EE37D59212
E3FBF0E4B80D924872EB18A96A0D2A9E94CC9BADB4934925BD5BAABA90FBAA5A
F2E294DFA94631F27321F3FE0A2AB4928C6B39BC01D449E82DAB064DF7D9E05F
FCCA5849F6B463F568BA1A90254C02B590755E0E6D9738C0822A37221F53D3F2
29F6F7010C307BAFBF21596B99FA4189BC622801715E63DA3C084E4F2EFD9652
1B6A5EBD32F20C4C4AC0F36D026C4E65B049E774C5CED5AD6665F7F0D7F576C5
B8CE6D2DF2F24D0C2C081F552B7DCACE4B1C7CEF321B26027CC7B269628BE7D9
6D722E08B0570CB64884799C494A4A7241C8E08C7CDD36A619EEC872535858A8
FA3CF905AA712DCBDD2303F191E4BC1839DC5895314AA64D258B3B8A6CE99EE1
D9946E56CAB7AAE9CDC38D6188B29A5040DC66EE5846916654B8F7CD6F28659B
5D98F1C9CE260DE9AD91D617F3E548F626EEEC49396C5836EE33DCCF3233D7C3
F191518EF2E213039C84A54BE364E9A691BF227EF8FEB939CFDC0DCED2FF64FF
8EAD9F4620C536C11CE837DAAE2C0B4654BDB022759C37236EC0520670D8789F
21DDB3310C422583C8A4169ECA848658017CDC9140D5BC37F1C0CC702871E465
D6941CBD065FDD0DA4DC341E09AABDFB5777BF4C7683D6B744032B50E760CAA1
5C07B7929A283DBC31E863E2C7175597C04352E3CBE80CC7CA82601BCEE12F55
662C6F6C34AB5B7E354EB5004578DE74CB0D7D1264C5A86035DE97BBA5BF02E9
016C5739D3D9CFD82935FE44BAE8AC08B5F307C37122562F480C3E3F02AED742
8AD4E525BA5DCCB59C063A411B868F9DAF96474F85CB2CCCC4A006497EBDD953
E143CC314517DAEFA4127E43E25416B41D61AE808794F8097565C867AA0DBD64
7A082CF817FAC7E35D2BBA1DE4D65C8927F01BBF577C1FF4F07E4EA8F28B1763
7809BFFD7BE7C10AA00D1E65B277E614769693F02483781A8BA16BB1634605C6
23DA46BA4156D88AA240E916EB7F26495D482F0CBC0C679E881CCA8AE1D0150A
ECE13088BFC12930E4775A3B2D81EC8C0B56CBFD4903BC681044186D1DF62BDF
C5C2931488414FD97383390577BA2302ABFE6A0B7EFF602301D7ED906B935CA6
8470A69B11DBB06D5823FD9A962910D4737083B52FED63B544C5565C5B9758CC
057CA035F49C9C56F2C527DBD99E9FD2CA8E5658D57B068EC4F225BC504667D7
E8B193F246F1494CA041EDB2293D74EBD67FA34EF68BFF7A909620C7DE35E0A4
FE07136FD231024C4EC71B90C82716282ABC074DF808C381ECA76A5DF59F17F3
89B9641F85C972A1D3E8B89D1469CF6BA75038D609A2706CC93354A19EBC2797
BE56FF8F206A0D93769131AFD6591ED59512448D18A9F78B7379F4B55127D315
FB9289479D78F97C2D48B1DE1670EB0CFC3FBEED61AA9B48FA05D49DBFC20CB0
ADA64DC1C48881DB47F8F538CC3CA1F6BC90C598C2FC7E4B7FC26E6B9322D647
0FC63A90F1A0B6876316A7F83E26F5F8F1D037311EA8745D9B2729FAEF5CEB97
7E5BE205979611528BAC923F38F3657422973C9307FD7049B2BDA066066D43AC
FAC03A2811161927333C69C1CBF2FA4CA265FEF5D5F1E68F1CA4AC7CC9926ED6
D15D7DDD8FF67E28474D1C9A27109BA1837CC67D3160495143E0CB038B182622
8B0572F3DDE654B25BFEFF45FC239A04B011E1A4040081FCB6DC9891624DF6C5
2EF37CD9BEBE4B0939AB3BE131DB6A7EF4B7CE36881D71CFED34F8E2600034BD
F71993E683BB0A5AECD89736796A356CBD7193D2F4EE5D4DED4EA9AB5579D177
2792A8CBA645D57D49CCB4E61575A66948CB05EDA63D480DE92792DA2984FDDD
75492C1CAA1F93013D019B9405359667F28FF1B2A946608E3939B8E671D1817E
C7081052F6894CBDF5DB7825E2C5970F7EC953EBBB93C4C22D4F24FF7B45599C
2AB4F0F2FE713D9150A81C77639155ED7D32F7EF4A63EEDC57F385B390450A5D
D4DDAC2DF2ADF4B7E9C2A2629DBBB328FF3D20F3F43569E9465C8CF31C277F13
155102C686ABBF55BA22D4ADD1804AB47BF8B170AD9034EEADF4ECE31D063409
19E6711BA98D8E9EE8DDFCB6645D05C7A93D2F29266A514B0C8EECC326BCA508
2DA9D6B3E084327078C4F0848D956092D96822D0B534851C013C955C5E2775D9
AA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Dingbats
%!PS-AdobeFont-1.0: Dingbats 001.005
%%CreationDate: Tue Oct 19 1999
% Copyright URW Software, Copyright 1997 by URW
% URW Software, Copyright 1997 by URW
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (001.005) readonly def
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright URW Software, Copyright 1997 by URW) readonly def
/FullName (Dingbats ) readonly def
/FamilyName (Dingbats) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -72 def
/UnderlineThickness 36 def
end readonly def
/FontName /Dingbats def
/PaintType 0 def
/WMode 0 def
/FontBBox {-1 -143 981 819} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 172 /a120 put
dup 173 /a121 put
dup 184 /a132 put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB737CF9024F3D038DF9A0002D
8FB689C5F5000C3ADDAFE55EDCBC4E54B36A58190743E32FDCA7A24B64F5E7F9
DC901DE44A25E99E322B3D3CBC10C0412B0531B14E81134FD1DEC47BCB7514E4
64E7550B900404A017C92336BC792744F6F38904282AFE8C998D4B9DB7893830
A6A01872E9D6AABF66C4B08716A39BD9E5ACC0641E506B70430524E780517E59
81EAECFCF9798A634318B8D160438435B65CC6910E609F13A4963AEF2B2540DA
DDD64E0E1D15EFDD5D36D4FCD9E4D81E21D52784DD3DBB741AB5FC052F481B1A
A701AB81CF4EB85075726F3FEC0872C02EBF4D62F5DFB8990C1A0CC8161F83A2
D01108B6C4AEC3845BB4F61288F733429B7B558A225D582AC04BEBF127E8DB14
B59F027502AF59E46E0063B792D35B2DA4EE7DC3F2A64DB325318C1CB1A57504
3527B10BDC733305E18032A64A1002439BE13D163AEE778CAAF5A7A8D00CCCCA
673B8FA9A99551594E85F21580733527E4E19743F4C932D443625DB353CA959B
FBB3BC7996F1F3559E8738D7B3FF1FC8AAFD28CE8C9CDF3CC10A8E7DCE003893
8BB497D690310A0380F290601BE482029578B45097DBD56F52352D7F931A1A1C
735A74CA33FC62A04E1D1E1B023AC376072F284019BC59482D7A70ABE4960360
327DF8ECCB3D671C00396A3825EB21D8E0138E367F796267A9277573DB0D3A69
29C870ED83BB8487C618F3F16299CA950F2C78F31BB1DD166D076D3276364A6F
D71DF859AF41EBED9F4F6608EFBBBECF32F8E8DCCEEB631E12C3CF1D2FAAE944
0B58A6AF1B0838D8FD1C087564AE66657BAC3A58A4EEDF997EB49F8D967E148F
381E61C91E0D30CCA1C6F2D303F04E9793DA4587B0A46A244932BCD87E29AAA3
54ABBEA21243084ECD350A25158AC6596F45656333170F697E088ACB6FA0E0DB
5B83CAAAC0C03C3F55166FC377E829EB5FF66B6376AC6E3F7414E4A017F9FAE4
3F47C36E5544A53544EA46E23778024A3CBA9DC490FD77F0F3AA902CB3639D45
D5A0ABBF1FA44FA6A5D7779A5031AB41EA00ADC8A7AED0FFA3EC08393469FDE6
EAA3E54E66EF5D51CA73EDF7798A4397FC6B28F7DFB72F5895A6BBEDED9F4F66
08EFBBBECF32F886C8D85857949472AC9610B70329CBC2AC275331FF48058901
2D7881C8E03BDA7EBDF5C56C2B03F6BAB0D5AC4D24808941E5C46ED2D8A66A55
FFCCC8EBCEC593DCDB97D883FC8742B32B6BC3946C4099D1340D27C4479C144A
FDC37E40093C97E0C9709DF0F438F47031D1A13C84DAAD94B84E98E1DEA814D3
4AD1C22BF3D7E222146343ADA94FAD98E2212BCB115345D433ED23F7B0B9A741
4BA069BF6A561046451DE4BC24A07DF636EEE26184D68D5C550EA460E36E1FCC
24D0148C458B745876A5FE59181DA036ADCC813FD66FDDFC026516FDA258B0E7
B322AE7035E5B6F2CCDFEB403000D71C009C357C261CAF36D82E71133EC8B444
B7E7DC48017132AE6CD2829494E60F2504668290F9E346C3888787F1714CC0D5
32DF3E26ADABB48FAEB2D2682FA119D72F24F7BC44E210AB2A3A44B1EB69C07B
CBE3A853130C1166EE98EBA1E3D42177830C3B5B440DA51D295CCDAB8AAC408D
9A03D40585C0AB2F5ACE792F05368499B19687E504C113DCD7A4A26181DFED9C
34F6913CB64A13292288CEA9B7B8DD2F0B8D82752DF19FF85F3ABBCA8FA901CE
71083A4988777B0BA569D036482645367F7E7A19093EE0BC436B346E014DB409
9EDC67BC432E470A4171EB75304F9A5C8286AC95FD505FFFCE931B60115AF416
E2FC2C82A5A8D5FE0BB2929C94EC4E0AB0128EF0FAA81AD2E91846D59CBAB892
68B6CB078368109A3AFD9C3107DA232FE1FB923D3ABE78293BF063FBE6E21910
586DCEE2DAA656D1A9845954314F142A4E6568317559332B34FB651CC92781B4
882D36D3C1FE648F22EE690EFC3058A33A87D0409B34925087CD0918CE75CCEE
298E96A59755370E746320CAAA9DCD5DCCA2DF92EE50089F30F3C4ADE4D30730
5271D998208C7B8E20F26CA64199D2B76323794E1E12FE6F8C7D44EE0E3C26FC
E96B24DED8A0DA83D58D8413A45EB188F18952BCC0AAB8BBFE5C889EDAF00C9C
984618D80EC03A858CE09E4587B808417B54E603A6E083BDDB99755645905322
7D9D94FBA34793243644B8A33EA33DCE502037451B79C52B101ADAA48FB0A461
4612258F624C15E18D9EE65D657E19E355BD525A77989E7F7E8EF19E00DD5250
200A15715182C353D510D44F02568063DDD256BCEF1E2C5C6108E8BE54894372
B84D03D1BC13B376DE2A30960687F2DCF04B03A9E9D2207ECBCA72CD44569F01
2842832FDC45853FC87E8DFB5967876DD8797D2FC771E803F077572234B5E42D
053482045F9AF9790D85B8D87F1908F94927BFD060CC594E01D7232A2F3C3565
33B99DE6891224A5614BF4EF1DD2FD31DDEFF8E458ED5302AC8EE5561F6A8A35
4DC78A74DE836AB41C1F19004A263F48263C27AF5E0D027B46F86C3BB653A5A2
A373A7E4D303AA48061C948BCE3C0DF788D6CCA7C97A82344F676958CBE764EC
ABE84ABED150C66DE6111008B70521E4C3F3EFD4F84DC63083CC9EB53A0E2E7F
FE9382A570237B4D891245EB3074E0D4D749ABA49269C8F547DCD6E7B147D53D
B0D8DB88F2B3993857814C0425422114A2EE1CAC69094D687FEFD9B19038C071
8F1B6DE01DCE21355D9B98C8DB190358785C0EB1B42F4C16A6C660F6AEC501E1
576674A924744F8C02E32BE4E26B9A70FA11E642EE3FB43851CA584470B9BBFA
AA7872B6FFDA44CD4027821349AB67EC7EF8F34D00DFA6DDC162B0035B7125AE
4A4D163DBB278A135A0FF3A7273CAC3EE3418F9BE44097917BF0ABD17CC61991
05D71EA2B418F24890E001AC0B77634ADF095362D7589E2A5807139695A122BF
ADCC34FB582E2009B5F923CA4AC2310F456AAA585416CBA31B7D3FBC58BE6F11
69F8ACE2974D9050C7FAD558EAB47BA9963C4657D7D83880EC8AFA7243B6D7DE
0F5F2D3A9C08629033CE0A9A894246E73462D22FE7D95D445D5E2A3F62AEBCCE
57613CCE251DA6B0901EC307EDBFF403499438497597648EC632EFC8CA0DCC06
AA00B3F76EED2457C2CB49196BE36995641DEB2F8256C295AFF4774850FE5579
C60D0533C64A43DCD964E66A5D8FAF2E5A7956C53127E8843527C27E87370FAA
E6A7875592509B8151E337AD668AF84BDACB3A9973B9000B7B82A825AE5D2442
3F5880DC300155CE5B85FAA9B35C2FB67547E2182DECDA94B623C1774E814AA4
7BF94FD8B5608CA1639395D61D3ED33DE04E3AC5D06C7E3B009EE4959DBB288A
162F6E1DA5BD3A9D24FC0E7A7B8687B3039A508F47CCDE815A23F2253C5CC0A1
25CA0E33035817A1AAB1BF086B8EE19A57539D1CDEB7AC4CE43F18BF68744E38
63CDA79DFDEBA1E28A4944D30C4FC03EA8DEA782C79EE04E6D02113AA4F8B028
5A472EE6A300366A216995BA1B8C6D3991BCE0E8BE2A5E1EF7ADF6EB47379040
41DA466EE4F175A014FA59440418860BF447D6DAD1E7F4A1096340F28680A510
F0D456C1620D4B4A91EBAA6E0DF01C3E06F5515670B712B7D8AC0DA7F4AE824A
F0F59BC8B308E831BCF1BDCFDAE3F1CF103B5ABDB87D8FC207FC13EDB53C19FD
1E66166C17CBB17352EB64CB1A3396C32EA7AADAD08CDDB0157579C24EC81E65
BC9A9C1286BB21FE050708DD3A3AC2FE4D37AB1A201405082EBF952C46AA442E
E43B4BD0264DE0348AE6CBACB07BE6121538F456A7529C5E0B79B70B17CA76EA
91469D8C8B7295763696BD3DA090368B31AB3110CBCE09C50010D70DC8024C62
C1CD83542B7D55C42E66856B9EDD9A3998188B005F25176CA538E5DF594D8254
3BA9F612F5F855C50795978B97E3680D29A8603A86F391F65D418C7634DE12F2
2346F7E25153EF9205DCC7D358569163497F182D4DABAFF9450503BFF5692881

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (ficheExo_Calc.dvi)
@start /Fa 156[23 99[{ TeXBase1Encoding ReEncodeFont }1
51.9385 /Utopia-Italic rf /Fc 57[49 49 35[49 161[{}3
68.7422 /Fourier-Math-Symbols rf /Fd 135[35 54[43 65[{
 TeXBase1Encoding ReEncodeFont }2 68.7422 /Utopia-Italic
rf /Fe 199[36 3[36 2[36 7[24 24 40[{ TeXBase1Encoding ReEncodeFont }5
68.7422 /Utopia-Regular rf /Fg 145[36 110[{
 TeXBase1Encoding ReEncodeFont }1 58.049 /Utopia-Italic
rf /Fi 193[63 1[63 1[63 1[63 56[{}4 76.3801 /Fourier-Math-Extension
rf /Fj 204[31 31 50[{ TeXBase1Encoding ReEncodeFont }2
58.049 /Utopia-Regular rf /Fk 57[55 55 33[55 1[55 48[64
112[{}5 76.3802 /Fourier-Math-Symbols rf /Fl 22[35 112[39
2[47 26 30 31 43 45 41 47 1[23 42 24 24 3[35 45 34 43
43 10[49 12[26 59 54 44 46 58 1[48 48 18[20 1[20 41[46
2[{ TeXBase1Encoding ReEncodeFont }31 76.3802 /Utopia-Italic
rf /Fn 252[65 3[{}1 83.022 /MSAM10 rf /Fo 22[40 40 110[40
2[40 48 28 34 34 46 47 45 49 72 24 2[24 48 41 26 40 46
38 46 42 10[49 60 48 43 52 1[50 59 56 70 45 1[29 29 2[45
48 59 53 1[49 6[21 4[43 43 43 43 43 2[21 43[49 2[{
 TeXBase1Encoding ReEncodeFont }48 76.3802 /Utopia-Bold
rf /Fp 71[163 10[163 163 172[{}3 206.559 /Dingbats rf
/Fq 22[98 115[115 65 83 74 112 2[118 175 53 2[55 3[98
114 1[114 99 10[120 4[145 2[148 1[108 7[148 1[123 63[116
2[{ TeXBase1Encoding ReEncodeFont }21 190.034 /Utopia-Regular
rf /Fr 6[46 4[44 4[22 22 4[39 39 38 6[40 36[34 15[34
48[37 39 37 59 38 46 26 33 30 45 46 44 47 70 21 40 21
22 46 40 24 39 46 38 46 40 3[25 1[25 1[45 1[72 48 60
47 41 49 58 46 58 60 72 43 50 27 27 61 56 44 46 60 52
49 49 1[30 1[44 2[20 40 40 40 40 40 40 40 40 40 40 35
20 30 20 44 31 27 27 21 4[35 31[47 2[{ TeXBase1Encoding ReEncodeFont }
86 76.3802 /Utopia-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 -354 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 -354 a 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1212 a
SDict begin H.S end
 -136 -1212 a -136 -1212
a
SDict begin H.R end
 -136 -1212 a -136 -1212 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -136 -1212 a Black 0 TeXcolorgray
Black 0 TeXcolorgray -128 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -600 a -128 -600
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -600 a -128 -600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -600 a -128 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128
-600 a -128 -600 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -128 -600 a -128 -600 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -128 -600
a -128 -600 a
SDict begin H.S end
 -128 -600 a -128 -600 a
SDict begin 12 H.A end
 -128 -600 a -128
-600 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -128 -600 a -128 34 a

 -128 34 a -128 34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128
34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 324.4461 67.83875 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore
 0 TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 0.0 moveto

 0.0 68.15623 lineto

 498.6206 68.15623 lineto

 498.6206 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 1.41731 moveto

 1.41731 66.7389 lineto

 497.2033 66.7389 lineto

 497.2033 1.41731 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 59.6522 ] concat

 pgfs



-128 34 a

 -128 34 a -128 34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 135.38957 16.3731 lineto

 137.18996 16.3731 138.64943 14.91362 138.64943 13.11324 curveto

 138.64943 3.25984 lineto

 138.64943 1.45946 137.18996 0.0 135.38957 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 135.38957 15.23923 lineto

 136.56374 15.23923 137.51556 14.2874 137.51556 13.11324 curveto

 137.51556 3.25984 lineto

 137.51556 2.08568 136.56374 1.13385 135.38957 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray
0 TeXcolorgray 0.62 0.12 0.39 TeXcolorrgb -110 34 a Fr(S\351ance)18
b(1.)91 b(Le)18 b(calcul)f(litt\351r)o(al)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 34 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 27.9544 ] concat

 pgfs


 0 TeXcolorgray
0.62 0.12 0.39 TeXcolorrgb -128 109 a Fq(Les)43 b(identit\351s)f(r)l
(emar)o(quables)922 b Fp(\254)43 b(\255)f(\270)p 0 TeXcolorgray
0 TeXcolorgray -128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 650 a

 -128 650 a -128 650
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 28.5366 ] concat

 pgfs



 0 setgray
 -128 650 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 28.5366 ] concat

 pgfs



 0 setgray
 -128 650 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.25 setgray}def

 1.0 .pgfsetfillopacityalpha

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 1.41731 moveto

 0.0 55.65588 lineto

 0.0 56.43864 0.63455 57.07321 1.41731 57.07321 curveto

 497.2033 57.07321 lineto

 497.98605 57.07321 498.6206 56.43864 498.6206 55.65588 curveto

 498.6206 1.41731 lineto

 498.6206 0.63455 497.98605 0.0 497.2033 0.0 curveto

 1.41731 0.0 lineto

 0.63455 0.0 0.0 0.63455 0.0 1.41731 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 5.66934 pgfw
 0.62 0.12 0.39 TeXcolorrgb
 2.83467 57.07321 moveto

 2.83467 0.0 lineto

 pgfstr
 0
TeXcolorgray
 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 14.17337 10.76056 ] concat

 pgfs


 0 TeXcolorgray -128 392 a Fo(U)m(tiliser)16
b(le)f(calcul)f(litt\351ral)p 0 TeXcolorgray -128 521
a Fn(\003)p 0 TeXcolorgray 42 w Fr(U)m(tiliser)19 b(le)f(calcul)f
(litt\351r)o(al)p 0 TeXcolorgray -128 650 a Fn(\003)p
0 TeXcolorgray 42 w Fr(U)m(tiliser)i(les)f(\351galit\351s)g(r)o
(emarquables)p 0 TeXcolorgray -128 650 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
0 TeXcolorgray -72 834 a

 -72 834 a -72 834 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray
-56 834 a Fo(1)p 0 TeXcolorgray -72 834 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.24 0.34 0.4
TeXcolorrgb 90 886 a Fo(S)o(ituation)d(de)h(r)o(echer)o(che)p
0 TeXcolorgray -128 988 a Fl(n)22 b Fr(est)c(un)g(nombr)o(e)f(entier)-5
b(.)19 b(On)e(pose)24 b Fl(A)17 b Fk(\306)d Fr(\(3)p
Fl(n)g Fk(\305)c Fr(1\))1399 953 y Fj(2)1446 988 y Fk(\305)g
Fr(16)p Fl(n)1642 953 y Fj(2)1688 988 y Fk(\241)g Fr(26)p
Fl(n)k Fk(\305)c Fr(3.)-128 1024 y
SDict begin H.S end
 -128 1024 a -128 1024
a
SDict begin 12 H.A end
 -128 1024 a -128 1024 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -128 1024 a 0 TeXcolorgray
-26 1123 a Fo(1.)p 0 TeXcolorgray 42 w Fr(D\351velopper)19
b(et)e(r\351duir)o(e)23 b Fl(A)s Fr(.)-128 1157 y
SDict begin H.S end
 -128
1157 a -128 1157 a
SDict begin 12 H.A end
 -128 1157 a -128 1157 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -128 1157
a 0 TeXcolorgray -26 1256 a Fo(2.)p 0 TeXcolorgray 42
w Fr(D\351montr)o(er)17 b(que)24 b Fl(A)c Fr(est)e(le)g(carr\351)f(d)n
('un)g(nombr)o(e)h(entier)-5 b(.)-72 1463 y

 -72 1463
a -72 1463 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 1463 a Fo(2)p 0 TeXcolorgray
-72 1463 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.24 0.34 0.4 TeXcolorrgb 90 1515 a Fo(S)o(ituation)15
b(de)h(r)o(echer)o(che)p 0 TeXcolorgray -128 1552 a
SDict begin H.S end
 -128
1552 a -128 1552 a
SDict begin 12 H.A end
 -128 1552 a -128 1552 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -128 1552
a 0 TeXcolorgray -26 1667 a Fo(1.)p 0 TeXcolorgray 42
w Fr(E)o(ffectuer)j(les)f(op\351r)o(ations)h(suivantes)g(:)e(5)1330
1632 y Fj(2)1376 1667 y Fk(\241)10 b Fr(4)g Fk(\243)g
Fr(6)92 b(et)e(9)1883 1632 y Fj(2)1929 1667 y Fk(\241)10
b Fr(10)g Fk(\243)g Fr(8.)19 b(Quelle)g(r)o(emarque)e(peut-on)i(fair)o
(e)9 b(?)-128 1700 y
SDict begin H.S end
 -128 1700 a -128 1700 a
SDict begin 12 H.A end
 -128 1700
a -128 1700 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -128 1700 a 0 TeXcolorgray -26 1800 a Fo(2.)p
0 TeXcolorgray 42 w Fr(C)o(alculer)18 b Fl(n)435 1765
y Fj(2)481 1800 y Fk(\241)10 b Fr(\()p Fl(n)k Fk(\305)c
Fr(1\))g Fk(\243)g Fr(\()p Fl(n)k Fk(\241)c Fr(1\).)-128
1826 y
SDict begin H.S end
 -128 1826 a -128 1826 a
SDict begin 12 H.A end
 -128 1826 a -128 1826
a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -128 1826 a 0 TeXcolorgray -26 1932 a Fo(3.)p 0 TeXcolorgray
42 w Fr(C)o(onclur)o(e)o(.)-72 2141 y

 -72 2141 a -72
2141 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 12.11073 12.89781 -6.4489 -6.05536 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.1034 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 2141 a Fo(3)p 0 TeXcolorgray
-72 2141 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.24 0.34 0.4 TeXcolorrgb 90 2193 a Fo(S)o(ituation)15
b(de)h(r)o(echer)o(che)p 0 TeXcolorgray -128 2799 a
SDict begin H.S end
 -128
2799 a -128 2799 a
SDict begin 12 H.A end
 -128 2799 a -128 2799 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -128 2799
a 0 TeXcolorgray -26 2871 a Fo(1.)p 0 TeXcolorgray 42
w Fr(C)o(alcule)j(l)o('air)o(e)e(du)g(gr)o(and)g(carr\351)g(de)g(deux)g
(fa\347ons)h(diff\351r)o(entes)o(.)-128 2904 y
SDict begin H.S end
 -128 2904
a -128 2904 a
SDict begin 12 H.A end
 -128 2904 a -128 2904 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -128 2904 a 0 TeXcolorgray
-26 3000 a Fo(2.)p 0 TeXcolorgray 42 w Fr(Quelle)g(\351galit\351)h
(peux)f(tu)g(en)f(d\351duir)o(e)9 b(?)p 0 TeXcolorgray
0 TeXcolorgray 4165 2214 a

 4165 2214 a 4165 2214 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 1 setlinecap

 1 setlinejoin

 -229.60931 -167.81305 moveto

 -229.60931 -167.81305 moveto

 -229.60931 0.0 lineto

 27.77974 0.0 lineto

 27.77974 -167.81305 lineto

 closepath

 27.77974 0.0 moveto

 clip

 newpath

 -196.15987 -147.40332 moveto

 -114.5209 -147.40332 lineto

 pgfstr

 -207.49884 -31.18166 moveto

 -207.49884 -54.99286 lineto

 pgfstr

 save

 0 0.39215 0 setrgbcolor

 -198.42766 -28.3468 moveto

 -198.42766 -141.73404 lineto

 pgfstr

 restore

 save

 0 0.39215 0 setrgbcolor

 -198.42766 -141.73404 moveto

 -85.04042 -141.73404 lineto

 pgfstr

 restore

 save

 0 0.39215 0 setrgbcolor

 -85.04042 -141.73404 moveto

 -85.04042 -28.3468 lineto

 pgfstr

 restore

 save

 0 0.39215 0 setrgbcolor

 -85.04042 -28.3468 moveto

 -198.42766 -28.3468 lineto

 pgfstr

 restore

 save

 0 0.39215 0 setrgbcolor

 -113.38724 -28.3468 moveto

 -113.38724 -141.73404 lineto

 pgfstr

 restore

 save

 0 0.39215 0 setrgbcolor

 -198.42766 -56.69362 moveto

 -85.04042 -56.69362 lineto

 pgfstr

 restore

 -86.74117 -23.8112 moveto

 -113.38724 -23.8112 lineto

 pgfstr

 -76.53629 -57.82729 moveto

 -76.53629 -140.0333 lineto

 pgfstr

 -104.88309 -10.77191 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -101.76175 -18.42632 ] concat

 pgfs



 0 setgray
 4167
2214 a Fl(a)4165 2214 y


 pgfr

 restore

 restore

 -220.53813 -38.55167 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -217.4168 -46.20605 ] concat

 pgfs



 0 setgray
 4167 2214 a Fl(a)4165 2214 y


 pgfr

 restore

 restore

 -163.27745 -146.83626 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -160.1561 -156.807 ] concat

 pgfs



 0 setgray

4165 2214 a Fl(b)4165 2214 y


 pgfr

 restore

 restore

 -73.13481 -91.27675 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 -70.01346 -101.2475 ] concat

 pgfs



 0 setgray
 4165 2214 a Fl(b)4165 2214
y


 pgfr

 restore

 restore

 save

 /pgffc{0 setgray}def

 -196.15987 -147.40332 moveto

 -198.40149 -147.40332 moveto

 -195.03905 -145.462 lineto

 -195.03905 -149.3446 lineto

 -198.40149 -147.4033 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -114.5209 -147.40332 moveto

 -112.27928 -147.40332 moveto

 -115.64171 -149.34462 lineto

 -115.64171 -145.46202 lineto

 -112.27928 -147.40334 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -207.49884 -31.18166 moveto

 -207.49884 -28.94003 moveto

 -205.55753 -32.30246 lineto

 -209.44012 -32.30246 lineto

 -207.49883 -28.94003 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -207.49884 -54.99286 moveto

 -207.49884 -57.23448 moveto

 -209.44014 -53.87206 lineto

 -205.55754 -53.87206 lineto

 -207.49886 -57.23448 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -85.04042 -23.8112 moveto

 -82.7988 -23.8112 moveto

 -86.16124 -25.7525 lineto

 -86.16124 -21.8699 lineto

 -82.7988 -23.81122 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -113.38724 -23.8112 moveto

 -115.62886 -23.8112 moveto

 -112.26642 -21.86989 lineto

 -112.26642 -25.75249 lineto

 -115.62886 -23.81119 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -76.53629 -57.82729 moveto

 -76.53629 -55.58566 moveto

 -74.59497 -58.94809 lineto

 -78.47757 -58.94809 lineto

 -76.53627 -55.58566 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgffc{0 setgray}def

 -76.53629 -140.0333 moveto

 -76.53629 -142.27492 moveto

 -78.47758 -138.91248 lineto

 -74.59499 -138.91248 lineto

 -76.5363 -142.27492 lineto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 restore

 newpath

 restore

 pgfc


 -128 4456 a

 -128 4456 a -128 4456 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 45.11002 ] concat

 pgfs



 0 setgray
 -128 4456 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 37.11961 ] concat

 pgfs



 0 setgray
 -128
4456 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 80.81232 ] concat

 pgfs



 0 setgray
 -128 4456 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.405 0.5925 0.7125 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 2.83464 moveto

 0.0 87.38538 lineto

 0.0 88.95091 1.2691 90.22003 2.83464 90.22003 curveto

 495.78596 90.22003 lineto

 497.3515 90.22003 498.6206 88.95091 498.6206 87.38538 curveto

 498.6206 2.83464 lineto

 498.6206 1.2691 497.3515 0.0 495.78596 0.0 curveto

 2.83464 0.0 lineto

 1.2691 0.0 0.0 1.2691 0.0 2.83464 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.931 0.9685 0.9925 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 2.83464 moveto

 1.41731 72.82193 lineto

 497.2033 72.82193 lineto

 497.2033 2.83464 lineto

 497.2033 2.05188 496.56873 1.41731 495.78596 1.41731 curveto

 2.83464 1.41731 lineto

 2.05188 1.41731 1.41731 2.05188 1.41731 2.83464 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.5 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.41731 72.82193 moveto

 1.41731 87.38538 lineto

 1.41731 88.16814 2.05188 88.8027 2.83464 88.8027 curveto

 495.78596 88.8027 lineto

 496.56873 88.8027 497.2033 88.16814 497.2033 87.38538 curveto

 497.2033 72.82193 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 save

 1.41731 72.82193 moveto

 1.41731 87.38538 lineto

 1.41731 88.16814 2.05188 88.8027 2.83464 88.8027 curveto

 495.78596 88.8027 lineto

 496.56873 88.8027 497.2033 88.16814 497.2033 87.38538 curveto

 497.2033 72.82193 lineto

 closepath

 clip

 newpath

 [1 0 0 1 249.31029 80.8123 ] concat

 [9.91693 0 0 0.31964 0.0 0.0 ] concat

 [0.0 1.0 -1.0 0.0 0.0 0.0 ] concat

 pgfs


 -544 4873 a

 -544 4873 a -544 4873
a


 pgfo

 100.00128 100.00128 0.0 0.0 pgfe

 clip

 newpath

 100.00128 100.00128 pgfV 75.00096 0.55374 0.69437 0.78436 0.55374
0.69437 0.78436 pgfshade 50.00064 0.55374 0.69437 0.78436 0.6952 0.79716
0.86241 pgfshade 25.00032 0.6952 0.79716 0.86241 0.83669 0.89996 0.94046
pgfshade 0.0 0.83669 0.89996 0.94046 0.83669 0.89996 0.94046 pgfshade
 pop

 pgfc


 -128 4456 a


 pgfr

 restore

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 78.23196 ] concat

 pgfs


 1 TeXcolorgray 1 TeXcolorgray -128 4459
a Fo(Th\351or\350me)15 b(1.)32 b(Les)15 b(identit\351s)h(r)o
(emarquables)p 1 TeXcolorgray 0 TeXcolorgray -128 4456
a


 pgfr

 restore

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 34.53926 ] concat

 pgfs


 0 TeXcolorgray -128 4265 a Fr(P)n(our)h(tous)h(nombr)o(es)i
Fl(a)h Fr(et)d Fl(b)t Fr(,)p 0 TeXcolorgray 0 TeXcolorgray
-86 4394 a(\()r Fl(a)c Fk(\305)c Fl(b)t Fr(\))139 4359
y Fj(2)187 4394 y Fk(\306)17 b Fl(a)306 4359 y Fj(2)351
4394 y Fk(\305)10 b Fr(2)r Fl(a)t(b)k Fk(\305)c Fl(b)674
4359 y Fj(2)p 0 TeXcolorgray 0 TeXcolorgray -86 4523
a Fr(\()r Fl(a)k Fk(\241)c Fl(b)t Fr(\))139 4488 y Fj(2)187
4523 y Fk(\306)17 b Fl(a)306 4488 y Fj(2)351 4523 y Fk(\241)10
b Fr(2)r Fl(a)t(b)k Fk(\305)c Fl(b)674 4488 y Fj(2)p
0 TeXcolorgray 0 TeXcolorgray -86 4651 a Fr(\()r Fl(a)k
Fk(\241)c Fl(b)t Fr(\)\()r Fl(a)k Fk(\305)c Fl(b)t Fr(\))j
Fk(\306)j Fl(a)495 4617 y Fj(2)540 4651 y Fk(\241)10
b Fl(b)652 4617 y Fj(2)p 0 TeXcolorgray -128 4456 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0
TeXcolorgray -128 4982 a

 -128 4982 a -128 4982 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 save

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 48.09065 lineto

 498.6206 48.09065 lineto

 498.6206 0.0 lineto

 closepath

 498.6206 48.09065 moveto

 clip

 newpath

 save

 save

 restore

 0.0 4.25183 moveto

 0.0 43.8388 lineto

 0.0 46.18706 1.90358 48.09065 4.25183 48.09065 curveto

 494.36877 48.09065 lineto

 496.71703 48.09065 498.6206 46.18706 498.6206 43.8388 curveto

 498.6206 4.25183 lineto

 498.6206 1.90358 496.71703 0.0 494.36877 0.0 curveto

 4.25183 0.0 lineto

 1.90358 0.0 0.0 1.90358 0.0 4.25183 curveto

 closepath

 clip

 newpath

 save

 save

 /pgffc{0.946 0.886 0.7 setrgbcolor}def

 0.0 4.25183 moveto

 0.0 43.8388 lineto

 0.0 46.18706 1.90358 48.09065 4.25183 48.09065 curveto

 494.36877 48.09065 lineto

 496.71703 48.09065 498.6206 46.18706 498.6206 43.8388 curveto

 498.6206 4.25183 lineto

 498.6206 1.90358 496.71703 0.0 494.36877 0.0 curveto

 4.25183 0.0 lineto

 1.90358 0.0 0.0 1.90358 0.0 4.25183 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 restore

 restore

 restore

 save
 0 TeXcolorgray
 save

0 TeXcolorgray 0 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 20.92181 3.9851 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray 0 TeXcolorgray
-128 4865 a Fr(Dans)20 b(la)h(propr)q(i\351t\351)g(ci)f(dessus)o(,)i
(le)f(membr)o(e)g(de)f(gauche)h(est)g(la)g(for)q(me)g(factor)q(is\351e)
g(et)g(dans)f(celui)i(de)e(droite)g(est)h(la)g(for)q(me)g(d\351ve-)-128
4965 y(lopp\351e)o(.)-128 4982 y


 pgfr

 restore
 0 TeXcolorgray
 restore

 restore

 save
 0 TeXcolorgray
 save

0 TeXcolorgray 0 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 1.99255 32.88228 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray -128 4900
a
SDict begin H.S end
 -128 4900 a -128 4900 a
SDict begin 12 H.A end
 -128 4900 a -128 4900 a
SDict begin [/View [/XYZ H.V]/Dest (bclogocompteur.1) cvn /DEST pdfmark
end
 -128
4900 a 141 x @beginspecial 0 @llx 0 @lly 18 @urx 18 @ury
169 @rwi @setspecial
%%BeginDocument: bc-info.mps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 18 18 
%%HiResBoundingBox: 0.45152 0.46007 17.38799 17.10422 
%%Creator: MetaPost 1.504
%%CreationDate: 2011.07.24:1123
%%Pages: 1
%%BeginProlog
%%EndProlog
%%Page: 1 1
gsave newpath 0.45152 17.10422 moveto
17.38799 17.10422 lineto
17.38799 0.46007 lineto
0.45152 0.46007 lineto
 closepath clip
 1 0.3098 0.38039 setrgbcolor
newpath 16.48871 9.28284 moveto
16.48871 5.10353 13.0965 1.71133 8.9172 1.71133 curveto
4.74298 1.71133 1.35078 5.10353 1.35078 9.28284 curveto
1.35078 13.4571 4.74298 16.84921 8.9172 16.84921 curveto
13.0965 16.84921 16.48871 13.4571 16.48871 9.28284 curveto
 closepath fill
 0 0 0 setrgbcolor 0 0.51001 dtransform truncate idtransform setlinewidth pop [] 0 setdash 1 setlinejoin
 10 setmiterlimit
newpath 16.48871 9.28284 moveto
16.48871 5.10353 13.0965 1.71133 8.9172 1.71133 curveto
4.74298 1.71133 1.35078 5.10353 1.35078 9.28284 curveto
1.35078 13.4571 4.74298 16.84921 8.9172 16.84921 curveto
13.0965 16.84921 16.48871 13.4571 16.48871 9.28284 curveto
 closepath stroke
 0.96863 0.7255 0 setrgbcolor
newpath 15.99615 9.28284 moveto
15.99615 5.37267 12.82738 2.20392 8.9172 2.20392 curveto
5.01212 2.20392 1.84337 5.37267 1.84337 9.28284 curveto
1.84337 13.18788 5.01212 16.35664 8.9172 16.35664 curveto
12.82738 16.35664 15.99615 13.18788 15.99615 9.28284 curveto
 closepath fill
 1 1 1 setrgbcolor 0 0.47678 dtransform truncate idtransform setlinewidth pop
newpath 15.99615 9.28284 moveto
15.99615 5.37267 12.82738 2.20392 8.9172 2.20392 curveto
5.01212 2.20392 1.84337 5.37267 1.84337 9.28284 curveto
1.84337 13.18788 5.01212 16.35664 8.9172 16.35664 curveto
12.82738 16.35664 15.99615 13.18788 15.99615 9.28284 curveto
 closepath stroke
 1 0.80392 0.00392 setrgbcolor
newpath 8.8969 16.09262 moveto
5.42345 16.09262 2.54922 13.44177 2.08711 9.99886 curveto
3.75783 8.07423 6.17502 6.84532 8.86642 6.8047 curveto
8.9172 6.8047 8.96799 6.79962 9.01369 6.79962 curveto
11.65941 6.79962 14.04614 7.94728 15.73718 9.77542 curveto
15.3715 13.32503 12.44652 16.09262 8.8969 16.09262 curveto
 closepath fill
 1 1 1 setrgbcolor
newpath 8.9172 14.89413 moveto
7.95744 14.89413 7.18048 14.09177 7.18048 13.10663 curveto
7.18048 12.11644 7.95744 11.31409 8.9172 11.31409 curveto
9.87698 11.31409 10.65901 12.11644 10.65901 13.10663 curveto
10.65901 14.09177 9.87698 14.89413 8.9172 14.89413 curveto
 closepath fill
newpath 8.07423 10.39494 moveto
7.57658 10.39494 7.18048 9.98361 7.18048 9.47072 curveto
7.18048 4.59064 lineto
7.18048 4.08282 7.57658 3.66641 8.07423 3.66641 curveto
9.76018 3.66641 lineto
10.25784 3.66641 10.65901 4.08282 10.65901 4.59064 curveto
10.65901 9.47072 lineto
10.65901 9.98361 10.25784 10.39494 9.76018 10.39494 curveto
 closepath fill
 0 0 0 setrgbcolor 0 0.49445 dtransform truncate idtransform setlinewidth pop
newpath 8.9172 14.89413 moveto
7.95744 14.89413 7.18048 14.09177 7.18048 13.10663 curveto
7.18048 12.11644 7.95744 11.31409 8.9172 11.31409 curveto
9.87698 11.31409 10.65901 12.11644 10.65901 13.10663 curveto
10.65901 14.09177 9.87698 14.89413 8.9172 14.89413 curveto
 closepath stroke
newpath 8.07423 10.39494 moveto
7.57658 10.39494 7.18048 9.98361 7.18048 9.47072 curveto
7.18048 4.59064 lineto
7.18048 4.08282 7.57658 3.66641 8.07423 3.66641 curveto
9.76018 3.66641 lineto
10.25784 3.66641 10.65901 4.08282 10.65901 4.59064 curveto
10.65901 9.47072 lineto
10.65901 9.98361 10.25784 10.39494 9.76018 10.39494 curveto
 closepath stroke
 0 0.38034 dtransform truncate idtransform setlinewidth pop 1 setlinecap
newpath 19.41975 19.10422 moveto 0 0 rlineto stroke
newpath -1.58025 -0.54367 moveto 0 0 rlineto stroke
grestore
showpage
%%EOF

%%EndDocument
 @endspecial 0.82 0.62 0 TeXcolorrgb 33 4992 a Fo(R)o(emarque)p
0 TeXcolorgray 0 TeXcolorgray -128 4982 a


 pgfr

 restore
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 save
 0 TeXcolorgray 0 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 1.99255 12.57297 ] concat

 pgfs



 0 setgray
 -57 5048
a

 -57 5048 a -57 5048 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 1.49442 pgfw

 0 setlinecap

 0.82 0.62 0 setrgbcolor

 0.0 20.84207 moveto

 0.0 0.0 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 -128 4982 a


 pgfr

 restore
 0 TeXcolorgray
 restore

 restore

 newpath

 restore

 pgfc


 0
TeXcolorgray -72 5237 a

 -72 5237 a -72 5237 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray
-56 5237 a Fo(4)p 0 TeXcolorgray -72 5237 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.38 0.56 0.68
TeXcolorrgb 90 5289 a Fo(A)o(pplication)14 b(dir)o(ecte)p
0 TeXcolorgray -128 5391 a Fr(D\351velopper)-5 b(,)20
b(r\351duir)o(e)d(et)g(or)o(donner)g(ces)h(produits)o(.)f(On)g(pourr)o
(a)h(utiliser)h(le)f(calcul)f(for)q(mel)h(de)g(GGB)f(pour)h(v\351r)q
(i\002er)f(les)h(r\351sultats)o(.)p 0 TeXcolorgray 0
TeXcolorgray -80 5492 a Fl(A)f Fk(\306)d Fr(\()r Fl(x)h
Fk(\305)10 b Fr(5\))269 5458 y Fj(2)p 0 TeXcolorgray
0 TeXcolorgray -86 5621 a Fl(B)22 b Fk(\306)14 b Fr(\()r
Fl(a)g Fk(\241)c Fr(3\))271 5586 y Fj(2)p 0 TeXcolorgray
0 TeXcolorgray 1108 5492 a Fl(D)21 b Fk(\306)14 b Fr(\(5)r
Fl(x)h Fk(\241)10 b Fr(1\))1511 5458 y Fj(2)p 0 TeXcolorgray
0 TeXcolorgray 1108 5621 a Fl(E)22 b Fk(\306)14 b Fr(\(2)r
Fl(a)g Fk(\305)c Fr(4\))1503 5586 y Fj(2)p 0 TeXcolorgray
0 TeXcolorgray 2302 5482 a Fl(F)24 b Fk(\306)14 b Fr(\(3,)8
b(2)i Fk(\241)i Fl(x)5 b Fr(\)\(3,)j(2)i Fk(\305)i Fl(x)5
b Fr(\))p 0 TeXcolorgray 0 TeXcolorgray 2300 5611 a Fl(G)20
b Fk(\306)15 b Fr(\()r Fl(x)g Fk(\241)10 b Fr(4\))2659
5577 y Fj(2)p 0 TeXcolorgray 0 TeXcolorgray 3498 5492
a Fl(H)23 b Fk(\306)14 b Fr(\(2)c Fk(\305)i Fl(x)5 b
Fr(\))3864 5458 y Fj(2)p 0 TeXcolorgray 0 TeXcolorgray
3498 5621 a Fl(I)25 b Fk(\306)14 b Fr(\(2)c Fk(\241)3760
5552 y(p)p 3824 5552 41 5 v 69 x Fr(5)q(\))3892 5586
y Fj(2)p 0 TeXcolorgray 3987 5856 a Fr(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1212 a
SDict begin H.S end
 -136 -1212 a -136 -1212
a
SDict begin H.R end
 -136 -1212 a -136 -1212 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -136 -1212 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -72 -548 a

 -72 -548 a -72
-548 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 save

 /pgffc{0.38 0.56 0.68 setrgbcolor}def

 12.11073 12.89781 -6.4489 -6.05536 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.1034 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 -548 a Fo(5)p 0 TeXcolorgray
-72 -548 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.38 0.56 0.68 TeXcolorrgb 90 -496 a Fo(A)o(pplication)14
b(dir)o(ecte)p 0 TeXcolorgray -128 -396 a Fr(T)-6 b(rois)17
b(tr)q(iangles)h(\351quilat\351r)o(aux)h(identiques)f(sont)g
(d\351coup\351s)g(dans)f(les)h(coins)f(d)n('un)h(tr)q(iangle)f
(\351quilat\351r)o(al)i(de)e(c\364t\351)g(6)g(cm.)h(La)f(somme)h(des)
-128 -297 y(p\351r)q(im\350tr)o(es)26 b(des)e(trois)h(petits)h(tr)q
(iangles)e(est)i(\351gale)e(au)h(p\351r)q(im\350tr)o(e)g(de)f(l)o
('hexagone)i(gr)q(is)e(r)o(estant.)h(Quelle)h(est)f(la)f(mesur)o(e)h
(du)g(c\364t\351)f(des)-128 -197 y(petits)19 b(tr)q(iangles)9
b(?)p 0 TeXcolorgray 0 TeXcolorgray 1359 1094 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 71.13185 123.20042 142.26372
0.0 0.0 0.0  /Lineto /lineto load def 0  setlinejoin false NArray n
2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt {
CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1
def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def
x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha
y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11
sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos
mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known
{ ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.
 1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 18.4941 32.03798 52.63774
91.16243 89.62596 91.16243 123.7696 32.03798 105.27505 0.0 36.98865
0.0  /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq {
0 0 /n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
0 TeXcolorgray -128 5856 a(2)p 0.5 0 0.5 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1212 a
SDict begin H.S end
 -136 -1212 a -136 -1212
a
SDict begin H.R end
 -136 -1212 a -136 -1212 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -136 -1212 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -128 34 a

 -128 34 a -128
34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 324.4461 67.83875 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore
 0
TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 0.0 moveto

 0.0 68.15623 lineto

 498.6206 68.15623 lineto

 498.6206 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 1.41731 moveto

 1.41731 66.7389 lineto

 497.2033 66.7389 lineto

 497.2033 1.41731 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 59.6522 ] concat

 pgfs


 -128 34 a

 -128 34 a -128 34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray

-128 34 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 135.38957 16.3731 lineto

 137.18996 16.3731 138.64943 14.91362 138.64943 13.11324 curveto

 138.64943 3.25984 lineto

 138.64943 1.45946 137.18996 0.0 135.38957 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 135.38957 15.23923 lineto

 136.56374 15.23923 137.51556 14.2874 137.51556 13.11324 curveto

 137.51556 3.25984 lineto

 137.51556 2.08568 136.56374 1.13385 135.38957 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0.62 0.12 0.39
TeXcolorrgb -110 34 a Fr(S\351ance)18 b(2.)91 b(Le)18
b(calcul)f(litt\351r)o(al)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 34 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 27.9544 ] concat

 pgfs


 0 TeXcolorgray 0.62 0.12 0.39
TeXcolorrgb -128 109 a Fq(Les)43 b(identit\351s)f(r)l(emar)o(quables)
922 b Fp(\254)43 b(\255)f(\270)p 0 TeXcolorgray 0 TeXcolorgray
-128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray -128 385 a

 -128 385 a -128 385
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 save

 0.0 0.0 moveto

 0.0 0.0 moveto

 0.0 36.18513 lineto

 498.6206 36.18513 lineto

 498.6206 0.0 lineto

 closepath

 498.6206 36.18513 moveto

 clip

 newpath

 save

 save

 restore

 0.0 4.25183 moveto

 0.0 31.9333 lineto

 0.0 34.28156 1.90358 36.18513 4.25183 36.18513 curveto

 494.36877 36.18513 lineto

 496.71703 36.18513 498.6206 34.28156 498.6206 31.9333 curveto

 498.6206 4.25183 lineto

 498.6206 1.90358 496.71703 0.0 494.36877 0.0 curveto

 4.25183 0.0 lineto

 1.90358 0.0 0.0 1.90358 0.0 4.25183 curveto

 closepath

 clip

 newpath

 save

 save

 /pgffc{0.946 0.886 0.7 setrgbcolor}def

 0.0 4.25183 moveto

 0.0 31.9333 lineto

 0.0 34.28156 1.90358 36.18513 4.25183 36.18513 curveto

 494.36877 36.18513 lineto

 496.71703 36.18513 498.6206 34.28156 498.6206 31.9333 curveto

 498.6206 4.25183 lineto

 498.6206 1.90358 496.71703 0.0 494.36877 0.0 curveto

 4.25183 0.0 lineto

 1.90358 0.0 0.0 1.90358 0.0 4.25183 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 restore

 save

 restore

 restore

 restore

 save
 0 TeXcolorgray
 save
 0 TeXcolorgray 0 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 20.92181 3.9851 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray
0 TeXcolorgray -128 368 a Fr(Les)19 b(identit\351s)f(r)o(emarquables)g
(sont)g(pr)q(imor)o(diales)g(dans)f(la)g Fo(factor)q(isation)e
Fr(d)n('expr)o(essions)o(.)-128 385 y


 pgfr

 restore
 0 TeXcolorgray
 restore

 restore

 save

0 TeXcolorgray
 save
 0 TeXcolorgray 0 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 1.99255 20.97678 ] concat

 pgfs



 0 setgray
 0 TeXcolorgray
-128 303 a
SDict begin H.S end
 -128 303 a -128 303 a
SDict begin 12 H.A end
 -128 303 a -128 303
a
SDict begin [/View [/XYZ H.V]/Dest (bclogocompteur.2) cvn /DEST pdfmark
end
 -128 303 a 141 x @beginspecial 0 @llx 0 @lly 18 @urx
18 @ury 169 @rwi @setspecial
%%BeginDocument: bc-info.mps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 18 18 
%%HiResBoundingBox: 0.45152 0.46007 17.38799 17.10422 
%%Creator: MetaPost 1.504
%%CreationDate: 2011.07.24:1123
%%Pages: 1
%%BeginProlog
%%EndProlog
%%Page: 1 1
gsave newpath 0.45152 17.10422 moveto
17.38799 17.10422 lineto
17.38799 0.46007 lineto
0.45152 0.46007 lineto
 closepath clip
 1 0.3098 0.38039 setrgbcolor
newpath 16.48871 9.28284 moveto
16.48871 5.10353 13.0965 1.71133 8.9172 1.71133 curveto
4.74298 1.71133 1.35078 5.10353 1.35078 9.28284 curveto
1.35078 13.4571 4.74298 16.84921 8.9172 16.84921 curveto
13.0965 16.84921 16.48871 13.4571 16.48871 9.28284 curveto
 closepath fill
 0 0 0 setrgbcolor 0 0.51001 dtransform truncate idtransform setlinewidth pop [] 0 setdash 1 setlinejoin
 10 setmiterlimit
newpath 16.48871 9.28284 moveto
16.48871 5.10353 13.0965 1.71133 8.9172 1.71133 curveto
4.74298 1.71133 1.35078 5.10353 1.35078 9.28284 curveto
1.35078 13.4571 4.74298 16.84921 8.9172 16.84921 curveto
13.0965 16.84921 16.48871 13.4571 16.48871 9.28284 curveto
 closepath stroke
 0.96863 0.7255 0 setrgbcolor
newpath 15.99615 9.28284 moveto
15.99615 5.37267 12.82738 2.20392 8.9172 2.20392 curveto
5.01212 2.20392 1.84337 5.37267 1.84337 9.28284 curveto
1.84337 13.18788 5.01212 16.35664 8.9172 16.35664 curveto
12.82738 16.35664 15.99615 13.18788 15.99615 9.28284 curveto
 closepath fill
 1 1 1 setrgbcolor 0 0.47678 dtransform truncate idtransform setlinewidth pop
newpath 15.99615 9.28284 moveto
15.99615 5.37267 12.82738 2.20392 8.9172 2.20392 curveto
5.01212 2.20392 1.84337 5.37267 1.84337 9.28284 curveto
1.84337 13.18788 5.01212 16.35664 8.9172 16.35664 curveto
12.82738 16.35664 15.99615 13.18788 15.99615 9.28284 curveto
 closepath stroke
 1 0.80392 0.00392 setrgbcolor
newpath 8.8969 16.09262 moveto
5.42345 16.09262 2.54922 13.44177 2.08711 9.99886 curveto
3.75783 8.07423 6.17502 6.84532 8.86642 6.8047 curveto
8.9172 6.8047 8.96799 6.79962 9.01369 6.79962 curveto
11.65941 6.79962 14.04614 7.94728 15.73718 9.77542 curveto
15.3715 13.32503 12.44652 16.09262 8.8969 16.09262 curveto
 closepath fill
 1 1 1 setrgbcolor
newpath 8.9172 14.89413 moveto
7.95744 14.89413 7.18048 14.09177 7.18048 13.10663 curveto
7.18048 12.11644 7.95744 11.31409 8.9172 11.31409 curveto
9.87698 11.31409 10.65901 12.11644 10.65901 13.10663 curveto
10.65901 14.09177 9.87698 14.89413 8.9172 14.89413 curveto
 closepath fill
newpath 8.07423 10.39494 moveto
7.57658 10.39494 7.18048 9.98361 7.18048 9.47072 curveto
7.18048 4.59064 lineto
7.18048 4.08282 7.57658 3.66641 8.07423 3.66641 curveto
9.76018 3.66641 lineto
10.25784 3.66641 10.65901 4.08282 10.65901 4.59064 curveto
10.65901 9.47072 lineto
10.65901 9.98361 10.25784 10.39494 9.76018 10.39494 curveto
 closepath fill
 0 0 0 setrgbcolor 0 0.49445 dtransform truncate idtransform setlinewidth pop
newpath 8.9172 14.89413 moveto
7.95744 14.89413 7.18048 14.09177 7.18048 13.10663 curveto
7.18048 12.11644 7.95744 11.31409 8.9172 11.31409 curveto
9.87698 11.31409 10.65901 12.11644 10.65901 13.10663 curveto
10.65901 14.09177 9.87698 14.89413 8.9172 14.89413 curveto
 closepath stroke
newpath 8.07423 10.39494 moveto
7.57658 10.39494 7.18048 9.98361 7.18048 9.47072 curveto
7.18048 4.59064 lineto
7.18048 4.08282 7.57658 3.66641 8.07423 3.66641 curveto
9.76018 3.66641 lineto
10.25784 3.66641 10.65901 4.08282 10.65901 4.59064 curveto
10.65901 9.47072 lineto
10.65901 9.98361 10.25784 10.39494 9.76018 10.39494 curveto
 closepath stroke
 0 0.38034 dtransform truncate idtransform setlinewidth pop 1 setlinecap
newpath 19.41975 19.10422 moveto 0 0 rlineto stroke
newpath -1.58025 -0.54367 moveto 0 0 rlineto stroke
grestore
showpage
%%EOF

%%EndDocument
 @endspecial 0.82 0.62 0 TeXcolorrgb 33 395 a Fo(R)o(emarque)p
0 TeXcolorgray 0 TeXcolorgray -128 385 a


 pgfr

 restore
 0 TeXcolorgray
 restore

 save

0 TeXcolorgray
 save
 0 TeXcolorgray 0 TeXcolorgray
 restore

 save

 [1.0 0.0 0.0 1.0 1.99255 6.62024 ] concat

 pgfs



 0 setgray
 -57 401
a

 -57 401 a -57 401 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 1.49442 pgfw

 0 setlinecap

 0.82 0.62 0 setrgbcolor

 0.0 8.93657 moveto

 0.0 0.0 lineto

 pgfstr

 restore

 restore

 newpath

 restore

 pgfc


 -128 385 a


 pgfr

 restore
 0 TeXcolorgray
 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
-128 1061 a

 -128 1061 a -128 1061 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 30.09369 ] concat

 pgfs



 0 setgray
 -128 1061 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 22.1033 ] concat

 pgfs



 0 setgray
 -128
1061 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 50.77968 ] concat

 pgfs



 0 setgray
 -128 1061 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.405 0.5925 0.7125 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 2.83464 moveto

 0.0 57.35274 lineto

 0.0 58.91829 1.2691 60.1874 2.83464 60.1874 curveto

 495.78596 60.1874 lineto

 497.3515 60.1874 498.6206 58.91829 498.6206 57.35274 curveto

 498.6206 2.83464 lineto

 498.6206 1.2691 497.3515 0.0 495.78596 0.0 curveto

 2.83464 0.0 lineto

 1.2691 0.0 0.0 1.2691 0.0 2.83464 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.931 0.9685 0.9925 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 2.83464 moveto

 1.41731 42.78929 lineto

 497.2033 42.78929 lineto

 497.2033 2.83464 lineto

 497.2033 2.05188 496.56873 1.41731 495.78596 1.41731 curveto

 2.83464 1.41731 lineto

 2.05188 1.41731 1.41731 2.05188 1.41731 2.83464 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.5 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.41731 42.78929 moveto

 1.41731 57.35274 lineto

 1.41731 58.1355 2.05188 58.77007 2.83464 58.77007 curveto

 495.78596 58.77007 lineto

 496.56873 58.77007 497.2033 58.1355 497.2033 57.35274 curveto

 497.2033 42.78929 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 save

 1.41731 42.78929 moveto

 1.41731 57.35274 lineto

 1.41731 58.1355 2.05188 58.77007 2.83464 58.77007 curveto

 495.78596 58.77007 lineto

 496.56873 58.77007 497.2033 58.1355 497.2033 57.35274 curveto

 497.2033 42.78929 lineto

 closepath

 clip

 newpath

 [1 0 0 1 249.31029 50.77966 ] concat

 [9.91693 0 0 0.31964 0.0 0.0 ] concat

 [0.0 1.0 -1.0 0.0 0.0 0.0 ] concat

 pgfs


 -544 1477 a

 -544 1477 a -544 1477
a


 pgfo

 100.00128 100.00128 0.0 0.0 pgfe

 clip

 newpath

 100.00128 100.00128 pgfV 75.00096 0.55374 0.69437 0.78436 0.55374
0.69437 0.78436 pgfshade 50.00064 0.55374 0.69437 0.78436 0.6952 0.79716
0.86241 pgfshade 25.00032 0.6952 0.79716 0.86241 0.83669 0.89996 0.94046
pgfshade 0.0 0.83669 0.89996 0.94046 0.83669 0.89996 0.94046 pgfshade
 pop

 pgfc


 -128 1061 a


 pgfr

 restore

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 48.19933 ] concat

 pgfs


 1 TeXcolorgray 1 TeXcolorgray -128 1064
a Fo(Th\351or\350me)g(2.)32 b(Les)15 b(identit\351s)h(r)o(emarquables)p
1 TeXcolorgray 0 TeXcolorgray -128 1061 a


 pgfr

 restore

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 19.52295 ] concat

 pgfs


 0 TeXcolorgray
-128 995 a Fr(P)n(our)h(tous)h(nombr)o(es)i Fl(a)h Fr(et)d
Fl(b)t Fr(,)p 0 TeXcolorgray -128 1124 a Fo(F)m(or)q(me)e(factor)q
(is\351e)p 0 TeXcolorgray 39 w Fr(\()r Fl(a)e Fk(\241)c
Fl(b)t Fr(\)\()r Fl(a)k Fk(\305)c Fl(b)t Fr(\))j Fk(\306)j
Fl(a)1094 1089 y Fj(2)1139 1124 y Fk(\241)10 b Fl(b)1251
1089 y Fj(2)1303 1124 y Fr([F)m(or)q(me)19 b(d\351velopp\351e])p
0 TeXcolorgray -128 1061 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -72 1240 a

 -72 1240 a -72
1240 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 1240 a Fo(1)p 0 TeXcolorgray
-72 1240 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.75 0 0.25 TeXcolorrgb 90 1292 a Fo(V)l(u)d(au)g(br)o(ev)o
(et)e(M\351tropole)g(J)m(uin)p 0 TeXcolorgray -128 1324
a
SDict begin H.S end
 -128 1324 a -128 1324 a
SDict begin 12 H.A end
 -128 1324 a -128 1324 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -128
1324 a 0 TeXcolorgray -26 1421 a Fo(1.)p 0 TeXcolorgray
42 w Fr(On)j(donne)h(l)o('expr)o(ession)h Fl(E)j Fk(\306)14
b Fr(\(3)r Fl(x)h Fk(\305)10 b Fr(8\))1264 1387 y Fj(2)1310
1421 y Fk(\241)g Fr(64.)-128 1453 y
SDict begin H.S end
 -128 1453 a -128
1453 a
SDict begin 12 H.A end
 -128 1453 a -128 1453 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -128 1453 a 0 TeXcolorgray
126 1550 a Fr(\()p Fo(a)p Fr(\))p 0 TeXcolorgray 41 w(D\351velopper)18
b Fl(E)8 b Fr(.)-128 1582 y
SDict begin H.S end
 -128 1582 a -128 1582 a
SDict begin 12 H.A end
 -128
1582 a -128 1582 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -128 1582 a 0 TeXcolorgray 121 1679
a Fr(\()p Fo(b)p Fr(\))p 0 TeXcolorgray 42 w(M)n(ontr)o(er)16
b(que)i Fl(E)25 b Fr(peut)18 b(s)m('\351cr)q(ir)o(e)f(sous)h(for)q(me)g
(factor)q(is\351e)g(:)f(3)r Fl(x)5 b Fr(\(3)r Fl(x)15
b Fk(\305)10 b Fr(16\).)-128 1711 y
SDict begin H.S end
 -128 1711 a -128
1711 a
SDict begin 12 H.A end
 -128 1711 a -128 1711 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -128 1711 a 0 TeXcolorgray
130 1808 a Fr(\()p Fo(c)p Fr(\))p 0 TeXcolorgray 41 w(R\351soudr)o(e)17
b(l)o('\351quation)j(\(3)r Fl(x)15 b Fk(\305)10 b Fr(8\))1230
1774 y Fj(2)1276 1808 y Fk(\241)g Fr(64)15 b Fk(\306)f
Fr(0.)-128 1840 y
SDict begin H.S end
 -128 1840 a -128 1840 a
SDict begin 12 H.A end
 -128 1840 a
-128 1840 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -128 1840 a 0 TeXcolorgray -26 1937 a Fo(2.)p
0 TeXcolorgray 42 w Fr(La)k(distance)f Fl(d)25 b Fr(de)17
b(fr)o(einage)h(d)n('un)g(v\351hicule)h(d\351pend)f(de)f(sa)g(vitesse)i
(et)f(de)f(l)o('\351tat)i(de)e(la)h(route)o(.)80 2051
y(On)f(peut)i(la)e(calculer)h(\340)f(l)o('aide)h(de)f(la)h(for)q(mule)g
(suivante)h(:)130 2213 y Fl(d)j Fk(\306)14 b Fl(k)h Fk(\243)8
b Fl(V)451 2179 y Fj(2)503 2213 y Fr(avec)115 b Fl(d)24
b Fr(:)18 b(distance)g(de)f(fr)o(einage)g(en)h(m)49 b
Fl(V)33 b Fr(:)17 b(vitesse)j(du)d(v\351hicule)i(en)f(m/s)773
2382 y Fl(k)k Fr(:)c(coef\002cient)g(d\351pendant)g(de)f(l)o('\351tat)i
(de)e(la)g(route)1761 2431 y Fi(8)1761 2499 y(>)1761
2522 y(<)1761 2660 y(>)1761 2683 y(:)1866 2543 y Fl(k)88
b Fk(\306)83 b Fr(0,)8 b(14)23 b(sur)17 b(route)h(mouill\351e)1866
2703 y Fl(k)88 b Fk(\306)83 b Fr(0,)8 b(08)23 b(sur)17
b(route)h(s\350che)o(.)80 2831 y(Quelle)g(est)g(la)g(vitesse)h(d)n('un)
f(v\351hicule)h(dont)f(la)f(distance)h(de)f(fr)o(einage)h(sur)f(route)g
(mouill\351e)j(est)e(\351gale)g(\340)f(15)h(m)9 b(?)-72
3034 y

 -72 3034 a -72 3034 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 3034
a Fo(2)p 0 TeXcolorgray -72 3034 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.75 0 0.25 TeXcolorrgb
90 3086 a Fo(V)l(u)16 b(au)g(br)o(ev)o(et)e(M\351tropole)g(Septembr)o
(e)p 0 TeXcolorgray -128 3186 a Fr(P)n(our)j(chaque)h(af\002r)q
(mation,)g(dir)o(e)f(en)g(justi\002ant,)i(si)f(elle)g(est)g(vr)o(aie)h
(ou)e(fausse)o(.)-78 3424 y Fo(Af\002r)q(mation)e(1)h(:)p
536 3486 1542 4 v 536 3645 4 160 v 589 3597 a(P)o(rogramme)e(de)i
(calcul)e(A)p 2074 3645 V 536 3804 V 589 3757 a Fr(Choisir)19
b(un)e(nombr)o(e)p 2074 3804 V 536 3964 V 589 3916 a(Ajouter)h(3)p
2074 3964 V 536 4123 V 589 4075 a(M)m(ultiplier)i(le)e(r\351sultat)g
(par)f(2)p 2074 4123 V 536 4283 V 589 4235 a(S)o(oustr)o(air)o(e)h(le)g
(double)g(du)f(nombr)o(e)g(de)g(d\351par)q(t)p 2074 4283
V 536 4286 1542 4 v 536 4408 a(Le)h(r\351sultat)h(du)e(progr)o(amme)g
(de)h(calcul)f(A)g(est)h(toujours)h(\351gal)e(\340)g(6.)-78
4567 y Fo(Af\002r)q(mation)e(2)h(:)536 4573 y Fr(Le)i(r\351sultat)h(du)
e(calcul)1256 4517 y(7)p 1256 4554 41 5 v 1256 4630 a(5)1317
4573 y Fk(\241)1392 4517 y Fr(4)p 1392 4554 V 1392 4630
a(5)1453 4573 y Fk(\243)1528 4517 y Fr(1)p 1528 4554
V 1528 4630 a(3)1596 4573 y(est)h(\351gal)f(\340)1936
4517 y(1)p 1936 4554 V 1936 4630 a(5)1986 4573 y(.)-78
4742 y Fo(Af\002r)q(mation)e(3)h(:)536 4752 y Fr(La)i(solution)h(de)e
(l)o('\351quation)i(4)r Fl(x)c Fk(\241)10 b Fr(5)16 b
Fk(\306)g Fl(x)f Fk(\305)10 b Fr(1)19 b(est)f(une)g(solution)h(de)e(l)o
('\351quation)k Fl(x)2961 4718 y Fj(2)3007 4752 y Fk(\241)10
b Fr(2)r Fl(x)20 b Fk(\306)14 b Fr(0.)-78 4912 y Fo(Af\002r)q(mation)h
(4)h(:)536 4922 y Fr(P)n(our)h(tous)h(les)g(nombr)o(es)g(entiers)g
Fl(n)k Fr(compr)q(is)17 b(entr)o(e)h(2)g(et)f(9,)h(2)2401
4888 y Fg(n)2455 4922 y Fk(\241)10 b Fr(1)18 b(est)g(un)g(nombr)o(e)f
(pr)o(emier)-5 b(.)p 0 TeXcolorgray 3987 5856 a(3)p 0
TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1212 a
SDict begin H.S end
 -136 -1212 a -136 -1212
a
SDict begin H.R end
 -136 -1212 a -136 -1212 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -136 -1212 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -128 34 a

 -128 34 a -128
34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 324.4461 67.83875 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore
 0
TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 0.0 moveto

 0.0 68.15623 lineto

 498.6206 68.15623 lineto

 498.6206 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 1.41731 moveto

 1.41731 66.7389 lineto

 497.2033 66.7389 lineto

 497.2033 1.41731 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 59.6522 ] concat

 pgfs


 -128 34 a

 -128 34 a -128 34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray

-128 34 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 135.38957 16.3731 lineto

 137.18996 16.3731 138.64943 14.91362 138.64943 13.11324 curveto

 138.64943 3.25984 lineto

 138.64943 1.45946 137.18996 0.0 135.38957 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 135.38957 15.23923 lineto

 136.56374 15.23923 137.51556 14.2874 137.51556 13.11324 curveto

 137.51556 3.25984 lineto

 137.51556 2.08568 136.56374 1.13385 135.38957 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0.62 0.12 0.39
TeXcolorrgb -110 34 a Fr(S\351ance)18 b(3.)91 b(Le)18
b(calcul)f(litt\351r)o(al)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 34 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 27.9544 ] concat

 pgfs


 0 TeXcolorgray 0.62 0.12 0.39
TeXcolorrgb -128 109 a Fq(V)-8 b(us)44 b(au)f(DNB)2206
b Fp(\254)43 b(\255)f(\270)p 0 TeXcolorgray 0 TeXcolorgray
-128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -72 213 a

 -72 213 a -72 213 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray
-56 213 a Fo(1)p 0 TeXcolorgray -72 213 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.75 0 0.25
TeXcolorrgb 90 265 a Fo(V)l(u)16 b(au)g(br)o(ev)o(et)e(P)m(ondicher)q
(y)p 0 TeXcolorgray -128 365 a Fr(On)k(consid\350r)o(e)f(l)o('expr)o
(ession)i Fl(E)j Fk(\306)14 b Fr(\()r Fl(x)h Fk(\241)10
b Fr(2\)\(2)r Fl(x)15 b Fk(\305)10 b Fr(3\))g Fk(\241)g
Fr(3\()r Fl(x)15 b Fk(\241)10 b Fr(2\).)-128 417 y
SDict begin H.S end
 -128
417 a -128 417 a
SDict begin 12 H.A end
 -128 417 a -128 417 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -128 417 a 0 TeXcolorgray
-26 514 a Fo(1.)p 0 TeXcolorgray 42 w Fr(D\351velopper)19
b Fl(E)8 b Fr(.)-128 546 y
SDict begin H.S end
 -128 546 a -128 546 a
SDict begin 12 H.A end
 -128
546 a -128 546 a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -128 546 a 0 TeXcolorgray -26 643 a
Fo(2.)p 0 TeXcolorgray 42 w Fr(F)l(actor)q(iser)18 b
Fl(E)24 b Fr(et)18 b(v\351r)q(i\002er)f(que)h Fl(E)k
Fk(\306)14 b Fr(2)p Fl(F)c Fr(,)18 b(o\371)f Fl(F)24
b Fk(\306)16 b Fl(x)5 b Fr(\()r Fl(x)15 b Fk(\241)10
b Fr(2\).)-128 675 y
SDict begin H.S end
 -128 675 a -128 675 a
SDict begin 12 H.A end
 -128 675 a
-128 675 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -128 675 a 0 TeXcolorgray -26 772 a Fo(3.)p
0 TeXcolorgray 42 w Fr(D\351ter)q(miner)18 b(tous)g(les)g(nombr)o(es)f
(x)h(tels)g(que)g(\()r Fl(x)d Fk(\241)10 b Fr(2\)\(2)r
Fl(x)15 b Fk(\305)10 b Fr(3\))g Fk(\241)g Fr(3\()r Fl(x)15
b Fk(\241)10 b Fr(2\))17 b Fk(\306)e Fr(0.)-72 988 y


-72 988 a -72 988 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 save

 /pgffc{0.75 0 0.25 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 988 a Fo(2)p 0
TeXcolorgray -72 988 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.75 0 0.25 TeXcolorrgb 90 1040
a Fo(V)l(u)h(au)g(br)o(ev)o(et)e(Am\351r)q(ique)h(du)h(N)n(or)o(d)p
0 TeXcolorgray -128 1300 a Fr(Le)25 b(sch\351ma)h(ci-contr)o(e)e(r)o
(epr\351sente)h(le)g(jar)o(din)f(de)g(Le\357la.)i(Il)e(n)-6
b('est)-128 1399 y(pas)18 b(\340)f(l)o('\351chelle)o(.)-128
1499 y([OB])i(et)e([OF])i(sont)f(des)f(murs)o(,)h(OB)g(=)f(6)h(m)f(et)h
(OF)g(=)e(4m.)-128 1599 y(La)23 b(ligne)h(pointill\351e)h(BCDEF)e(r)o
(epr\351sente)h(le)f(gr)q(illage)f(que)i(Le\357la)-128
1698 y(veut)49 b(installer)g(pour)f(d\351limiter)h(un)f
Fo(enclos)42 b(r)o(ectangulair)o(e)-128 1798 y(OCDE)p
Fr(.)-128 1898 y(Elle)24 b(dispose)f(d)n('un)g(rouleau)f(de)g(50)h(m)g
(de)f(gr)q(illage)f(qu)n('elle)j(veut)-128 1997 y(utiliser)19
b(enti\350r)o(ement.)2134 2175 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 110.96552 122.34688 170.71646 122.34688
170.71646 0.0 0.0 0.0 0.0 56.90549   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0. true 0.0 56.90549 110.96552
122.34688 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.0  3.0  0.0  0.0 ] 2 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.25 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 39.83366 122.34688 0.0 122.34688 0.0
96.73915   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.25 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2134 2175 a
tx@Dict begin  { 56.90549 85.35823 } PutCoor PutBegin  end
 2134 2175 a 1984
2202 a Fr(ENCL)o(OS)2134 2175 y
tx@Dict begin  PutEnd  end
 2134 2175 a 2134 2175
a
tx@Dict begin  gsave STV CP T /ps@refangle 135  def grestore  end
 2134 2175 a 2134 2175 a
tx@Dict begin  { 0.0 122.34688 } PutCoor PutBegin  end
 2134 2175 a 2046 2145 a Fr(O)2134
2175 y
tx@Dict begin  PutEnd  end
 2134 2175 a 2134 2175 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 2134 2175 a 2134 2175
a
tx@Dict begin  { 39.83366 122.34688 } PutCoor PutBegin  end
 2134 2175 a 2109 2134 a Fr(B)2134 2175 y
tx@Dict begin  PutEnd  end
 2134 2175
a 2134 2175 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 2134 2175 a 2134 2175 a
tx@Dict begin  { 110.96552 122.34688 } PutCoor PutBegin  end
 2134 2175 a 2108
2132 a Fr(C)2134 2175 y
tx@Dict begin  PutEnd  end
 2134 2175 a 2134 2175 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 2134
2175 a 2134 2175 a
tx@Dict begin  { 0.0 96.73915 } PutCoor PutBegin  end
 2134 2175 a 2048 2202 a Fr(F)2134
2175 y
tx@Dict begin  PutEnd  end
 2134 2175 a 2134 2175 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 2134 2175 a 2134 2175
a
tx@Dict begin  { 0.0 56.90549 } PutCoor PutBegin  end
 2134 2175 a 2046 2202 a Fr(E)2134 2175 y
tx@Dict begin  PutEnd  end
 2134 2175
a 2134 2175 a
tx@Dict begin  gsave STV CP T /ps@refangle -135  def grestore  end
 2134 2175 a 2134 2175 a
tx@Dict begin  { 110.96552 56.90549 } PutCoor PutBegin  end
 2134 2175 a 2163
2259 a Fr(D)2134 2175 y
tx@Dict begin  PutEnd  end
 2134 2175 a -128 2266 a Fr(Le\357la)g(envisage)
f(plusieurs)i(possibilit\351s)g(pour)d(placer)h(le)g(point)g(C.)-128
2363 y
SDict begin H.S end
 -128 2363 a -128 2363 a
SDict begin 12 H.A end
 -128 2363 a -128 2363
a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -128 2363 a 0 TeXcolorgray -26 2459 a Fo(1.)p 0 TeXcolorgray
42 w Fr(En)f(pla\347ant)i(C)e(pour)h(que)g(BC)f Fk(\306)e
Fr(5)i(m,)h(elle)h(obtient)f(que)g(FE)f Fk(\306)e Fr(15)j(m.)-128
2491 y
SDict begin H.S end
 -128 2491 a -128 2491 a
SDict begin 12 H.A end
 -128 2491 a -128 2491
a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -128 2491 a 0 TeXcolorgray 126 2588 a Fr(\()p Fo(a)p
Fr(\))p 0 TeXcolorgray 41 w(V\351r)q(i\002er)f(qu)n('elle)h(utilise)i
(les)e(50)g(m)g(de)f(gr)q(illage)o(.)-128 2621 y
SDict begin H.S end
 -128
2621 a -128 2621 a
SDict begin 12 H.A end
 -128 2621 a -128 2621 a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -128 2621
a 0 TeXcolorgray 121 2717 a Fr(\()p Fo(b)p Fr(\))p 0
TeXcolorgray 42 w(J)m(usti\002er)g(que)h(l)o('air)o(e)g(A)f(de)g(l)o
('enclos)i(OCDE)e(est)h(209)h(m)1892 2682 y Fj(2)1928
2717 y Fr(.)-128 2748 y
SDict begin H.S end
 -128 2748 a -128 2748 a
SDict begin 12 H.A end
 -128
2748 a -128 2748 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -128 2748 a 0 TeXcolorgray -26 2845
a Fo(2.)p 0 TeXcolorgray 42 w Fr(P)n(our)j(avoir)g(une)g(air)o(e)g
(maximale)o(,)i(Le\357la)f(fait)g(appel)g(\340)f(sa)g(voisine)h
(professeur)o(e)g(de)f(math\351matiques)j(qui,)e(un)g(peu)g(pr)o
(ess\351e)o(,)g(lui)80 2945 y(\351cr)q(it)17 b(sur)h(un)f(bout)h(de)f
(papier)h(:)p 0 TeXcolorgray 0 TeXcolorgray 1225 3140
a(\253)c(En)i(notant)j(BC)e Fk(\306)f Fl(x)5 b Fr(,)18
b(on)g(a)f(A\()r Fl(x)5 b Fr(\))14 b Fk(\306)g(\241)r
Fl(x)2401 3106 y Fj(2)2446 3140 y Fk(\305)c Fr(18)r Fl(x)15
b Fk(\305)10 b Fr(144)k(\273)80 3336 y(V\351r)q(i\002er)j(que)h(la)f
(for)q(mule)i(de)e(la)g(voisine)i(est)f(bien)g(coh\351r)o(ente)f(avec)h
(le)g(r\351sultat)g(de)f(la)h(question)h(1.)-128 3367
y
SDict begin H.S end
 -128 3367 a -128 3367 a
SDict begin 12 H.A end
 -128 3367 a -128 3367 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -128
3367 a 0 TeXcolorgray -26 3464 a Fo(3.)p 0 TeXcolorgray
42 w Fl(Dans)f(cette)e(par)q(tie,)h(les)g(questions)g
Fo(a.)g Fl(et)22 b Fo(b)o(.)c Fl(ne)f(n\351cessitent)f(pas)h(de)f
(justi\002cation.)-128 3497 y
SDict begin H.S end
 -128 3497 a -128 3497 a
SDict begin 12 H.A end

-128 3497 a -128 3497 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -128 3497 a 0 TeXcolorgray 126
3593 a Fr(\()p Fo(a)p Fr(\))p 0 TeXcolorgray 41 w(Le\357la)i(a)f(saisi)
h(une)g(for)q(mule)h(en)e(B2)h(puis)h(l)o('a)f(\351tir\351e)g(jusqu)n
('\340)h(la)e(cellule)i(I2.)p 0 TeXcolorgray 0 TeXcolorgray
263 3701 3765 4 v 263 3870 4 170 v 842 3812 a(B2)p 1509
3870 V 1562 3822 a(=)p Fk(\241)p Fr(B1*B1+18*B1+144)p
4024 3870 V 263 3874 3765 4 v 263 4044 4 170 v 406 4044
V 409 4044 V 779 3985 a(A)p 1194 4044 V 1328 3995 a(B)p
1509 4044 V 264 w(C)p 1823 4044 V 259 w(D)p 2137 4044
V 261 w(E)p 2452 4044 V 270 w(F)p 2766 4044 V 264 w(G)p
3081 4044 V 256 w(H)p 3395 4044 V 271 w(I)p 3710 4044
V 287 w(J)p 4024 4044 V 263 4047 3765 4 v 263 4217 4
170 v 316 4158 a(1)p 406 4217 V 409 4217 V 426 w Fl(x)p
1194 4217 V 1333 4168 a Fr(5)p 1509 4217 V 274 w(6)p
1823 4217 V 275 w(7)p 2137 4217 V 274 w(8)p 2452 4217
V 275 w(9)p 2766 4217 V 254 w(10)p 3081 4217 V 234 w(11)p
3395 4217 V 235 w(12)p 3710 4217 V 4024 4217 V 263 4220
3765 4 v 263 4390 4 170 v 316 4332 a(2)p 406 4390 V 464
4342 a Fd(A)s Fe(\()q Fd(x)5 b Fe(\))14 b Fc(\306)f(\241)q
Fd(x)765 4311 y Fj(2)806 4342 y Fc(\305)5 b Fe(18)q Fd(x)k
Fc(\305)c Fe(144)p 1194 4390 V 153 w Fr(209)p 1509 4390
V 195 w(216)p 1823 4390 V 194 w(221)p 2137 4390 V 195
w(224)p 2452 4390 V 194 w(225)p 2766 4390 V 195 w(224)p
3081 4390 V 194 w(221)p 3395 4390 V 194 w(216)p 3710
4390 V 4024 4390 V 263 4393 3765 4 v 263 4563 4 170 v
316 4505 a(3)p 406 4563 V 1194 4563 V 1509 4563 V 1823
4563 V 2137 4563 V 2452 4563 V 2766 4563 V 3081 4563
V 3395 4563 V 3710 4563 V 4024 4563 V 263 4566 3765 4
v 263 4709 a(Quelle)18 b(for)q(mule)g(est)g(alors)g(inscr)q(ite)g(dans)
f(la)h(cellule)g(F2)9 b(?)-128 4738 y
SDict begin H.S end
 -128 4738 a -128
4738 a
SDict begin 12 H.A end
 -128 4738 a -128 4738 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -128 4738 a 0 TeXcolorgray
121 4837 a Fr(\()p Fo(b)p Fr(\))p 0 TeXcolorgray 42 w(P)m(ar)q(mi)20
b(les)h(valeurs)g(\002gur)o(ant)f(dans)g(le)h(tableau,)g(quelle)h(est)f
(celle)g(que)g(Le\357la)g(va)f(choisir)h(pour)g(BC)f(a\002n)g(obtenir)h
(un)f(enclos)263 4937 y(d)n('air)o(e)d(maximale)9 b(?)-128
4952 y
SDict begin H.S end
 -128 4952 a -128 4952 a
SDict begin 12 H.A end
 -128 4952 a -128 4952
a
SDict begin [/View [/XYZ H.V]/Dest (Item.23) cvn /DEST pdfmark end
 -128 4952 a 0 TeXcolorgray 130 5066 a Fr(\()p Fo(c)p
Fr(\))p 0 TeXcolorgray 41 w(Donner)17 b(les)h(dimensions)h(de)e(l)o
('enclos)i(ainsi)g(obtenu.)p 0 TeXcolorgray -128 5856
a(4)p 0.5 0 0.5 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 -354 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 -354
a 0 TeXcolorgray -136 -1212 a
SDict begin H.S end
 -136 -1212 a -136 -1212
a
SDict begin H.R end
 -136 -1212 a -136 -1212 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -136 -1212 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray -128 34 a

 -128 34 a -128
34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 249.31029 34.07811 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 324.4461 67.83875 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 restore

 save
 0.4 TeXcolorgray
 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.11 .pgfsetstrokeopacityalpha

 0.11 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.07 .pgfsetstrokeopacityalpha

 0.07 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.04 .pgfsetstrokeopacityalpha

 0.04 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.02 .pgfsetstrokeopacityalpha

 0.02 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore

 save

 0.01 .pgfsetstrokeopacityalpha

 0.01 .pgfsetfillopacityalpha

 0.0 68.15623 moveto

 166.20811 68.15622 332.41245 68.15622 498.62059 68.15623 curveto

 498.62059 0.0 lineto

 332.41245 0.0 166.20811 0.0 0.0 0.0 curveto

 closepath

 pgffill

 restore
 0
TeXcolorgray
 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 0.0 moveto

 0.0 68.15623 lineto

 498.6206 68.15623 lineto

 498.6206 0.0 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.905 0.78 0.8475 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 1.41731 1.41731 moveto

 1.41731 66.7389 lineto

 497.2033 66.7389 lineto

 497.2033 1.41731 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 255.12138 59.6522 ] concat

 pgfs


 -128 34 a

 -128 34 a -128 34 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray
 -128 34 a


 pgfr

 restore

 restore

 save

 0.0 pgfw

 save

 0.0 pgfw

 restore

 save

 [1.0 0.0 0.0 1.0 69.3247 8.18654 ] concat

 pgfs



 0 setgray

-128 34 a


 pgfr

 restore

 restore

 restore

 save

 /pgffc{0.62 0.12 0.39 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 0.0 3.25984 moveto

 0.0 13.11324 lineto

 0.0 14.91362 1.45946 16.3731 3.25984 16.3731 curveto

 135.38957 16.3731 lineto

 137.18996 16.3731 138.64943 14.91362 138.64943 13.11324 curveto

 138.64943 3.25984 lineto

 138.64943 1.45946 137.18996 0.0 135.38957 0.0 curveto

 3.25984 0.0 lineto

 1.45946 0.0 0.0 1.45946 0.0 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{1 setgray}def

 1.0 .pgfsetfillopacityalpha

 1.13385 3.25984 moveto

 1.13385 13.11324 lineto

 1.13385 14.2874 2.08568 15.23923 3.25984 15.23923 curveto

 135.38957 15.23923 lineto

 136.56374 15.23923 137.51556 14.2874 137.51556 13.11324 curveto

 137.51556 3.25984 lineto

 137.51556 2.08568 136.56374 1.13385 135.38957 1.13385 curveto

 3.25984 1.13385 lineto

 2.08568 1.13385 1.13385 2.08568 1.13385 3.25984 curveto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 9.63786 4.86147 ] concat

 pgfs


 0 TeXcolorgray 0 TeXcolorgray 0.62 0.12 0.39
TeXcolorrgb -110 34 a Fr(S\351ance)18 b(4.)91 b(Le)18
b(calcul)f(litt\351r)o(al)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 -128 34 a


 pgfr

 restore

 save

 1.0 .pgfsetfillopacityalpha

 save

 [1.0 0.0 0.0 1.0 15.5907 27.9544 ] concat

 pgfs


 0 TeXcolorgray 0.62 0.12 0.39
TeXcolorrgb -128 109 a Fq(Q)o(uelques)43 b(d\351\002s)1964
b Fp(\254)43 b(\255)f(\270)p 0 TeXcolorgray 0 TeXcolorgray
-128 34 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray -128 158 a Fo(D\351v)o(eloppement)p
0 TeXcolorgray 40 w Fr(https)19 b(://www)-6 b(.geogebr)o
(a.org/m/fgHDPjEF)p 0 TeXcolorgray -128 287 a Fo(F)l(actor)q(isation)p
0 TeXcolorgray 40 w Fr(https)19 b(://www)-6 b(.geogebr)o(a.org/m/WzrR)o
(d7Kz)p 0 TeXcolorgray -128 416 a Fo(I)n(dentit\351s)16
b(r)o(emarquables)p 0 TeXcolorgray 38 w Fr(https)j(://www)-6
b(.geogebr)o(a.org/m/F)h(A)n(GxT)q(Y)o(Ck)-72 783 y

 -72
783 a -72 783 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 save

 /pgffc{0.24 0.34 0.4 setrgbcolor}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 783 a Fo(1)p 0 TeXcolorgray
-72 783 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0.24 0.34 0.4 TeXcolorrgb 90 835 a Fo(A)o(pprofondissement)p
0 TeXcolorgray -128 935 a Fr(Que)18 b(penses-tu)h(de)f(l)o('af\002r)q
(mation)g(:)-128 1034 y("Les)h(entiers)f(de)f(la)h(for)q(me)f
Fl(n)752 1000 y Fj(3)798 1034 y Fk(\241)10 b Fl(n)21
b Fr(sont)d(divisibles)h(par)f(6")9 b(?)-72 1206 y

 -72
1206 a -72 1206 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0 setgray}def

 save

 /pgffc{0 setgray}def

 12.08086 12.89781 -6.4489 -6.04042 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.11833 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray -56 1206 a Fo(2)p 0
TeXcolorgray -72 1206 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 90 1258 a Fo(D\351\002)p
0 TeXcolorgray -128 1358 a Fr(Le)23 b(r)o(ayon)f(de)g(la)h(boule)g(est)
g(4)g(fois)g(celui)g(du)g(cochonnet.)h(Ils)e(sont)-128
1458 y(plac\351s)17 b(dans)f(une)g(bo\356te)g(carr\351e)g(de)f(27)i(cm)
f(de)f(c\364t\351.)i(C)o(alcule)g(leurs)-128 1557 y(r)o(ayons)g(r)o
(espectifs)o(.)p 0 TeXcolorgray 0 TeXcolorgray -654 2215
a

 -654 2215 a -654 2215 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 1 setlinecap

 1 setlinejoin

 103.7494 -94.11159 moveto

 103.7494 -94.11159 moveto

 103.7494 65.76479 lineto

 267.02687 65.76479 lineto

 267.02687 -94.11159 lineto

 closepath

 267.02687 65.76479 moveto

 clip

 newpath

 save

 /pgfsc{}def/pgffc{}def

 0.8 0.6 0 setrgbcolor

 /pgffc{0.8 0.6 0 setrgbcolor}def

 1.0 .pgfsetfillopacityalpha

 130.39548 -67.46553 moveto

 147.41281 -67.46553 moveto

 147.41281 -58.067 139.794 -50.4482 130.39548 -50.4482 curveto

 120.99695 -50.4482 113.37814 -58.067 113.37814 -67.46553 curveto

 113.37814 -76.86407 120.99695 -84.48288 130.39548 -84.48288 curveto

 139.794 -84.48288 147.41281 -76.86407 147.41281 -67.46553 curveto

 closepath

 130.39548 -67.46553 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 /pgfsc{}def/pgffc{}def

 0.12549 0.12549 0.12549 setrgbcolor

 /pgffc{0.12549 0.12549 0.12549 setrgbcolor}def

 0.32 .pgfsetfillopacityalpha

 195.02617 -24.37827 moveto

 254.86696 -24.37827 moveto

 254.86696 8.6713 228.07574 35.4625 195.02617 35.4625 curveto

 161.97661 35.4625 135.1854 8.6713 135.1854 -24.37827 curveto

 135.1854 -57.42784 161.97661 -84.21904 195.02617 -84.21904 curveto

 228.07574 -84.21904 254.86696 -57.42784 254.86696 -24.37827 curveto

 closepath

 195.02617 -24.37827 moveto

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 1 0 1 setrgbcolor

 113.38724 -85.04042 moveto

 255.12128 -85.04042 lineto

 pgfstr

 restore

 save

 1 0 1 setrgbcolor

 255.12128 -85.04042 moveto

 255.12128 56.69362 lineto

 pgfstr

 restore

 save

 1 0 1 setrgbcolor

 255.12128 56.69362 moveto

 113.38724 56.69362 lineto

 pgfstr

 restore

 save

 1 0 1 setrgbcolor

 113.38724 56.69362 moveto

 113.38724 -85.04042 lineto

 pgfstr

 restore

 save

 0.8 0.6 0 setrgbcolor

 123.02504 -59.52846 moveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 121.4059 -61.0426 ] concat

 pgfs



 0.8 0.6 0 setrgbcolor
 -654 2215 a Fa(c)-654 2215
y


 pgfr

 restore

 restore

 restore

 restore

 newpath

 restore

 pgfc


 2047 633 a

 2047 633 a 2047 633 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0 setgray}def

 save

 /pgffc{0 setgray}def

 12.11073 12.89781 -6.4489 -6.05536 pgfe

 gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore

 newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.52681 -3.1034 ] concat

 pgfs



 0 setgray
 1 TeXcolorgray 2063
633 a Fo(3)p 0 TeXcolorgray 2047 633 a


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray
2209 685 a Fo(D\351\002)p 0 TeXcolorgray 1992 785 a Fr(Les)32
b(cer)o(cles)g(sont)g(tangents)h(deux)f(\340)f(deux.)h(Le)h(r)o(ayon)e
(du)g(plus)1992 885 y(gr)o(and)16 b(cer)o(cle)h(est)h(2.)g(C)o(alcule)h
(le)e(r)o(ayon)g(des)h(deux)f(plus)i(petits)o(.)p 0 TeXcolorgray
0 TeXcolorgray 1198 1879 a

 1198 1879 a 1198 1879 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 1 setlinecap

 1 setlinejoin

 95.24529 -152.50597 moveto

 95.24529 -152.50597 moveto

 95.24529 96.37897 lineto

 349.23288 96.37897 lineto

 349.23288 -152.50597 lineto

 closepath

 349.23288 96.37897 moveto

 clip

 newpath

 226.77448 -28.3468 moveto

 340.16176 -28.3468 moveto

 340.16176 34.27605 289.39734 85.04047 226.77448 85.04047 curveto

 164.15161 85.04047 113.38719 34.27605 113.38719 -28.3468 curveto

 113.38719 -90.96967 164.15161 -141.73409 226.77448 -141.73409 curveto

 289.39734 -141.73409 340.16176 -90.96967 340.16176 -28.3468 curveto

 closepath

 226.77448 -28.3468 moveto

 pgfstr

 170.08086 -28.3468 moveto

 226.77449 -28.3468 moveto

 226.77449 2.9646 201.39227 28.34682 170.08086 28.34682 curveto

 138.76942 28.34682 113.38722 2.9646 113.38722 -28.3468 curveto

 113.38722 -59.65822 138.76942 -85.04044 170.08086 -85.04044 curveto

 201.39227 -85.04044 226.77449 -59.65822 226.77449 -28.3468 curveto

 closepath

 170.08086 -28.3468 moveto

 pgfstr

 283.4681 -28.3468 moveto

 340.16173 -28.3468 moveto

 340.16173 2.9646 314.77951 28.34682 283.4681 28.34682 curveto

 252.15666 28.34682 226.77446 2.9646 226.77446 -28.3468 curveto

 226.77446 -59.65822 252.15666 -85.04044 283.4681 -85.04044 curveto

 314.77951 -85.04044 340.16173 -59.65822 340.16173 -28.3468 curveto

 closepath

 283.4681 -28.3468 moveto

 pgfstr

 226.77448 47.05579 moveto

 263.96843 47.05579 moveto

 263.96843 67.5977 247.31639 84.24974 226.77448 84.24974 curveto

 206.23256 84.24974 189.58052 67.5977 189.58052 47.05579 curveto

 189.58052 26.51387 206.23256 9.86183 226.77448 9.86183 curveto

 247.31639 9.86183 263.96843 26.51387 263.96843 47.05579 curveto

 closepath

 226.77448 47.05579 moveto

 pgfstr

 227.34152 -104.31604 moveto

 264.53548 -104.31604 moveto

 264.53548 -83.77412 247.88344 -67.1221 227.34152 -67.1221 curveto

 206.7996 -67.1221 190.14757 -83.77412 190.14757 -104.31604 curveto

 190.14757 -124.85796 206.7996 -141.51 227.34152 -141.51 curveto

 247.88344 -141.51 264.53548 -124.85796 264.53548 -104.31604 curveto

 closepath

 227.34152 -104.31604 moveto

 pgfstr

 restore

 newpath

 restore

 pgfc


 0
TeXcolorgray 3987 5856 a Fr(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
